
RTOS_example_cubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012a8  08009fd8  08009fd8  0000afd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b280  0800b280  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b280  0800b280  0000c280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b288  0800b288  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b288  0800b288  0000c288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b28c  0800b28c  0000c28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b290  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002238  200001e0  0800b470  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002418  0800b470  0000d418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e12  00000000  00000000  0000d209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd9  00000000  00000000  0002601b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00029bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001359  00000000  00000000  0002b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af81  00000000  00000000  0002c7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c086  00000000  00000000  0004777a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d5e8  00000000  00000000  00063800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007960  00000000  00000000  00100e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0010878c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009fc0 	.word	0x08009fc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009fc0 	.word	0x08009fc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f001 f814 	bl	8001ab8 <HAL_Init>

	  // initialise
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f878 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f968 	bl	8000d68 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a98:	f000 f8d0 	bl	8000c3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a9c:	f000 f90c 	bl	8000cb8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 f938 	bl	8000d14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8000aa4:	f000 fade 	bl	8001064 <SSD1306_Init>
  SSD1306_Clear();
 8000aa8:	f000 fcfd 	bl	80014a6 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8000aac:	f000 fb9e 	bl	80011ec <SSD1306_UpdateScreen>

  SSD1306_GotoXY (0,0);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 fc3e 	bl	8001334 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4920      	ldr	r1, [pc, #128]	@ (8000b3c <main+0xb4>)
 8000abc:	4820      	ldr	r0, [pc, #128]	@ (8000b40 <main+0xb8>)
 8000abe:	f000 fccd 	bl	800145c <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000ac2:	211e      	movs	r1, #30
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f000 fc35 	bl	8001334 <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	491b      	ldr	r1, [pc, #108]	@ (8000b3c <main+0xb4>)
 8000ace:	481d      	ldr	r0, [pc, #116]	@ (8000b44 <main+0xbc>)
 8000ad0:	f000 fcc4 	bl	800145c <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 8000ad4:	f000 fb8a 	bl	80011ec <SSD1306_UpdateScreen>

  HAL_Delay(2000);
 8000ad8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000adc:	f001 f81e 	bl	8001b1c <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ae0:	f003 ff08 	bl	80048f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ae4:	4a18      	ldr	r2, [pc, #96]	@ (8000b48 <main+0xc0>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4818      	ldr	r0, [pc, #96]	@ (8000b4c <main+0xc4>)
 8000aea:	f003 ff69 	bl	80049c0 <osThreadNew>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a17      	ldr	r2, [pc, #92]	@ (8000b50 <main+0xc8>)
 8000af2:	6013      	str	r3, [r2, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 8000af4:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <main+0xcc>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <main+0xd0>)
 8000afa:	f003 ff61 	bl	80049c0 <osThreadNew>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a16      	ldr	r2, [pc, #88]	@ (8000b5c <main+0xd4>)
 8000b02:	6013      	str	r3, [r2, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADC, NULL, &getADCTask_attributes);
 8000b04:	4a16      	ldr	r2, [pc, #88]	@ (8000b60 <main+0xd8>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4816      	ldr	r0, [pc, #88]	@ (8000b64 <main+0xdc>)
 8000b0a:	f003 ff59 	bl	80049c0 <osThreadNew>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <main+0xe0>)
 8000b12:	6013      	str	r3, [r2, #0]

  /* creation of dispOLEDTask */
  dispOLEDTaskHandle = osThreadNew(dispOLED, NULL, &dispOLEDTask_attributes);
 8000b14:	4a15      	ldr	r2, [pc, #84]	@ (8000b6c <main+0xe4>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4815      	ldr	r0, [pc, #84]	@ (8000b70 <main+0xe8>)
 8000b1a:	f003 ff51 	bl	80049c0 <osThreadNew>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <main+0xec>)
 8000b22:	6013      	str	r3, [r2, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <main+0xf0>)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4814      	ldr	r0, [pc, #80]	@ (8000b7c <main+0xf4>)
 8000b2a:	f003 ff49 	bl	80049c0 <osThreadNew>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <main+0xf8>)
 8000b32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b34:	f003 ff10 	bl	8004958 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <main+0xb0>
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	0800a020 	.word	0x0800a020
 8000b44:	0800a028 	.word	0x0800a028
 8000b48:	0800ae44 	.word	0x0800ae44
 8000b4c:	08000e99 	.word	0x08000e99
 8000b50:	200002c4 	.word	0x200002c4
 8000b54:	0800ae68 	.word	0x0800ae68
 8000b58:	08000ea9 	.word	0x08000ea9
 8000b5c:	200002c8 	.word	0x200002c8
 8000b60:	0800ae8c 	.word	0x0800ae8c
 8000b64:	08000f01 	.word	0x08000f01
 8000b68:	200002cc 	.word	0x200002cc
 8000b6c:	0800aeb0 	.word	0x0800aeb0
 8000b70:	08000f3d 	.word	0x08000f3d
 8000b74:	200002d0 	.word	0x200002d0
 8000b78:	0800aed4 	.word	0x0800aed4
 8000b7c:	08000f85 	.word	0x08000f85
 8000b80:	200002d4 	.word	0x200002d4

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b8e:	2228      	movs	r2, #40	@ 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 f943 	bl	8007e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fc26 	bl	800342c <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000be6:	f000 fa37 	bl	8001058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2102      	movs	r1, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fe92 	bl	8003930 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c12:	f000 fa21 	bl	8001058 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c16:	2302      	movs	r3, #2
 8000c18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 f84c 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c2e:	f000 fa13 	bl	8001058 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3750      	adds	r7, #80	@ 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c4e:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <MX_ADC1_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c66:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6c:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c78:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c7a:	f000 ff73 	bl	8001b64 <HAL_ADC_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c84:	f000 f9e8 	bl	8001058 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000c90:	2303      	movs	r3, #3
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_ADC1_Init+0x74>)
 8000c9a:	f001 fa27 	bl	80020ec <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ca4:	f000 f9d8 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200001fc 	.word	0x200001fc
 8000cb4:	40012400 	.word	0x40012400

08000cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cbe:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <MX_I2C1_Init+0x54>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cc4:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <MX_I2C1_Init+0x58>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <MX_I2C1_Init+0x50>)
 8000cf6:	f001 fe21 	bl	800293c <HAL_I2C_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d00:	f000 f9aa 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000022c 	.word	0x2000022c
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	00061a80 	.word	0x00061a80

08000d14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <MX_USART1_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f003 fb78 	bl	8004440 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f000 f97f 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000280 	.word	0x20000280
 8000d64:	40013800 	.word	0x40013800

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a29      	ldr	r2, [pc, #164]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de2:	4812      	ldr	r0, [pc, #72]	@ (8000e2c <MX_GPIO_Init+0xc4>)
 8000de4:	f001 fd91 	bl	800290a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480a      	ldr	r0, [pc, #40]	@ (8000e2c <MX_GPIO_Init+0xc4>)
 8000e02:	f001 fbe7 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin;
 8000e06:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_GPIO_Init+0xc8>)
 8000e1c:	f001 fbda 	bl	80025d4 <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <Menu_Display>:

/* USER CODE BEGIN 4 */


void Menu_Display(void)
{
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b08e      	sub	sp, #56	@ 0x38
 8000e38:	af00      	add	r7, sp, #0
	uint8_t menu_1[] = "\r\n1. Voltage monitor read\r\n";
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <Menu_Display+0x58>)
 8000e3c:	f107 041c 	add.w	r4, r7, #28
 8000e40:	461d      	mov	r5, r3
 8000e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t menu_2[] = "2. Re-display Menu\r\n\r\n";
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <Menu_Display+0x5c>)
 8000e50:	1d3c      	adds	r4, r7, #4
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e5c:	6020      	str	r0, [r4, #0]
 8000e5e:	3404      	adds	r4, #4
 8000e60:	8021      	strh	r1, [r4, #0]
 8000e62:	3402      	adds	r4, #2
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, menu_1, sizeof(menu_1), 10);
 8000e68:	f107 011c 	add.w	r1, r7, #28
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	221c      	movs	r2, #28
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <Menu_Display+0x60>)
 8000e72:	f003 fb32 	bl	80044da <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu_2, sizeof(menu_2), 10);
 8000e76:	1d39      	adds	r1, r7, #4
 8000e78:	230a      	movs	r3, #10
 8000e7a:	2217      	movs	r2, #23
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <Menu_Display+0x60>)
 8000e7e:	f003 fb2c 	bl	80044da <HAL_UART_Transmit>

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	@ 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	0800a034 	.word	0x0800a034
 8000e90:	0800a050 	.word	0x0800a050
 8000e94:	20000280 	.word	0x20000280

08000e98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f003 fe37 	bl	8004b14 <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <StartDefaultTask+0x8>

08000ea8 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 8000eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb4:	480f      	ldr	r0, [pc, #60]	@ (8000ef4 <pickButton+0x4c>)
 8000eb6:	f001 fd11 	bl	80028dc <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d106      	bne.n	8000ece <pickButton+0x26>
	  {
		  osDelay(300);	// debounce
 8000ec0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ec4:	f003 fe26 	bl	8004b14 <osDelay>
		  button1_pressed = 1;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <pickButton+0x50>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin) == GPIO_PIN_RESET)
 8000ece:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed2:	4808      	ldr	r0, [pc, #32]	@ (8000ef4 <pickButton+0x4c>)
 8000ed4:	f001 fd02 	bl	80028dc <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <pickButton+0x44>
	  {
		  osDelay(300);	// debounce
 8000ede:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ee2:	f003 fe17 	bl	8004b14 <osDelay>
		  button2_pressed = 1;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <pickButton+0x54>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
	  }

    osDelay(100);
 8000eec:	2064      	movs	r0, #100	@ 0x64
 8000eee:	f003 fe11 	bl	8004b14 <osDelay>
	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 8000ef2:	e7dd      	b.n	8000eb0 <pickButton+0x8>
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	20000314 	.word	0x20000314
 8000efc:	20000318 	.word	0x20000318

08000f00 <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void *argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
  for(;;)
  {

	  HAL_ADC_Start(&hadc1);
 8000f08:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <getADC+0x34>)
 8000f0a:	f000 ff03 	bl	8001d14 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000f0e:	210a      	movs	r1, #10
 8000f10:	4808      	ldr	r0, [pc, #32]	@ (8000f34 <getADC+0x34>)
 8000f12:	f000 ffd9 	bl	8001ec8 <HAL_ADC_PollForConversion>
	  x_val = (HAL_ADC_GetValue(&hadc1));
 8000f16:	4807      	ldr	r0, [pc, #28]	@ (8000f34 <getADC+0x34>)
 8000f18:	f001 f8dc 	bl	80020d4 <HAL_ADC_GetValue>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <getADC+0x38>)
 8000f20:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000f22:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <getADC+0x34>)
 8000f24:	f000 ffa4 	bl	8001e70 <HAL_ADC_Stop>

	  // process ADC values here


    osDelay(100);
 8000f28:	2064      	movs	r0, #100	@ 0x64
 8000f2a:	f003 fdf3 	bl	8004b14 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000f2e:	bf00      	nop
 8000f30:	e7ea      	b.n	8000f08 <getADC+0x8>
 8000f32:	bf00      	nop
 8000f34:	200001fc 	.word	0x200001fc
 8000f38:	200002d8 	.word	0x200002d8

08000f3c <dispOLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispOLED */
void dispOLED(void *argument)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispOLED */
	  SSD1306_Clear();
 8000f44:	f000 faaf 	bl	80014a6 <SSD1306_Clear>
	  SSD1306_UpdateScreen();
 8000f48:	f000 f950 	bl	80011ec <SSD1306_UpdateScreen>
  /* Infinite loop */
  for(;;)
  {

	  SSD1306_GotoXY (0,0);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f9f0 	bl	8001334 <SSD1306_GotoXY>
	  sprintf(buffer, "ADC=%d      ", x_val);
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <dispOLED+0x38>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <dispOLED+0x3c>)
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <dispOLED+0x40>)
 8000f5e:	f006 fefb 	bl	8007d58 <siprintf>
	  SSD1306_Puts (buffer, &Font_11x18, 1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	4906      	ldr	r1, [pc, #24]	@ (8000f80 <dispOLED+0x44>)
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <dispOLED+0x40>)
 8000f68:	f000 fa78 	bl	800145c <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000f6c:	f000 f93e 	bl	80011ec <SSD1306_UpdateScreen>
	  SSD1306_GotoXY (0,0);
 8000f70:	bf00      	nop
 8000f72:	e7eb      	b.n	8000f4c <dispOLED+0x10>
 8000f74:	200002d8 	.word	0x200002d8
 8000f78:	0800a068 	.word	0x0800a068
 8000f7c:	200002e0 	.word	0x200002e0
 8000f80:	20000000 	.word	0x20000000

08000f84 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN UARTmenu */
	  /* Infinite loop */

		Menu_Display();
 8000f8c:	f7ff ff52 	bl	8000e34 <Menu_Display>

	  for(;;)
	  {
		  // select user input
		  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 8000f90:	230a      	movs	r3, #10
 8000f92:	2201      	movs	r2, #1
 8000f94:	491e      	ldr	r1, [pc, #120]	@ (8001010 <dispUART+0x8c>)
 8000f96:	481f      	ldr	r0, [pc, #124]	@ (8001014 <dispUART+0x90>)
 8000f98:	f003 fb31 	bl	80045fe <HAL_UART_Receive>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d117      	bne.n	8000fd2 <dispUART+0x4e>
		  {
			switch (choice) {
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <dispUART+0x8c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b31      	cmp	r3, #49	@ 0x31
 8000fa8:	d002      	beq.n	8000fb0 <dispUART+0x2c>
 8000faa:	2b32      	cmp	r3, #50	@ 0x32
 8000fac:	d00e      	beq.n	8000fcc <dispUART+0x48>
					break;
				case '2':
					Menu_Display();
					break;
				default:
					break;
 8000fae:	e010      	b.n	8000fd2 <dispUART+0x4e>
					sprintf(buffer, "Voltage = %d\r\n",x_val);
 8000fb0:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <dispUART+0x94>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4919      	ldr	r1, [pc, #100]	@ (800101c <dispUART+0x98>)
 8000fb8:	4819      	ldr	r0, [pc, #100]	@ (8001020 <dispUART+0x9c>)
 8000fba:	f006 fecd 	bl	8007d58 <siprintf>
					HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	2232      	movs	r2, #50	@ 0x32
 8000fc2:	4917      	ldr	r1, [pc, #92]	@ (8001020 <dispUART+0x9c>)
 8000fc4:	4813      	ldr	r0, [pc, #76]	@ (8001014 <dispUART+0x90>)
 8000fc6:	f003 fa88 	bl	80044da <HAL_UART_Transmit>
					break;
 8000fca:	e002      	b.n	8000fd2 <dispUART+0x4e>
					Menu_Display();
 8000fcc:	f7ff ff32 	bl	8000e34 <Menu_Display>
					break;
 8000fd0:	bf00      	nop
			}
		  }else{

		  }

		  if(button1_pressed)
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <dispUART+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d008      	beq.n	8000fec <dispUART+0x68>
		  {
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 pressed\r\n", sizeof("Button1 pressed\r\n"), 10);
 8000fda:	230a      	movs	r3, #10
 8000fdc:	2212      	movs	r2, #18
 8000fde:	4912      	ldr	r1, [pc, #72]	@ (8001028 <dispUART+0xa4>)
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <dispUART+0x90>)
 8000fe2:	f003 fa7a 	bl	80044da <HAL_UART_Transmit>
			  button1_pressed = 0;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <dispUART+0xa0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
		  }

		  if(button2_pressed)
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <dispUART+0xa8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d008      	beq.n	8001006 <dispUART+0x82>
		  {
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button2 pressed\r\n", sizeof("Button2 pressed\r\n"), 10);
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	2212      	movs	r2, #18
 8000ff8:	490d      	ldr	r1, [pc, #52]	@ (8001030 <dispUART+0xac>)
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <dispUART+0x90>)
 8000ffc:	f003 fa6d 	bl	80044da <HAL_UART_Transmit>
			  button2_pressed = 0;
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <dispUART+0xa8>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
		  }


	    osDelay(100);
 8001006:	2064      	movs	r0, #100	@ 0x64
 8001008:	f003 fd84 	bl	8004b14 <osDelay>
		  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 800100c:	e7c0      	b.n	8000f90 <dispUART+0xc>
 800100e:	bf00      	nop
 8001010:	200002dc 	.word	0x200002dc
 8001014:	20000280 	.word	0x20000280
 8001018:	200002d8 	.word	0x200002d8
 800101c:	0800a078 	.word	0x0800a078
 8001020:	200002e0 	.word	0x200002e0
 8001024:	20000314 	.word	0x20000314
 8001028:	0800a088 	.word	0x0800a088
 800102c:	20000318 	.word	0x20000318
 8001030:	0800a09c 	.word	0x0800a09c

08001034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001046:	f000 fd4d 	bl	8001ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40000800 	.word	0x40000800

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800106a:	f000 fa25 	bl	80014b8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800106e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001072:	2201      	movs	r2, #1
 8001074:	2178      	movs	r1, #120	@ 0x78
 8001076:	485b      	ldr	r0, [pc, #364]	@ (80011e4 <SSD1306_Init+0x180>)
 8001078:	f001 fea2 	bl	8002dc0 <HAL_I2C_IsDeviceReady>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001082:	2300      	movs	r3, #0
 8001084:	e0a9      	b.n	80011da <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001086:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800108a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800108c:	e002      	b.n	8001094 <SSD1306_Init+0x30>
		p--;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3b01      	subs	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800109a:	22ae      	movs	r2, #174	@ 0xae
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	@ 0x78
 80010a0:	f000 fa84 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	@ 0x78
 80010aa:	f000 fa7f 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010ae:	2210      	movs	r2, #16
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	@ 0x78
 80010b4:	f000 fa7a 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010b8:	22b0      	movs	r2, #176	@ 0xb0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	@ 0x78
 80010be:	f000 fa75 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010c2:	22c8      	movs	r2, #200	@ 0xc8
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	@ 0x78
 80010c8:	f000 fa70 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	@ 0x78
 80010d2:	f000 fa6b 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010d6:	2210      	movs	r2, #16
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	@ 0x78
 80010dc:	f000 fa66 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010e0:	2240      	movs	r2, #64	@ 0x40
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	@ 0x78
 80010e6:	f000 fa61 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010ea:	2281      	movs	r2, #129	@ 0x81
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	@ 0x78
 80010f0:	f000 fa5c 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010f4:	22ff      	movs	r2, #255	@ 0xff
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	@ 0x78
 80010fa:	f000 fa57 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010fe:	22a1      	movs	r2, #161	@ 0xa1
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	@ 0x78
 8001104:	f000 fa52 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001108:	22a6      	movs	r2, #166	@ 0xa6
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	@ 0x78
 800110e:	f000 fa4d 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001112:	22a8      	movs	r2, #168	@ 0xa8
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	@ 0x78
 8001118:	f000 fa48 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800111c:	223f      	movs	r2, #63	@ 0x3f
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	@ 0x78
 8001122:	f000 fa43 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001126:	22a4      	movs	r2, #164	@ 0xa4
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	@ 0x78
 800112c:	f000 fa3e 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001130:	22d3      	movs	r2, #211	@ 0xd3
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	@ 0x78
 8001136:	f000 fa39 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	@ 0x78
 8001140:	f000 fa34 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001144:	22d5      	movs	r2, #213	@ 0xd5
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	@ 0x78
 800114a:	f000 fa2f 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800114e:	22f0      	movs	r2, #240	@ 0xf0
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	@ 0x78
 8001154:	f000 fa2a 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001158:	22d9      	movs	r2, #217	@ 0xd9
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	@ 0x78
 800115e:	f000 fa25 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001162:	2222      	movs	r2, #34	@ 0x22
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	@ 0x78
 8001168:	f000 fa20 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800116c:	22da      	movs	r2, #218	@ 0xda
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	@ 0x78
 8001172:	f000 fa1b 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001176:	2212      	movs	r2, #18
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	@ 0x78
 800117c:	f000 fa16 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001180:	22db      	movs	r2, #219	@ 0xdb
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	@ 0x78
 8001186:	f000 fa11 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800118a:	2220      	movs	r2, #32
 800118c:	2100      	movs	r1, #0
 800118e:	2078      	movs	r0, #120	@ 0x78
 8001190:	f000 fa0c 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001194:	228d      	movs	r2, #141	@ 0x8d
 8001196:	2100      	movs	r1, #0
 8001198:	2078      	movs	r0, #120	@ 0x78
 800119a:	f000 fa07 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800119e:	2214      	movs	r2, #20
 80011a0:	2100      	movs	r1, #0
 80011a2:	2078      	movs	r0, #120	@ 0x78
 80011a4:	f000 fa02 	bl	80015ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011a8:	22af      	movs	r2, #175	@ 0xaf
 80011aa:	2100      	movs	r1, #0
 80011ac:	2078      	movs	r0, #120	@ 0x78
 80011ae:	f000 f9fd 	bl	80015ac <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011b2:	222e      	movs	r2, #46	@ 0x2e
 80011b4:	2100      	movs	r1, #0
 80011b6:	2078      	movs	r0, #120	@ 0x78
 80011b8:	f000 f9f8 	bl	80015ac <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f843 	bl	8001248 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80011c2:	f000 f813 	bl	80011ec <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <SSD1306_Init+0x184>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <SSD1306_Init+0x184>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SSD1306_Init+0x184>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000022c 	.word	0x2000022c
 80011e8:	2000071c 	.word	0x2000071c

080011ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e01d      	b.n	8001234 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	3b50      	subs	r3, #80	@ 0x50
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	@ 0x78
 8001204:	f000 f9d2 	bl	80015ac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	2078      	movs	r0, #120	@ 0x78
 800120e:	f000 f9cd 	bl	80015ac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001212:	2210      	movs	r2, #16
 8001214:	2100      	movs	r1, #0
 8001216:	2078      	movs	r0, #120	@ 0x78
 8001218:	f000 f9c8 	bl	80015ac <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	01db      	lsls	r3, r3, #7
 8001220:	4a08      	ldr	r2, [pc, #32]	@ (8001244 <SSD1306_UpdateScreen+0x58>)
 8001222:	441a      	add	r2, r3
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	2140      	movs	r1, #64	@ 0x40
 8001228:	2078      	movs	r0, #120	@ 0x78
 800122a:	f000 f959 	bl	80014e0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	3301      	adds	r3, #1
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b07      	cmp	r3, #7
 8001238:	d9de      	bls.n	80011f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000031c 	.word	0x2000031c

08001248 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <SSD1306_Fill+0x14>
 8001258:	2300      	movs	r3, #0
 800125a:	e000      	b.n	800125e <SSD1306_Fill+0x16>
 800125c:	23ff      	movs	r3, #255	@ 0xff
 800125e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001262:	4619      	mov	r1, r3
 8001264:	4803      	ldr	r0, [pc, #12]	@ (8001274 <SSD1306_Fill+0x2c>)
 8001266:	f006 fdda 	bl	8007e1e <memset>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000031c 	.word	0x2000031c

08001278 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
 8001282:	460b      	mov	r3, r1
 8001284:	80bb      	strh	r3, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	70fb      	strb	r3, [r7, #3]
	if (
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	2b7f      	cmp	r3, #127	@ 0x7f
 800128e:	d848      	bhi.n	8001322 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	2b3f      	cmp	r3, #63	@ 0x3f
 8001294:	d845      	bhi.n	8001322 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001296:	4b25      	ldr	r3, [pc, #148]	@ (800132c <SSD1306_DrawPixel+0xb4>)
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d11a      	bne.n	80012e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	08db      	lsrs	r3, r3, #3
 80012b8:	b298      	uxth	r0, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	01db      	lsls	r3, r3, #7
 80012be:	4413      	add	r3, r2
 80012c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001330 <SSD1306_DrawPixel+0xb8>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	b25a      	sxtb	r2, r3
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b259      	sxtb	r1, r3
 80012d8:	88fa      	ldrh	r2, [r7, #6]
 80012da:	4603      	mov	r3, r0
 80012dc:	01db      	lsls	r3, r3, #7
 80012de:	4413      	add	r3, r2
 80012e0:	b2c9      	uxtb	r1, r1
 80012e2:	4a13      	ldr	r2, [pc, #76]	@ (8001330 <SSD1306_DrawPixel+0xb8>)
 80012e4:	54d1      	strb	r1, [r2, r3]
 80012e6:	e01d      	b.n	8001324 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	b298      	uxth	r0, r3
 80012f0:	4603      	mov	r3, r0
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	4413      	add	r3, r2
 80012f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001330 <SSD1306_DrawPixel+0xb8>)
 80012f8:	5cd3      	ldrb	r3, [r2, r3]
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	b25b      	sxtb	r3, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	b25b      	sxtb	r3, r3
 800130e:	4013      	ands	r3, r2
 8001310:	b259      	sxtb	r1, r3
 8001312:	88fa      	ldrh	r2, [r7, #6]
 8001314:	4603      	mov	r3, r0
 8001316:	01db      	lsls	r3, r3, #7
 8001318:	4413      	add	r3, r2
 800131a:	b2c9      	uxtb	r1, r1
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <SSD1306_DrawPixel+0xb8>)
 800131e:	54d1      	strb	r1, [r2, r3]
 8001320:	e000      	b.n	8001324 <SSD1306_DrawPixel+0xac>
		return;
 8001322:	bf00      	nop
	}
}
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	2000071c 	.word	0x2000071c
 8001330:	2000031c 	.word	0x2000031c

08001334 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	80fb      	strh	r3, [r7, #6]
 8001340:	4613      	mov	r3, r2
 8001342:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001344:	4a05      	ldr	r2, [pc, #20]	@ (800135c <SSD1306_GotoXY+0x28>)
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800134a:	4a04      	ldr	r2, [pc, #16]	@ (800135c <SSD1306_GotoXY+0x28>)
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	8053      	strh	r3, [r2, #2]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000071c 	.word	0x2000071c

08001360 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001370:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <SSD1306_Putc+0xf8>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
	if (
 800137c:	2b7f      	cmp	r3, #127	@ 0x7f
 800137e:	dc07      	bgt.n	8001390 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001380:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <SSD1306_Putc+0xf8>)
 8001382:	885b      	ldrh	r3, [r3, #2]
 8001384:	461a      	mov	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800138c:	2b3f      	cmp	r3, #63	@ 0x3f
 800138e:	dd01      	ble.n	8001394 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001390:	2300      	movs	r3, #0
 8001392:	e05d      	b.n	8001450 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	e04b      	b.n	8001432 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3b20      	subs	r3, #32
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	7849      	ldrb	r1, [r1, #1]
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	4619      	mov	r1, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	440b      	add	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	e030      	b.n	8001420 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d010      	beq.n	80013f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <SSD1306_Putc+0xf8>)
 80013d0:	881a      	ldrh	r2, [r3, #0]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b298      	uxth	r0, r3
 80013da:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <SSD1306_Putc+0xf8>)
 80013dc:	885a      	ldrh	r2, [r3, #2]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	79ba      	ldrb	r2, [r7, #6]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff ff45 	bl	8001278 <SSD1306_DrawPixel>
 80013ee:	e014      	b.n	800141a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <SSD1306_Putc+0xf8>)
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b298      	uxth	r0, r3
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <SSD1306_Putc+0xf8>)
 80013fe:	885a      	ldrh	r2, [r3, #2]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
 8001406:	b299      	uxth	r1, r3
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf0c      	ite	eq
 800140e:	2301      	moveq	r3, #1
 8001410:	2300      	movne	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	f7ff ff2f 	bl	8001278 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3301      	adds	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4293      	cmp	r3, r2
 800142a:	d3c8      	bcc.n	80013be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	785b      	ldrb	r3, [r3, #1]
 8001436:	461a      	mov	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4293      	cmp	r3, r2
 800143c:	d3ad      	bcc.n	800139a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SSD1306_Putc+0xf8>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	4413      	add	r3, r2
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <SSD1306_Putc+0xf8>)
 800144c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800144e:	79fb      	ldrb	r3, [r7, #7]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000071c 	.word	0x2000071c

0800145c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	4613      	mov	r3, r2
 8001468:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800146a:	e012      	b.n	8001492 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	68b9      	ldr	r1, [r7, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff73 	bl	8001360 <SSD1306_Putc>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d002      	beq.n	800148c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	e008      	b.n	800149e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3301      	adds	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e8      	bne.n	800146c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	781b      	ldrb	r3, [r3, #0]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fecc 	bl	8001248 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014b0:	f7ff fe9c 	bl	80011ec <SSD1306_UpdateScreen>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <ssd1306_I2C_Init+0x24>)
 80014c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c2:	e002      	b.n	80014ca <ssd1306_I2C_Init+0x12>
		p--;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f9      	bne.n	80014c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	0003d090 	.word	0x0003d090

080014e0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b0c7      	sub	sp, #284	@ 0x11c
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	4604      	mov	r4, r0
 80014e8:	4608      	mov	r0, r1
 80014ea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80014ee:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80014f2:	600a      	str	r2, [r1, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014fa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80014fe:	4622      	mov	r2, r4
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001506:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800150a:	4602      	mov	r2, r0
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001512:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001516:	460a      	mov	r2, r1
 8001518:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800151a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800151e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001522:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001526:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001534:	e015      	b.n	8001562 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001536:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800153a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800153e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	441a      	add	r2, r3
 8001546:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800154a:	3301      	adds	r3, #1
 800154c:	7811      	ldrb	r1, [r2, #0]
 800154e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001552:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001556:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001558:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800155c:	3301      	adds	r3, #1
 800155e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001562:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001566:	b29b      	uxth	r3, r3
 8001568:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800156c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001570:	8812      	ldrh	r2, [r2, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d8df      	bhi.n	8001536 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800157a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b299      	uxth	r1, r3
 8001582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001586:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	f107 020c 	add.w	r2, r7, #12
 8001594:	200a      	movs	r0, #10
 8001596:	9000      	str	r0, [sp, #0]
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <ssd1306_I2C_WriteMulti+0xc8>)
 800159a:	f001 fb13 	bl	8002bc4 <HAL_I2C_Master_Transmit>
}
 800159e:	bf00      	nop
 80015a0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	2000022c 	.word	0x2000022c

080015ac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	460b      	mov	r3, r1
 80015b8:	71bb      	strb	r3, [r7, #6]
 80015ba:	4613      	mov	r3, r2
 80015bc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015c2:	797b      	ldrb	r3, [r7, #5]
 80015c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	b299      	uxth	r1, r3
 80015ca:	f107 020c 	add.w	r2, r7, #12
 80015ce:	230a      	movs	r3, #10
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2302      	movs	r3, #2
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <ssd1306_I2C_Write+0x38>)
 80015d6:	f001 faf5 	bl	8002bc4 <HAL_I2C_Master_Transmit>
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000022c 	.word	0x2000022c

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_MspInit+0x68>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <HAL_MspInit+0x68>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_MspInit+0x68>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_MspInit+0x68>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <HAL_MspInit+0x68>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_MspInit+0x68>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	210f      	movs	r1, #15
 8001622:	f06f 0001 	mvn.w	r0, #1
 8001626:	f000 ffaa 	bl	800257e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_MspInit+0x6c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_MspInit+0x6c>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000

08001658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <HAL_ADC_MspInit+0x6c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d121      	bne.n	80016bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_ADC_MspInit+0x70>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <HAL_ADC_MspInit+0x70>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_ADC_MspInit+0x70>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_ADC_MspInit+0x70>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <HAL_ADC_MspInit+0x70>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_ADC_MspInit+0x70>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a8:	2301      	movs	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	2303      	movs	r3, #3
 80016ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <HAL_ADC_MspInit+0x74>)
 80016b8:	f000 ff8c 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40012400 	.word	0x40012400
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a15      	ldr	r2, [pc, #84]	@ (8001740 <HAL_I2C_MspInit+0x70>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d123      	bne.n	8001738 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001708:	23c0      	movs	r3, #192	@ 0xc0
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480b      	ldr	r0, [pc, #44]	@ (8001748 <HAL_I2C_MspInit+0x78>)
 800171c:	f000 ff5a 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 8001726:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800172a:	61d3      	str	r3, [r2, #28]
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_I2C_MspInit+0x74>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40005400 	.word	0x40005400
 8001744:	40021000 	.word	0x40021000
 8001748:	40010c00 	.word	0x40010c00

0800174c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1c      	ldr	r2, [pc, #112]	@ (80017d8 <HAL_UART_MspInit+0x8c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d131      	bne.n	80017d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <HAL_UART_MspInit+0x90>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a1a      	ldr	r2, [pc, #104]	@ (80017dc <HAL_UART_MspInit+0x90>)
 8001772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <HAL_UART_MspInit+0x90>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_UART_MspInit+0x90>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <HAL_UART_MspInit+0x90>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_UART_MspInit+0x90>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800179c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	4619      	mov	r1, r3
 80017b0:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <HAL_UART_MspInit+0x94>)
 80017b2:	f000 ff0f 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <HAL_UART_MspInit+0x94>)
 80017cc:	f000 ff02 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010800 	.word	0x40010800

080017e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	@ 0x30
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	201e      	movs	r0, #30
 80017fa:	f000 fec0 	bl	800257e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017fe:	201e      	movs	r0, #30
 8001800:	f000 fed9 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <HAL_InitTick+0xa0>)
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	4a1e      	ldr	r2, [pc, #120]	@ (8001884 <HAL_InitTick+0xa0>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	61d3      	str	r3, [r2, #28]
 8001810:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <HAL_InitTick+0xa0>)
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800181c:	f107 0210 	add.w	r2, r7, #16
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f002 f9fc 	bl	8003c24 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800182c:	f002 f9d2 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8001830:	4603      	mov	r3, r0
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001838:	4a13      	ldr	r2, [pc, #76]	@ (8001888 <HAL_InitTick+0xa4>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9b      	lsrs	r3, r3, #18
 8001840:	3b01      	subs	r3, #1
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_InitTick+0xa8>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <HAL_InitTick+0xac>)
 8001848:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_InitTick+0xa8>)
 800184c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001850:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001852:	4a0e      	ldr	r2, [pc, #56]	@ (800188c <HAL_InitTick+0xa8>)
 8001854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001856:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_InitTick+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_InitTick+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001864:	4809      	ldr	r0, [pc, #36]	@ (800188c <HAL_InitTick+0xa8>)
 8001866:	f002 fba1 	bl	8003fac <HAL_TIM_Base_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d104      	bne.n	800187a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001870:	4806      	ldr	r0, [pc, #24]	@ (800188c <HAL_InitTick+0xa8>)
 8001872:	f002 fbf3 	bl	800405c <HAL_TIM_Base_Start_IT>
 8001876:	4603      	mov	r3, r0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3730      	adds	r7, #48	@ 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	431bde83 	.word	0x431bde83
 800188c:	20000724 	.word	0x20000724
 8001890:	40000800 	.word	0x40000800

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <NMI_Handler+0x4>

0800189c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <MemManage_Handler+0x4>

080018ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <UsageFault_Handler+0x4>

080018bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <TIM4_IRQHandler+0x10>)
 80018ce:	f002 fc17 	bl	8004100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000724 	.word	0x20000724

080018dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <_kill>:

int _kill(int pid, int sig)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018f4:	f006 fae6 	bl	8007ec4 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2216      	movs	r2, #22
 80018fc:	601a      	str	r2, [r3, #0]
	return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_exit>:

void _exit (int status)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001912:	f04f 31ff 	mov.w	r1, #4294967295
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffe7 	bl	80018ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <_exit+0x12>

08001920 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e00a      	b.n	8001948 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001932:	f3af 8000 	nop.w
 8001936:	4601      	mov	r1, r0
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	60ba      	str	r2, [r7, #8]
 800193e:	b2ca      	uxtb	r2, r1
 8001940:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	dbf0      	blt.n	8001932 <_read+0x12>
	}

return len;
 8001950:	687b      	ldr	r3, [r7, #4]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e009      	b.n	8001980 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	60ba      	str	r2, [r7, #8]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf1      	blt.n	800196c <_write+0x12>
	}
	return len;
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_close>:

int _close(int file)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	return -1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b8:	605a      	str	r2, [r3, #4]
	return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
	return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
	...

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f006 fa4e 	bl	8007ec4 <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20005000 	.word	0x20005000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	2000076c 	.word	0x2000076c
 8001a5c:	20002418 	.word	0x20002418

08001a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a6c:	480c      	ldr	r0, [pc, #48]	@ (8001aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a6e:	490d      	ldr	r1, [pc, #52]	@ (8001aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a84:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a92:	f7ff ffe5 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f006 fa1b 	bl	8007ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9a:	f7fe fff5 	bl	8000a88 <main>
  bx lr
 8001a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001aa8:	0800b290 	.word	0x0800b290
  ldr r2, =_sbss
 8001aac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ab0:	20002418 	.word	0x20002418

08001ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_2_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <HAL_Init+0x28>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <HAL_Init+0x28>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 fd4d 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fe88 	bl	80017e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fd88 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_IncTick+0x1c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_IncTick+0x20>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a03      	ldr	r2, [pc, #12]	@ (8001b04 <HAL_IncTick+0x20>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	20000010 	.word	0x20000010
 8001b04:	20000770 	.word	0x20000770

08001b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	@ (8001b18 <HAL_GetTick+0x10>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000770 	.word	0x20000770

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffe0 	bl	8001b08 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000010 	.word	0x20000010

08001b64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0be      	b.n	8001d04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fd58 	bl	8001658 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fbf1 	bl	8002390 <ADC_ConversionStop_Disable>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 8099 	bne.w	8001cf2 <HAL_ADC_Init+0x18e>
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 8095 	bne.w	8001cf2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bd0:	f023 0302 	bic.w	r3, r3, #2
 8001bd4:	f043 0202 	orr.w	r2, r3, #2
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001be4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7b1b      	ldrb	r3, [r3, #12]
 8001bea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bfc:	d003      	beq.n	8001c06 <HAL_ADC_Init+0xa2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_Init+0xa8>
 8001c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c0a:	e000      	b.n	8001c0e <HAL_ADC_Init+0xaa>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7d1b      	ldrb	r3, [r3, #20]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d119      	bne.n	8001c50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7b1b      	ldrb	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	035a      	lsls	r2, r3, #13
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e00b      	b.n	8001c50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <HAL_ADC_Init+0x1a8>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c80:	d003      	beq.n	8001c8a <HAL_ADC_Init+0x126>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_ADC_Init+0x1ac>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cce:	e018      	b.n	8001d02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	f023 0312 	bic.w	r3, r3, #18
 8001cd8:	f043 0210 	orr.w	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cf0:	e007      	b.n	8001d02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	f043 0210 	orr.w	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	ffe1f7fd 	.word	0xffe1f7fd
 8001d10:	ff1f0efe 	.word	0xff1f0efe

08001d14 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start+0x1a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e098      	b.n	8001e60 <HAL_ADC_Start+0x14c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fad0 	bl	80022dc <ADC_Enable>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8087 	bne.w	8001e56 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a41      	ldr	r2, [pc, #260]	@ (8001e68 <HAL_ADC_Start+0x154>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_Start+0x5e>
 8001d66:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_ADC_Start+0x158>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d115      	bne.n	8001d9e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d026      	beq.n	8001dda <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d9c:	e01d      	b.n	8001dda <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2f      	ldr	r2, [pc, #188]	@ (8001e6c <HAL_ADC_Start+0x158>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d004      	beq.n	8001dbe <HAL_ADC_Start+0xaa>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e68 <HAL_ADC_Start+0x154>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10d      	bne.n	8001dda <HAL_ADC_Start+0xc6>
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <HAL_ADC_Start+0x158>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	f023 0206 	bic.w	r2, r3, #6
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001df2:	e002      	b.n	8001dfa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0202 	mvn.w	r2, #2
 8001e0a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e16:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e1a:	d113      	bne.n	8001e44 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e20:	4a11      	ldr	r2, [pc, #68]	@ (8001e68 <HAL_ADC_Start+0x154>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d105      	bne.n	8001e32 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_ADC_Start+0x158>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d108      	bne.n	8001e44 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	e00c      	b.n	8001e5e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e003      	b.n	8001e5e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40012800 	.word	0x40012800
 8001e6c:	40012400 	.word	0x40012400

08001e70 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Stop+0x1a>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e01a      	b.n	8001ec0 <HAL_ADC_Stop+0x50>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fa7c 	bl	8002390 <ADC_ConversionStop_Disable>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ede:	f7ff fe13 	bl	8001b08 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0d3      	b.n	80020b2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d131      	bne.n	8001f7c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d12a      	bne.n	8001f7c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f26:	e021      	b.n	8001f6c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d01d      	beq.n	8001f6c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_ADC_PollForConversion+0x7e>
 8001f36:	f7ff fde7 	bl	8001b08 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d212      	bcs.n	8001f6c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	f043 0204 	orr.w	r2, r3, #4
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0a2      	b.n	80020b2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0d6      	beq.n	8001f28 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f7a:	e070      	b.n	800205e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80020bc <HAL_ADC_PollForConversion+0x1f4>)
 8001f7e:	681c      	ldr	r4, [r3, #0]
 8001f80:	2002      	movs	r0, #2
 8001f82:	f001 ff53 	bl	8003e2c <HAL_RCCEx_GetPeriphCLKFreq>
 8001f86:	4603      	mov	r3, r0
 8001f88:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6919      	ldr	r1, [r3, #16]
 8001f92:	4b4b      	ldr	r3, [pc, #300]	@ (80020c0 <HAL_ADC_PollForConversion+0x1f8>)
 8001f94:	400b      	ands	r3, r1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_ADC_PollForConversion+0x104>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68d9      	ldr	r1, [r3, #12]
 8001fa0:	4b48      	ldr	r3, [pc, #288]	@ (80020c4 <HAL_ADC_PollForConversion+0x1fc>)
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d111      	bne.n	8001fcc <HAL_ADC_PollForConversion+0x104>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_ADC_PollForConversion+0x200>)
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d108      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0x100>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68d9      	ldr	r1, [r3, #12]
 8001fbc:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <HAL_ADC_PollForConversion+0x204>)
 8001fbe:	400b      	ands	r3, r1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0x100>
 8001fc4:	2314      	movs	r3, #20
 8001fc6:	e020      	b.n	800200a <HAL_ADC_PollForConversion+0x142>
 8001fc8:	2329      	movs	r3, #41	@ 0x29
 8001fca:	e01e      	b.n	800200a <HAL_ADC_PollForConversion+0x142>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_ADC_PollForConversion+0x200>)
 8001fd4:	400b      	ands	r3, r1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_ADC_PollForConversion+0x120>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68d9      	ldr	r1, [r3, #12]
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80020cc <HAL_ADC_PollForConversion+0x204>)
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_ADC_PollForConversion+0x13c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <HAL_ADC_PollForConversion+0x208>)
 8001ff0:	400b      	ands	r3, r1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_ADC_PollForConversion+0x140>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68d9      	ldr	r1, [r3, #12]
 8001ffc:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <HAL_ADC_PollForConversion+0x208>)
 8001ffe:	400b      	ands	r3, r1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_PollForConversion+0x140>
 8002004:	2354      	movs	r3, #84	@ 0x54
 8002006:	e000      	b.n	800200a <HAL_ADC_PollForConversion+0x142>
 8002008:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002010:	e021      	b.n	8002056 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d01a      	beq.n	8002050 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <HAL_ADC_PollForConversion+0x168>
 8002020:	f7ff fd72 	bl	8001b08 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d20f      	bcs.n	8002050 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d90b      	bls.n	8002050 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e030      	b.n	80020b2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	429a      	cmp	r2, r3
 800205c:	d8d9      	bhi.n	8002012 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0212 	mvn.w	r2, #18
 8002066:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800207e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002082:	d115      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002088:	2b00      	cmp	r3, #0
 800208a:	d111      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008
 80020c0:	24924924 	.word	0x24924924
 80020c4:	00924924 	.word	0x00924924
 80020c8:	12492492 	.word	0x12492492
 80020cc:	00492492 	.word	0x00492492
 80020d0:	00249249 	.word	0x00249249

080020d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x20>
 8002108:	2302      	movs	r3, #2
 800210a:	e0dc      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x1da>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b06      	cmp	r3, #6
 800211a:	d81c      	bhi.n	8002156 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3b05      	subs	r3, #5
 800212e:	221f      	movs	r2, #31
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	4019      	ands	r1, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b05      	subs	r3, #5
 8002148:	fa00 f203 	lsl.w	r2, r0, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34
 8002154:	e03c      	b.n	80021d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d81c      	bhi.n	8002198 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b23      	subs	r3, #35	@ 0x23
 8002170:	221f      	movs	r2, #31
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	4019      	ands	r1, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3b23      	subs	r3, #35	@ 0x23
 800218a:	fa00 f203 	lsl.w	r2, r0, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30
 8002196:	e01b      	b.n	80021d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b41      	subs	r3, #65	@ 0x41
 80021aa:	221f      	movs	r2, #31
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4019      	ands	r1, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	3b41      	subs	r3, #65	@ 0x41
 80021c4:	fa00 f203 	lsl.w	r2, r0, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d91c      	bls.n	8002212 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68d9      	ldr	r1, [r3, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	3b1e      	subs	r3, #30
 80021ea:	2207      	movs	r2, #7
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4019      	ands	r1, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6898      	ldr	r0, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	3b1e      	subs	r3, #30
 8002204:	fa00 f203 	lsl.w	r2, r0, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	e019      	b.n	8002246 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6919      	ldr	r1, [r3, #16]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	2207      	movs	r2, #7
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	4019      	ands	r1, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6898      	ldr	r0, [r3, #8]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	fa00 f203 	lsl.w	r2, r0, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b10      	cmp	r3, #16
 800224c:	d003      	beq.n	8002256 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002252:	2b11      	cmp	r3, #17
 8002254:	d132      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1d      	ldr	r2, [pc, #116]	@ (80022d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d125      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d126      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800227c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b10      	cmp	r3, #16
 8002284:	d11a      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002286:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	0c9a      	lsrs	r2, r3, #18
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800229c:	e002      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <HAL_ADC_ConfigChannel+0x1b2>
 80022aa:	e007      	b.n	80022bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	f043 0220 	orr.w	r2, r3, #32
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40012400 	.word	0x40012400
 80022d4:	20000008 	.word	0x20000008
 80022d8:	431bde83 	.word	0x431bde83

080022dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d040      	beq.n	800237c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800230a:	4b1f      	ldr	r3, [pc, #124]	@ (8002388 <ADC_Enable+0xac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1f      	ldr	r2, [pc, #124]	@ (800238c <ADC_Enable+0xb0>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	0c9b      	lsrs	r3, r3, #18
 8002316:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002318:	e002      	b.n	8002320 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002326:	f7ff fbef 	bl	8001b08 <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800232c:	e01f      	b.n	800236e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800232e:	f7ff fbeb 	bl	8001b08 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d918      	bls.n	800236e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d011      	beq.n	800236e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e007      	b.n	800237e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d1d8      	bne.n	800232e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008
 800238c:	431bde83 	.word	0x431bde83

08002390 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d12e      	bne.n	8002408 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ba:	f7ff fba5 	bl	8001b08 <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023c0:	e01b      	b.n	80023fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023c2:	f7ff fba1 	bl	8001b08 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d914      	bls.n	80023fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10d      	bne.n	80023fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e007      	b.n	800240a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d0dc      	beq.n	80023c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002430:	4013      	ands	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800243c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002460:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <__NVIC_GetPriorityGrouping+0x18>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	f003 0307 	and.w	r3, r3, #7
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	2b00      	cmp	r3, #0
 8002488:	db0b      	blt.n	80024a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	4906      	ldr	r1, [pc, #24]	@ (80024ac <__NVIC_EnableIRQ+0x34>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2001      	movs	r0, #1
 800249a:	fa00 f202 	lsl.w	r2, r0, r2
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff4f 	bl	8002414 <__NVIC_SetPriorityGrouping>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002590:	f7ff ff64 	bl	800245c <__NVIC_GetPriorityGrouping>
 8002594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7ff ffb2 	bl	8002504 <NVIC_EncodePriority>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff81 	bl	80024b0 <__NVIC_SetPriority>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff57 	bl	8002478 <__NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b08b      	sub	sp, #44	@ 0x2c
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e6:	e169      	b.n	80028bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025e8:	2201      	movs	r2, #1
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	429a      	cmp	r2, r3
 8002602:	f040 8158 	bne.w	80028b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a9a      	ldr	r2, [pc, #616]	@ (8002874 <HAL_GPIO_Init+0x2a0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d05e      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 8002610:	4a98      	ldr	r2, [pc, #608]	@ (8002874 <HAL_GPIO_Init+0x2a0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d875      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 8002616:	4a98      	ldr	r2, [pc, #608]	@ (8002878 <HAL_GPIO_Init+0x2a4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d058      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 800261c:	4a96      	ldr	r2, [pc, #600]	@ (8002878 <HAL_GPIO_Init+0x2a4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d86f      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 8002622:	4a96      	ldr	r2, [pc, #600]	@ (800287c <HAL_GPIO_Init+0x2a8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d052      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 8002628:	4a94      	ldr	r2, [pc, #592]	@ (800287c <HAL_GPIO_Init+0x2a8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d869      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 800262e:	4a94      	ldr	r2, [pc, #592]	@ (8002880 <HAL_GPIO_Init+0x2ac>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d04c      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 8002634:	4a92      	ldr	r2, [pc, #584]	@ (8002880 <HAL_GPIO_Init+0x2ac>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d863      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 800263a:	4a92      	ldr	r2, [pc, #584]	@ (8002884 <HAL_GPIO_Init+0x2b0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d046      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
 8002640:	4a90      	ldr	r2, [pc, #576]	@ (8002884 <HAL_GPIO_Init+0x2b0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d85d      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 8002646:	2b12      	cmp	r3, #18
 8002648:	d82a      	bhi.n	80026a0 <HAL_GPIO_Init+0xcc>
 800264a:	2b12      	cmp	r3, #18
 800264c:	d859      	bhi.n	8002702 <HAL_GPIO_Init+0x12e>
 800264e:	a201      	add	r2, pc, #4	@ (adr r2, 8002654 <HAL_GPIO_Init+0x80>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	080026cf 	.word	0x080026cf
 8002658:	080026a9 	.word	0x080026a9
 800265c:	080026bb 	.word	0x080026bb
 8002660:	080026fd 	.word	0x080026fd
 8002664:	08002703 	.word	0x08002703
 8002668:	08002703 	.word	0x08002703
 800266c:	08002703 	.word	0x08002703
 8002670:	08002703 	.word	0x08002703
 8002674:	08002703 	.word	0x08002703
 8002678:	08002703 	.word	0x08002703
 800267c:	08002703 	.word	0x08002703
 8002680:	08002703 	.word	0x08002703
 8002684:	08002703 	.word	0x08002703
 8002688:	08002703 	.word	0x08002703
 800268c:	08002703 	.word	0x08002703
 8002690:	08002703 	.word	0x08002703
 8002694:	08002703 	.word	0x08002703
 8002698:	080026b1 	.word	0x080026b1
 800269c:	080026c5 	.word	0x080026c5
 80026a0:	4a79      	ldr	r2, [pc, #484]	@ (8002888 <HAL_GPIO_Init+0x2b4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026a6:	e02c      	b.n	8002702 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	623b      	str	r3, [r7, #32]
          break;
 80026ae:	e029      	b.n	8002704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	3304      	adds	r3, #4
 80026b6:	623b      	str	r3, [r7, #32]
          break;
 80026b8:	e024      	b.n	8002704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	3308      	adds	r3, #8
 80026c0:	623b      	str	r3, [r7, #32]
          break;
 80026c2:	e01f      	b.n	8002704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	330c      	adds	r3, #12
 80026ca:	623b      	str	r3, [r7, #32]
          break;
 80026cc:	e01a      	b.n	8002704 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026d6:	2304      	movs	r3, #4
 80026d8:	623b      	str	r3, [r7, #32]
          break;
 80026da:	e013      	b.n	8002704 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e4:	2308      	movs	r3, #8
 80026e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	611a      	str	r2, [r3, #16]
          break;
 80026ee:	e009      	b.n	8002704 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f0:	2308      	movs	r3, #8
 80026f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	615a      	str	r2, [r3, #20]
          break;
 80026fa:	e003      	b.n	8002704 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
          break;
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x130>
          break;
 8002702:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2bff      	cmp	r3, #255	@ 0xff
 8002708:	d801      	bhi.n	800270e <HAL_GPIO_Init+0x13a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	e001      	b.n	8002712 <HAL_GPIO_Init+0x13e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2bff      	cmp	r3, #255	@ 0xff
 8002718:	d802      	bhi.n	8002720 <HAL_GPIO_Init+0x14c>
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	e002      	b.n	8002726 <HAL_GPIO_Init+0x152>
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	3b08      	subs	r3, #8
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	210f      	movs	r1, #15
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	6a39      	ldr	r1, [r7, #32]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80b1 	beq.w	80028b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002754:	4b4d      	ldr	r3, [pc, #308]	@ (800288c <HAL_GPIO_Init+0x2b8>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a4c      	ldr	r2, [pc, #304]	@ (800288c <HAL_GPIO_Init+0x2b8>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b4a      	ldr	r3, [pc, #296]	@ (800288c <HAL_GPIO_Init+0x2b8>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800276c:	4a48      	ldr	r2, [pc, #288]	@ (8002890 <HAL_GPIO_Init+0x2bc>)
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002778:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	220f      	movs	r2, #15
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a40      	ldr	r2, [pc, #256]	@ (8002894 <HAL_GPIO_Init+0x2c0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d013      	beq.n	80027c0 <HAL_GPIO_Init+0x1ec>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3f      	ldr	r2, [pc, #252]	@ (8002898 <HAL_GPIO_Init+0x2c4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00d      	beq.n	80027bc <HAL_GPIO_Init+0x1e8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3e      	ldr	r2, [pc, #248]	@ (800289c <HAL_GPIO_Init+0x2c8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <HAL_GPIO_Init+0x1e4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3d      	ldr	r2, [pc, #244]	@ (80028a0 <HAL_GPIO_Init+0x2cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_GPIO_Init+0x1e0>
 80027b0:	2303      	movs	r3, #3
 80027b2:	e006      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e004      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e002      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027c0:	2300      	movs	r3, #0
 80027c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c4:	f002 0203 	and.w	r2, r2, #3
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	4093      	lsls	r3, r2
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027d2:	492f      	ldr	r1, [pc, #188]	@ (8002890 <HAL_GPIO_Init+0x2bc>)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027ec:	4b2d      	ldr	r3, [pc, #180]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	492c      	ldr	r1, [pc, #176]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027fa:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	43db      	mvns	r3, r3
 8002802:	4928      	ldr	r1, [pc, #160]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002804:	4013      	ands	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d006      	beq.n	8002822 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002814:	4b23      	ldr	r3, [pc, #140]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4922      	ldr	r1, [pc, #136]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002822:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	43db      	mvns	r3, r3
 800282a:	491e      	ldr	r1, [pc, #120]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 800282c:	4013      	ands	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800283c:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4918      	ldr	r1, [pc, #96]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800284a:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	43db      	mvns	r3, r3
 8002852:	4914      	ldr	r1, [pc, #80]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002854:	4013      	ands	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d021      	beq.n	80028a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002864:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	490e      	ldr	r1, [pc, #56]	@ (80028a4 <HAL_GPIO_Init+0x2d0>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
 8002870:	e021      	b.n	80028b6 <HAL_GPIO_Init+0x2e2>
 8002872:	bf00      	nop
 8002874:	10320000 	.word	0x10320000
 8002878:	10310000 	.word	0x10310000
 800287c:	10220000 	.word	0x10220000
 8002880:	10210000 	.word	0x10210000
 8002884:	10120000 	.word	0x10120000
 8002888:	10110000 	.word	0x10110000
 800288c:	40021000 	.word	0x40021000
 8002890:	40010000 	.word	0x40010000
 8002894:	40010800 	.word	0x40010800
 8002898:	40010c00 	.word	0x40010c00
 800289c:	40011000 	.word	0x40011000
 80028a0:	40011400 	.word	0x40011400
 80028a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_GPIO_Init+0x304>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	4909      	ldr	r1, [pc, #36]	@ (80028d8 <HAL_GPIO_Init+0x304>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	3301      	adds	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f47f ae8e 	bne.w	80025e8 <HAL_GPIO_Init+0x14>
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	372c      	adds	r7, #44	@ 0x2c
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40010400 	.word	0x40010400

080028dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	e001      	b.n	80028fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	807b      	strh	r3, [r7, #2]
 8002916:	4613      	mov	r3, r2
 8002918:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800291a:	787b      	ldrb	r3, [r7, #1]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002920:	887a      	ldrh	r2, [r7, #2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002926:	e003      	b.n	8002930 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	041a      	lsls	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	611a      	str	r2, [r3, #16]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
	...

0800293c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e12b      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe feb4 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	@ 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800299e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a0:	f001 f918 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 80029a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a81      	ldr	r2, [pc, #516]	@ (8002bb0 <HAL_I2C_Init+0x274>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d807      	bhi.n	80029c0 <HAL_I2C_Init+0x84>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a80      	ldr	r2, [pc, #512]	@ (8002bb4 <HAL_I2C_Init+0x278>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e006      	b.n	80029ce <HAL_I2C_Init+0x92>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a7d      	ldr	r2, [pc, #500]	@ (8002bb8 <HAL_I2C_Init+0x27c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bf94      	ite	ls
 80029c8:	2301      	movls	r3, #1
 80029ca:	2300      	movhi	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0e7      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a78      	ldr	r2, [pc, #480]	@ (8002bbc <HAL_I2C_Init+0x280>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0c9b      	lsrs	r3, r3, #18
 80029e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a6a      	ldr	r2, [pc, #424]	@ (8002bb0 <HAL_I2C_Init+0x274>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d802      	bhi.n	8002a10 <HAL_I2C_Init+0xd4>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	e009      	b.n	8002a24 <HAL_I2C_Init+0xe8>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a69      	ldr	r2, [pc, #420]	@ (8002bc0 <HAL_I2C_Init+0x284>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	3301      	adds	r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	495c      	ldr	r1, [pc, #368]	@ (8002bb0 <HAL_I2C_Init+0x274>)
 8002a40:	428b      	cmp	r3, r1
 8002a42:	d819      	bhi.n	8002a78 <HAL_I2C_Init+0x13c>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e59      	subs	r1, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a58:	400b      	ands	r3, r1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_I2C_Init+0x138>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e59      	subs	r1, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	e051      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e04f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <HAL_I2C_Init+0x168>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e012      	b.n	8002aca <HAL_I2C_Init+0x18e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Init+0x196>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e022      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <HAL_I2C_Init+0x1bc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e58      	subs	r0, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	440b      	add	r3, r1
 8002ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002af6:	e00f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	6809      	ldr	r1, [r1, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6911      	ldr	r1, [r2, #16]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	000186a0 	.word	0x000186a0
 8002bb4:	001e847f 	.word	0x001e847f
 8002bb8:	003d08ff 	.word	0x003d08ff
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	10624dd3 	.word	0x10624dd3

08002bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	817b      	strh	r3, [r7, #10]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7fe ff96 	bl	8001b08 <HAL_GetTick>
 8002bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	f040 80e0 	bne.w	8002dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2319      	movs	r3, #25
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4970      	ldr	r1, [pc, #448]	@ (8002db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fa92 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0d3      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x50>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e0cc      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d007      	beq.n	8002c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2221      	movs	r2, #33	@ 0x21
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2210      	movs	r2, #16
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	893a      	ldrh	r2, [r7, #8]
 8002c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a50      	ldr	r2, [pc, #320]	@ (8002dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8002c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6a3a      	ldr	r2, [r7, #32]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f9ca 	bl	800301c <I2C_MasterRequestWrite>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e08d      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ca8:	e066      	b.n	8002d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	6a39      	ldr	r1, [r7, #32]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fb0c 	bl	80032cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d107      	bne.n	8002cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06b      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d11b      	bne.n	8002d4c <HAL_I2C_Master_Transmit+0x188>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d017      	beq.n	8002d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	6a39      	ldr	r1, [r7, #32]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fafc 	bl	800334e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d107      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e01a      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d194      	bne.n	8002caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	00100002 	.word	0x00100002
 8002dbc:	ffff0000 	.word	0xffff0000

08002dc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	@ 0x28
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7fe fe9a 	bl	8001b08 <HAL_GetTick>
 8002dd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	f040 8111 	bne.w	800300a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2319      	movs	r3, #25
 8002dee:	2201      	movs	r2, #1
 8002df0:	4988      	ldr	r1, [pc, #544]	@ (8003014 <HAL_I2C_IsDeviceReady+0x254>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f994 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e104      	b.n	800300c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_I2C_IsDeviceReady+0x50>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e0fd      	b.n	800300c <HAL_I2C_IsDeviceReady+0x24c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d007      	beq.n	8002e36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2224      	movs	r2, #36	@ 0x24
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a70      	ldr	r2, [pc, #448]	@ (8003018 <HAL_I2C_IsDeviceReady+0x258>)
 8002e58:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f952 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e90:	d103      	bne.n	8002e9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0b6      	b.n	800300c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002eac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fe2b 	bl	8001b08 <HAL_GetTick>
 8002eb2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ee2:	e025      	b.n	8002f30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ee4:	f7fe fe10 	bl	8001b08 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <HAL_I2C_IsDeviceReady+0x13a>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	22a0      	movs	r2, #160	@ 0xa0
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f3a:	d005      	beq.n	8002f48 <HAL_I2C_IsDeviceReady+0x188>
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <HAL_I2C_IsDeviceReady+0x188>
 8002f42:	7dbb      	ldrb	r3, [r7, #22]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0cd      	beq.n	8002ee4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d129      	bne.n	8002fb2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2319      	movs	r3, #25
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4921      	ldr	r1, [pc, #132]	@ (8003014 <HAL_I2C_IsDeviceReady+0x254>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f8c6 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e036      	b.n	800300c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e02c      	b.n	800300c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2319      	movs	r3, #25
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	490f      	ldr	r1, [pc, #60]	@ (8003014 <HAL_I2C_IsDeviceReady+0x254>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f8a2 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e012      	b.n	800300c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	f4ff af32 	bcc.w	8002e5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
  }
}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	00100002 	.word	0x00100002
 8003018:	ffff0000 	.word	0xffff0000

0800301c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	460b      	mov	r3, r1
 800302a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d006      	beq.n	8003046 <I2C_MasterRequestWrite+0x2a>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d003      	beq.n	8003046 <I2C_MasterRequestWrite+0x2a>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003044:	d108      	bne.n	8003058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e00b      	b.n	8003070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	2b12      	cmp	r3, #18
 800305e:	d107      	bne.n	8003070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800306e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f84f 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003096:	d103      	bne.n	80030a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800309e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e035      	b.n	8003110 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030ac:	d108      	bne.n	80030c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ae:	897b      	ldrh	r3, [r7, #10]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030bc:	611a      	str	r2, [r3, #16]
 80030be:	e01b      	b.n	80030f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030c0:	897b      	ldrh	r3, [r7, #10]
 80030c2:	11db      	asrs	r3, r3, #7
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f003 0306 	and.w	r3, r3, #6
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f063 030f 	orn	r3, r3, #15
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	490e      	ldr	r1, [pc, #56]	@ (8003118 <I2C_MasterRequestWrite+0xfc>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f875 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e010      	b.n	8003110 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030ee:	897b      	ldrh	r3, [r7, #10]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4907      	ldr	r1, [pc, #28]	@ (800311c <I2C_MasterRequestWrite+0x100>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f865 	bl	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00010008 	.word	0x00010008
 800311c:	00010002 	.word	0x00010002

08003120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003130:	e025      	b.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d021      	beq.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fe fce5 	bl	8001b08 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e023      	b.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10d      	bne.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4013      	ands	r3, r2
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	e00c      	b.n	80031be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d0b6      	beq.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031dc:	e051      	b.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ec:	d123      	bne.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e046      	b.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d021      	beq.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fe fc63 	bl	8001b08 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e020      	b.n	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d10c      	bne.n	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e00b      	b.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d18d      	bne.n	80031de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d8:	e02d      	b.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f878 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e02d      	b.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d021      	beq.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fe fc09 	bl	8001b08 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d116      	bne.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e007      	b.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003340:	2b80      	cmp	r3, #128	@ 0x80
 8003342:	d1ca      	bne.n	80032da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800335a:	e02d      	b.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f837 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e02d      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d021      	beq.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fe fbc8 	bl	8001b08 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d1ca      	bne.n	800335c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e6:	d11b      	bne.n	8003420 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f043 0204 	orr.w	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e272      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8087 	beq.w	800355a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800344c:	4b92      	ldr	r3, [pc, #584]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b04      	cmp	r3, #4
 8003456:	d00c      	beq.n	8003472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003458:	4b8f      	ldr	r3, [pc, #572]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b08      	cmp	r3, #8
 8003462:	d112      	bne.n	800348a <HAL_RCC_OscConfig+0x5e>
 8003464:	4b8c      	ldr	r3, [pc, #560]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003470:	d10b      	bne.n	800348a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003472:	4b89      	ldr	r3, [pc, #548]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d06c      	beq.n	8003558 <HAL_RCC_OscConfig+0x12c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d168      	bne.n	8003558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e24c      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x76>
 8003494:	4b80      	ldr	r3, [pc, #512]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a7f      	ldr	r2, [pc, #508]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e02e      	b.n	8003500 <HAL_RCC_OscConfig+0xd4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x98>
 80034aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7a      	ldr	r2, [pc, #488]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b78      	ldr	r3, [pc, #480]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a77      	ldr	r2, [pc, #476]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e01d      	b.n	8003500 <HAL_RCC_OscConfig+0xd4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0xbc>
 80034ce:	4b72      	ldr	r3, [pc, #456]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a71      	ldr	r2, [pc, #452]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b6f      	ldr	r3, [pc, #444]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6e      	ldr	r2, [pc, #440]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0xd4>
 80034e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b68      	ldr	r3, [pc, #416]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a67      	ldr	r2, [pc, #412]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe fafe 	bl	8001b08 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003510:	f7fe fafa 	bl	8001b08 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	@ 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e200      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b5d      	ldr	r3, [pc, #372]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0xe4>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe faea 	bl	8001b08 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003538:	f7fe fae6 	bl	8001b08 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	@ 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e1ec      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354a:	4b53      	ldr	r3, [pc, #332]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x10c>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d063      	beq.n	800362e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003566:	4b4c      	ldr	r3, [pc, #304]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003572:	4b49      	ldr	r3, [pc, #292]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b08      	cmp	r3, #8
 800357c:	d11c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x18c>
 800357e:	4b46      	ldr	r3, [pc, #280]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	4b43      	ldr	r3, [pc, #268]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_RCC_OscConfig+0x176>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e1c0      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4939      	ldr	r1, [pc, #228]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	e03a      	b.n	800362e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c0:	4b36      	ldr	r3, [pc, #216]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe fa9f 	bl	8001b08 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ce:	f7fe fa9b 	bl	8001b08 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e1a1      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4927      	ldr	r1, [pc, #156]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	e015      	b.n	800362e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003602:	4b26      	ldr	r3, [pc, #152]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe fa7e 	bl	8001b08 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003610:	f7fe fa7a 	bl	8001b08 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e180      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003622:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d03a      	beq.n	80036b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d019      	beq.n	8003676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003642:	4b17      	ldr	r3, [pc, #92]	@ (80036a0 <HAL_RCC_OscConfig+0x274>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003648:	f7fe fa5e 	bl	8001b08 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003650:	f7fe fa5a 	bl	8001b08 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e160      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800366e:	2001      	movs	r0, #1
 8003670:	f000 fb08 	bl	8003c84 <RCC_Delay>
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003676:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <HAL_RCC_OscConfig+0x274>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7fe fa44 	bl	8001b08 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003682:	e00f      	b.n	80036a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003684:	f7fe fa40 	bl	8001b08 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d908      	bls.n	80036a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e146      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	42420000 	.word	0x42420000
 80036a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	4b92      	ldr	r3, [pc, #584]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e9      	bne.n	8003684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80a6 	beq.w	800380a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c2:	4b8b      	ldr	r3, [pc, #556]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	4b88      	ldr	r3, [pc, #544]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4a87      	ldr	r2, [pc, #540]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d8:	61d3      	str	r3, [r2, #28]
 80036da:	4b85      	ldr	r3, [pc, #532]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b82      	ldr	r3, [pc, #520]	@ (80038f4 <HAL_RCC_OscConfig+0x4c8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d118      	bne.n	8003728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f6:	4b7f      	ldr	r3, [pc, #508]	@ (80038f4 <HAL_RCC_OscConfig+0x4c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7e      	ldr	r2, [pc, #504]	@ (80038f4 <HAL_RCC_OscConfig+0x4c8>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7fe fa01 	bl	8001b08 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fe f9fd 	bl	8001b08 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b64      	cmp	r3, #100	@ 0x64
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e103      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b75      	ldr	r3, [pc, #468]	@ (80038f4 <HAL_RCC_OscConfig+0x4c8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x312>
 8003730:	4b6f      	ldr	r3, [pc, #444]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4a6e      	ldr	r2, [pc, #440]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6213      	str	r3, [r2, #32]
 800373c:	e02d      	b.n	800379a <HAL_RCC_OscConfig+0x36e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x334>
 8003746:	4b6a      	ldr	r3, [pc, #424]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	4a69      	ldr	r2, [pc, #420]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6213      	str	r3, [r2, #32]
 8003752:	4b67      	ldr	r3, [pc, #412]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4a66      	ldr	r2, [pc, #408]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6213      	str	r3, [r2, #32]
 800375e:	e01c      	b.n	800379a <HAL_RCC_OscConfig+0x36e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b05      	cmp	r3, #5
 8003766:	d10c      	bne.n	8003782 <HAL_RCC_OscConfig+0x356>
 8003768:	4b61      	ldr	r3, [pc, #388]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4a60      	ldr	r2, [pc, #384]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	f043 0304 	orr.w	r3, r3, #4
 8003772:	6213      	str	r3, [r2, #32]
 8003774:	4b5e      	ldr	r3, [pc, #376]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4a5d      	ldr	r2, [pc, #372]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6213      	str	r3, [r2, #32]
 8003780:	e00b      	b.n	800379a <HAL_RCC_OscConfig+0x36e>
 8003782:	4b5b      	ldr	r3, [pc, #364]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4a5a      	ldr	r2, [pc, #360]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	6213      	str	r3, [r2, #32]
 800378e:	4b58      	ldr	r3, [pc, #352]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a57      	ldr	r2, [pc, #348]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f023 0304 	bic.w	r3, r3, #4
 8003798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d015      	beq.n	80037ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fe f9b1 	bl	8001b08 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe f9ad 	bl	8001b08 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0b1      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c0:	4b4b      	ldr	r3, [pc, #300]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ee      	beq.n	80037aa <HAL_RCC_OscConfig+0x37e>
 80037cc:	e014      	b.n	80037f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fe f99b 	bl	8001b08 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fe f997 	bl	8001b08 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e09b      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ec:	4b40      	ldr	r3, [pc, #256]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ee      	bne.n	80037d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d105      	bne.n	800380a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fe:	4b3c      	ldr	r3, [pc, #240]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	4a3b      	ldr	r2, [pc, #236]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8087 	beq.w	8003922 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003814:	4b36      	ldr	r3, [pc, #216]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d061      	beq.n	80038e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d146      	bne.n	80038b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003828:	4b33      	ldr	r3, [pc, #204]	@ (80038f8 <HAL_RCC_OscConfig+0x4cc>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382e:	f7fe f96b 	bl	8001b08 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003836:	f7fe f967 	bl	8001b08 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e06d      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003848:	4b29      	ldr	r3, [pc, #164]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800385c:	d108      	bne.n	8003870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800385e:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4921      	ldr	r1, [pc, #132]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003870:	4b1f      	ldr	r3, [pc, #124]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a19      	ldr	r1, [r3, #32]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	430b      	orrs	r3, r1
 8003882:	491b      	ldr	r1, [pc, #108]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_RCC_OscConfig+0x4cc>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fe f93b 	bl	8001b08 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7fe f937 	bl	8001b08 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e03d      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a8:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x46a>
 80038b4:	e035      	b.n	8003922 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <HAL_RCC_OscConfig+0x4cc>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe f924 	bl	8001b08 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe f920 	bl	8001b08 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e026      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x498>
 80038e2:	e01e      	b.n	8003922 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e019      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <HAL_RCC_OscConfig+0x500>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	429a      	cmp	r2, r3
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d001      	beq.n	8003922 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0d0      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d910      	bls.n	8003974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b67      	ldr	r3, [pc, #412]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	4965      	ldr	r1, [pc, #404]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b63      	ldr	r3, [pc, #396]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0b8      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800398c:	4b59      	ldr	r3, [pc, #356]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a58      	ldr	r2, [pc, #352]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003996:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a4:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a52      	ldr	r2, [pc, #328]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b50      	ldr	r3, [pc, #320]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	494d      	ldr	r1, [pc, #308]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d040      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d115      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e073      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	4b3d      	ldr	r3, [pc, #244]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e06b      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0e:	4b39      	ldr	r3, [pc, #228]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4936      	ldr	r1, [pc, #216]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a20:	f7fe f872 	bl	8001b08 <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fe f86e 	bl	8001b08 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e053      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 020c 	and.w	r2, r3, #12
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d1eb      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a50:	4b27      	ldr	r3, [pc, #156]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d210      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 0207 	bic.w	r2, r3, #7
 8003a66:	4922      	ldr	r1, [pc, #136]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b20      	ldr	r3, [pc, #128]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e032      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a8c:	4b19      	ldr	r3, [pc, #100]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4916      	ldr	r1, [pc, #88]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aaa:	4b12      	ldr	r3, [pc, #72]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	490e      	ldr	r1, [pc, #56]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003abe:	f000 f821 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	490a      	ldr	r1, [pc, #40]	@ (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad0:	5ccb      	ldrb	r3, [r1, r3]
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	4a09      	ldr	r2, [pc, #36]	@ (8003afc <HAL_RCC_ClockConfig+0x1cc>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ada:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <HAL_RCC_ClockConfig+0x1d0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fd fe80 	bl	80017e4 <HAL_InitTick>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022000 	.word	0x40022000
 8003af4:	40021000 	.word	0x40021000
 8003af8:	0800aef8 	.word	0x0800aef8
 8003afc:	20000008 	.word	0x20000008
 8003b00:	2000000c 	.word	0x2000000c

08003b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b490      	push	{r4, r7}
 8003b06:	b08a      	sub	sp, #40	@ 0x28
 8003b08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b0a:	4b29      	ldr	r3, [pc, #164]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b0c:	1d3c      	adds	r4, r7, #4
 8003b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b14:	f240 2301 	movw	r3, #513	@ 0x201
 8003b18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b2e:	4b21      	ldr	r3, [pc, #132]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d002      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x40>
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x46>
 8003b42:	e02b      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b44:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b46:	623b      	str	r3, [r7, #32]
      break;
 8003b48:	e02b      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	0c9b      	lsrs	r3, r3, #18
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3328      	adds	r3, #40	@ 0x28
 8003b54:	443b      	add	r3, r7
 8003b56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d012      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b66:	4b13      	ldr	r3, [pc, #76]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0c5b      	lsrs	r3, r3, #17
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	3328      	adds	r3, #40	@ 0x28
 8003b72:	443b      	add	r3, r7
 8003b74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b7e:	fb03 f202 	mul.w	r2, r3, r2
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8a:	e004      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	fb02 f303 	mul.w	r3, r2, r3
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	623b      	str	r3, [r7, #32]
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b9e:	623b      	str	r3, [r7, #32]
      break;
 8003ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3728      	adds	r7, #40	@ 0x28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc90      	pop	{r4, r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	0800a0b0 	.word	0x0800a0b0
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	007a1200 	.word	0x007a1200
 8003bbc:	003d0900 	.word	0x003d0900

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b02      	ldr	r3, [pc, #8]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	20000008 	.word	0x20000008

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd8:	f7ff fff2 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	0800af08 	.word	0x0800af08

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c00:	f7ff ffde 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	0adb      	lsrs	r3, r3, #11
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4903      	ldr	r1, [pc, #12]	@ (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	0800af08 	.word	0x0800af08

08003c24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	220f      	movs	r2, #15
 8003c32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_GetClockConfig+0x58>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0203 	and.w	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c40:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <HAL_RCC_GetClockConfig+0x58>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCC_GetClockConfig+0x58>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c58:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <HAL_RCC_GetClockConfig+0x58>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	08db      	lsrs	r3, r3, #3
 8003c5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c66:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <HAL_RCC_GetClockConfig+0x5c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0207 	and.w	r2, r3, #7
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40022000 	.word	0x40022000

08003c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <RCC_Delay+0x34>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <RCC_Delay+0x38>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0a5b      	lsrs	r3, r3, #9
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ca0:	bf00      	nop
  }
  while (Delay --);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1e5a      	subs	r2, r3, #1
 8003ca6:	60fa      	str	r2, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f9      	bne.n	8003ca0 <RCC_Delay+0x1c>
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	20000008 	.word	0x20000008
 8003cbc:	10624dd3 	.word	0x10624dd3

08003cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d07d      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b4c      	ldr	r3, [pc, #304]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	61d3      	str	r3, [r2, #28]
 8003cf8:	4b49      	ldr	r3, [pc, #292]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	4b46      	ldr	r3, [pc, #280]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d118      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d14:	4b43      	ldr	r3, [pc, #268]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a42      	ldr	r2, [pc, #264]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d20:	f7fd fef2 	bl	8001b08 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d26:	e008      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fd feee 	bl	8001b08 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e06d      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d46:	4b36      	ldr	r3, [pc, #216]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d02e      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d027      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d64:	4b2e      	ldr	r3, [pc, #184]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d74:	4b2c      	ldr	r3, [pc, #176]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d7a:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fd febd 	bl	8001b08 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d90:	e00a      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d92:	f7fd feb9 	bl	8001b08 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e036      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ee      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4917      	ldr	r1, [pc, #92]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dcc:	4b14      	ldr	r3, [pc, #80]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003de4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	490b      	ldr	r1, [pc, #44]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	4904      	ldr	r1, [pc, #16]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
 8003e28:	42420440 	.word	0x42420440

08003e2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b08d      	sub	sp, #52	@ 0x34
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e34:	4b58      	ldr	r3, [pc, #352]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003e36:	f107 040c 	add.w	r4, r7, #12
 8003e3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e40:	f240 2301 	movw	r3, #513	@ 0x201
 8003e44:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	2300      	movs	r3, #0
 8003e58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	f200 808e 	bhi.w	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d049      	beq.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d079      	beq.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e74:	e086      	b.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003e76:	4b49      	ldr	r3, [pc, #292]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e7c:	4b47      	ldr	r3, [pc, #284]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d07f      	beq.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	0c9b      	lsrs	r3, r3, #18
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	3330      	adds	r3, #48	@ 0x30
 8003e92:	443b      	add	r3, r7
 8003e94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e98:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	0c5b      	lsrs	r3, r3, #17
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	3330      	adds	r3, #48	@ 0x30
 8003eb0:	443b      	add	r3, r7
 8003eb2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ec2:	4a37      	ldr	r2, [pc, #220]	@ (8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	fb02 f303 	mul.w	r3, r2, r3
 8003ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed2:	e004      	b.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	4a33      	ldr	r2, [pc, #204]	@ (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ed8:	fb02 f303 	mul.w	r3, r2, r3
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ede:	4b2f      	ldr	r3, [pc, #188]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003ef0:	e04a      	b.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003f00:	e042      	b.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003f02:	4b26      	ldr	r3, [pc, #152]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f12:	d108      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f24:	e01f      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f30:	d109      	bne.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003f32:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003f3e:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f44:	e00f      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f50:	d11c      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003f52:	4b12      	ldr	r3, [pc, #72]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003f5e:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003f64:	e012      	b.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003f66:	e011      	b.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f68:	f7ff fe48 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	0b9b      	lsrs	r3, r3, #14
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003f82:	e004      	b.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003f8c:	bf00      	nop
    }
  }
  return (frequency);
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3734      	adds	r7, #52	@ 0x34
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd90      	pop	{r4, r7, pc}
 8003f98:	0800a0c0 	.word	0x0800a0c0
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	007a1200 	.word	0x007a1200
 8003fa4:	003d0900 	.word	0x003d0900
 8003fa8:	aaaaaaab 	.word	0xaaaaaaab

08003fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e041      	b.n	8004042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f839 	bl	800404a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 f9b4 	bl	8004358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e03a      	b.n	80040ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a18      	ldr	r2, [pc, #96]	@ (80040f4 <HAL_TIM_Base_Start_IT+0x98>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x58>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d009      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x58>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x58>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a13      	ldr	r2, [pc, #76]	@ (80040fc <HAL_TIM_Base_Start_IT+0xa0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d111      	bne.n	80040d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d010      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d6:	e007      	b.n	80040e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800

08004100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0202 	mvn.w	r2, #2
 800412c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8ed 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8e0 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8ef 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b04      	cmp	r3, #4
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b04      	cmp	r3, #4
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0204 	mvn.w	r2, #4
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8c3 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8b6 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f8c5 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d11b      	bne.n	8004204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0208 	mvn.w	r2, #8
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2204      	movs	r2, #4
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f899 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f88c 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f89b 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d122      	bne.n	8004258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b10      	cmp	r3, #16
 800421e:	d11b      	bne.n	8004258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0210 	mvn.w	r2, #16
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2208      	movs	r2, #8
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f86f 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f862 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f871 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0201 	mvn.w	r2, #1
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc fed8 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	2b80      	cmp	r3, #128	@ 0x80
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429c:	2b80      	cmp	r3, #128	@ 0x80
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8bf 	bl	800442e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ba:	2b40      	cmp	r3, #64	@ 0x40
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c8:	2b40      	cmp	r3, #64	@ 0x40
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f835 	bl	8004346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d107      	bne.n	8004308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0220 	mvn.w	r2, #32
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f88a 	bl	800441c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a29      	ldr	r2, [pc, #164]	@ (8004410 <TIM_Base_SetConfig+0xb8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a26      	ldr	r2, [pc, #152]	@ (8004414 <TIM_Base_SetConfig+0xbc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a25      	ldr	r2, [pc, #148]	@ (8004418 <TIM_Base_SetConfig+0xc0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <TIM_Base_SetConfig+0xb8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <TIM_Base_SetConfig+0xbc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a18      	ldr	r2, [pc, #96]	@ (8004418 <TIM_Base_SetConfig+0xc0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a07      	ldr	r2, [pc, #28]	@ (8004410 <TIM_Base_SetConfig+0xb8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d103      	bne.n	8004400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	615a      	str	r2, [r3, #20]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800

0800441c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e03f      	b.n	80044d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd f970 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	@ 0x24
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f9a7 	bl	80047d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	@ 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d17c      	bne.n	80045f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_Transmit+0x2c>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e075      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_UART_Transmit+0x3e>
 8004514:	2302      	movs	r3, #2
 8004516:	e06e      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2221      	movs	r2, #33	@ 0x21
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452e:	f7fd faeb 	bl	8001b08 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0x82>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800456c:	e02a      	b.n	80045c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	@ 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f8e2 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3302      	adds	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e007      	b.n	80045b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cf      	bne.n	800456e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	@ 0x40
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f8b2 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08a      	sub	sp, #40	@ 0x28
 8004602:	af02      	add	r7, sp, #8
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	f040 808c 	bne.w	8004738 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_UART_Receive+0x2e>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e084      	b.n	800473a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Receive+0x40>
 800463a:	2302      	movs	r3, #2
 800463c:	e07d      	b.n	800473a <HAL_UART_Receive+0x13c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2222      	movs	r2, #34	@ 0x22
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800465a:	f7fd fa55 	bl	8001b08 <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004674:	d108      	bne.n	8004688 <HAL_UART_Receive+0x8a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e003      	b.n	8004690 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004698:	e043      	b.n	8004722 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2120      	movs	r1, #32
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f84c 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e042      	b.n	800473a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3302      	adds	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	e01f      	b.n	8004714 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046dc:	d007      	beq.n	80046ee <HAL_UART_Receive+0xf0>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_UART_Receive+0xfe>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e008      	b.n	800470e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004708:	b2da      	uxtb	r2, r3
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3301      	adds	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1b6      	bne.n	800469a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004752:	e02c      	b.n	80047ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d028      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <UART_WaitOnFlagUntilTimeout+0x30>
 8004762:	f7fd f9d1 	bl	8001b08 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	429a      	cmp	r2, r3
 8004770:	d21d      	bcs.n	80047ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004780:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e00f      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d0c3      	beq.n	8004754 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004812:	f023 030c 	bic.w	r3, r3, #12
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	430b      	orrs	r3, r1
 800481e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <UART_SetConfig+0x114>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7ff f9dc 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	e002      	b.n	800484e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7ff f9c4 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 800484c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009a      	lsls	r2, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <UART_SetConfig+0x118>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	0119      	lsls	r1, r3, #4
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	fbb2 f2f3 	udiv	r2, r2, r3
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <UART_SetConfig+0x118>)
 8004886:	fba3 0302 	umull	r0, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2064      	movs	r0, #100	@ 0x64
 800488e:	fb00 f303 	mul.w	r3, r0, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	@ 0x32
 8004898:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <UART_SetConfig+0x118>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a4:	4419      	add	r1, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009a      	lsls	r2, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <UART_SetConfig+0x118>)
 80048be:	fba3 0302 	umull	r0, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2064      	movs	r0, #100	@ 0x64
 80048c6:	fb00 f303 	mul.w	r3, r0, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	@ 0x32
 80048d0:	4a07      	ldr	r2, [pc, #28]	@ (80048f0 <UART_SetConfig+0x118>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	440a      	add	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40013800 	.word	0x40013800
 80048f0:	51eb851f 	.word	0x51eb851f

080048f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fa:	f3ef 8305 	mrs	r3, IPSR
 80048fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004900:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004906:	f3ef 8310 	mrs	r3, PRIMASK
 800490a:	607b      	str	r3, [r7, #4]
  return(result);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <osKernelInitialize+0x32>
 8004912:	4b10      	ldr	r3, [pc, #64]	@ (8004954 <osKernelInitialize+0x60>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d109      	bne.n	800492e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800491a:	f3ef 8311 	mrs	r3, BASEPRI
 800491e:	603b      	str	r3, [r7, #0]
  return(result);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004926:	f06f 0305 	mvn.w	r3, #5
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e00c      	b.n	8004948 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800492e:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <osKernelInitialize+0x60>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004936:	4b07      	ldr	r3, [pc, #28]	@ (8004954 <osKernelInitialize+0x60>)
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e002      	b.n	8004948 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	20000774 	.word	0x20000774

08004958 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800495e:	f3ef 8305 	mrs	r3, IPSR
 8004962:	60bb      	str	r3, [r7, #8]
  return(result);
 8004964:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496a:	f3ef 8310 	mrs	r3, PRIMASK
 800496e:	607b      	str	r3, [r7, #4]
  return(result);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <osKernelStart+0x32>
 8004976:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <osKernelStart+0x64>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d109      	bne.n	8004992 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800497e:	f3ef 8311 	mrs	r3, BASEPRI
 8004982:	603b      	str	r3, [r7, #0]
  return(result);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <osKernelStart+0x3a>
    stat = osErrorISR;
 800498a:	f06f 0305 	mvn.w	r3, #5
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e00e      	b.n	80049b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004992:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <osKernelStart+0x64>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d107      	bne.n	80049aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800499a:	4b08      	ldr	r3, [pc, #32]	@ (80049bc <osKernelStart+0x64>)
 800499c:	2202      	movs	r2, #2
 800499e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80049a0:	f001 f890 	bl	8005ac4 <vTaskStartScheduler>
      stat = osOK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e002      	b.n	80049b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295
 80049ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049b0:	68fb      	ldr	r3, [r7, #12]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000774 	.word	0x20000774

080049c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b092      	sub	sp, #72	@ 0x48
 80049c4:	af04      	add	r7, sp, #16
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d0:	f3ef 8305 	mrs	r3, IPSR
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f040 8094 	bne.w	8004b06 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049de:	f3ef 8310 	mrs	r3, PRIMASK
 80049e2:	623b      	str	r3, [r7, #32]
  return(result);
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 808d 	bne.w	8004b06 <osThreadNew+0x146>
 80049ec:	4b48      	ldr	r3, [pc, #288]	@ (8004b10 <osThreadNew+0x150>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d106      	bne.n	8004a02 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049f4:	f3ef 8311 	mrs	r3, BASEPRI
 80049f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 8082 	bne.w	8004b06 <osThreadNew+0x146>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d07e      	beq.n	8004b06 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004a0c:	2318      	movs	r3, #24
 8004a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004a10:	2300      	movs	r3, #0
 8004a12:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004a14:	f107 031b 	add.w	r3, r7, #27
 8004a18:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d045      	beq.n	8004ab2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <osThreadNew+0x74>
        name = attr->name;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <osThreadNew+0x9a>
 8004a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4a:	2b38      	cmp	r3, #56	@ 0x38
 8004a4c:	d805      	bhi.n	8004a5a <osThreadNew+0x9a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <osThreadNew+0x9e>
        return (NULL);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e054      	b.n	8004b08 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00e      	beq.n	8004a94 <osThreadNew+0xd4>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b5b      	cmp	r3, #91	@ 0x5b
 8004a7c:	d90a      	bls.n	8004a94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d006      	beq.n	8004a94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <osThreadNew+0xd4>
        mem = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a92:	e010      	b.n	8004ab6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10c      	bne.n	8004ab6 <osThreadNew+0xf6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <osThreadNew+0xf6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <osThreadNew+0xf6>
          mem = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ab0:	e001      	b.n	8004ab6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d110      	bne.n	8004ade <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ac4:	9202      	str	r2, [sp, #8]
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fe24 	bl	8005720 <xTaskCreateStatic>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e013      	b.n	8004b06 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d110      	bne.n	8004b06 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	f107 0314 	add.w	r3, r7, #20
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fe71 	bl	80057de <xTaskCreate>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <osThreadNew+0x146>
          hTask = NULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b06:	697b      	ldr	r3, [r7, #20]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3738      	adds	r7, #56	@ 0x38
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000774 	.word	0x20000774

08004b14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b1c:	f3ef 8305 	mrs	r3, IPSR
 8004b20:	613b      	str	r3, [r7, #16]
  return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b28:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <osDelay+0x34>
 8004b34:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <osDelay+0x58>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d109      	bne.n	8004b50 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <osDelay+0x3c>
    stat = osErrorISR;
 8004b48:	f06f 0305 	mvn.w	r3, #5
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e007      	b.n	8004b60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 ff7c 	bl	8005a58 <vTaskDelay>
    }
  }

  return (stat);
 8004b60:	697b      	ldr	r3, [r7, #20]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000774 	.word	0x20000774

08004b70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a06      	ldr	r2, [pc, #24]	@ (8004b98 <vApplicationGetIdleTaskMemory+0x28>)
 8004b80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4a05      	ldr	r2, [pc, #20]	@ (8004b9c <vApplicationGetIdleTaskMemory+0x2c>)
 8004b86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	601a      	str	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	20000778 	.word	0x20000778
 8004b9c:	200007d4 	.word	0x200007d4

08004ba0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a07      	ldr	r2, [pc, #28]	@ (8004bcc <vApplicationGetTimerTaskMemory+0x2c>)
 8004bb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a06      	ldr	r2, [pc, #24]	@ (8004bd0 <vApplicationGetTimerTaskMemory+0x30>)
 8004bb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bbe:	601a      	str	r2, [r3, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	200009d4 	.word	0x200009d4
 8004bd0:	20000a30 	.word	0x20000a30

08004bd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f103 0208 	add.w	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f103 0208 	add.w	r2, r3, #8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f103 0208 	add.w	r2, r3, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr

08004c12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d103      	bne.n	8004c90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e00c      	b.n	8004caa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3308      	adds	r3, #8
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e002      	b.n	8004c9e <vListInsert+0x2e>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d2f6      	bcs.n	8004c98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6892      	ldr	r2, [r2, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6852      	ldr	r2, [r2, #4]
 8004d00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d103      	bne.n	8004d14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr
	...

08004d34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	e7fd      	b.n	8004d5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d60:	f001 fffc 	bl	8006d5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	68f9      	ldr	r1, [r7, #12]
 8004d6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	441a      	add	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d90:	3b01      	subs	r3, #1
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	22ff      	movs	r2, #255	@ 0xff
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	22ff      	movs	r2, #255	@ 0xff
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d114      	bne.n	8004de0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01a      	beq.n	8004df4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 f910 	bl	8005fe8 <xTaskRemoveFromEventList>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d012      	beq.n	8004df4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <xQueueGenericReset+0xd0>)
 8004dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	e009      	b.n	8004df4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3310      	adds	r3, #16
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fef5 	bl	8004bd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3324      	adds	r3, #36	@ 0x24
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fef0 	bl	8004bd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004df4:	f001 ffe2 	bl	8006dbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004df8:	2301      	movs	r3, #1
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08e      	sub	sp, #56	@ 0x38
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e2e:	bf00      	nop
 8004e30:	bf00      	nop
 8004e32:	e7fd      	b.n	8004e30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <xQueueGenericCreateStatic+0x56>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <xQueueGenericCreateStatic+0x5a>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <xQueueGenericCreateStatic+0x5c>
 8004e62:	2300      	movs	r3, #0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	623b      	str	r3, [r7, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <xQueueGenericCreateStatic+0x84>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <xQueueGenericCreateStatic+0x88>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <xQueueGenericCreateStatic+0x8a>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	61fb      	str	r3, [r7, #28]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004eae:	2350      	movs	r3, #80	@ 0x50
 8004eb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b50      	cmp	r3, #80	@ 0x50
 8004eb6:	d00b      	beq.n	8004ed0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	61bb      	str	r3, [r7, #24]
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ee2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f805 	bl	8004f00 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3730      	adds	r7, #48	@ 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e002      	b.n	8004f22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f2e:	2101      	movs	r1, #1
 8004f30:	69b8      	ldr	r0, [r7, #24]
 8004f32:	f7ff feff 	bl	8004d34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08e      	sub	sp, #56	@ 0x38
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f56:	2300      	movs	r3, #0
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <xQueueGenericSend+0x34>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <xQueueGenericSend+0x42>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <xQueueGenericSend+0x46>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <xQueueGenericSend+0x48>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <xQueueGenericSend+0x64>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	e7fd      	b.n	8004fa8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d103      	bne.n	8004fba <xQueueGenericSend+0x72>
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <xQueueGenericSend+0x76>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <xQueueGenericSend+0x78>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <xQueueGenericSend+0x94>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	623b      	str	r3, [r7, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fdc:	f001 f9c8 	bl	8006370 <xTaskGetSchedulerState>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <xQueueGenericSend+0xa4>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <xQueueGenericSend+0xa8>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <xQueueGenericSend+0xaa>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <xQueueGenericSend+0xc6>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	61fb      	str	r3, [r7, #28]
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e7fd      	b.n	800500a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800500e:	f001 fea5 	bl	8006d5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <xQueueGenericSend+0xdc>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d129      	bne.n	8005078 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800502a:	f000 fa0d 	bl	8005448 <prvCopyDataToQueue>
 800502e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	d010      	beq.n	800505a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	3324      	adds	r3, #36	@ 0x24
 800503c:	4618      	mov	r0, r3
 800503e:	f000 ffd3 	bl	8005fe8 <xTaskRemoveFromEventList>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005048:	4b3f      	ldr	r3, [pc, #252]	@ (8005148 <xQueueGenericSend+0x200>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	e00a      	b.n	8005070 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005060:	4b39      	ldr	r3, [pc, #228]	@ (8005148 <xQueueGenericSend+0x200>)
 8005062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005070:	f001 fea4 	bl	8006dbc <vPortExitCritical>
				return pdPASS;
 8005074:	2301      	movs	r3, #1
 8005076:	e063      	b.n	8005140 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800507e:	f001 fe9d 	bl	8006dbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005082:	2300      	movs	r3, #0
 8005084:	e05c      	b.n	8005140 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	4618      	mov	r0, r3
 8005092:	f001 f80d 	bl	80060b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005096:	2301      	movs	r3, #1
 8005098:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800509a:	f001 fe8f 	bl	8006dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800509e:	f000 fd79 	bl	8005b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050a2:	f001 fe5b 	bl	8006d5c <vPortEnterCritical>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050ac:	b25b      	sxtb	r3, r3
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d103      	bne.n	80050bc <xQueueGenericSend+0x174>
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050c2:	b25b      	sxtb	r3, r3
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d103      	bne.n	80050d2 <xQueueGenericSend+0x18a>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050d2:	f001 fe73 	bl	8006dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050d6:	1d3a      	adds	r2, r7, #4
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	4611      	mov	r1, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fffc 	bl	80060dc <xTaskCheckForTimeOut>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d124      	bne.n	8005134 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ec:	f000 faa4 	bl	8005638 <prvIsQueueFull>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d018      	beq.n	8005128 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	3310      	adds	r3, #16
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 ff20 	bl	8005f44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005106:	f000 fa2f 	bl	8005568 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800510a:	f000 fd51 	bl	8005bb0 <xTaskResumeAll>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	f47f af7c 	bne.w	800500e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005116:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <xQueueGenericSend+0x200>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	e772      	b.n	800500e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800512a:	f000 fa1d 	bl	8005568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800512e:	f000 fd3f 	bl	8005bb0 <xTaskResumeAll>
 8005132:	e76c      	b.n	800500e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005136:	f000 fa17 	bl	8005568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800513a:	f000 fd39 	bl	8005bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800513e:	2300      	movs	r3, #0
		}
	}
}
 8005140:	4618      	mov	r0, r3
 8005142:	3738      	adds	r7, #56	@ 0x38
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	@ 0x38
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d103      	bne.n	800518a <xQueueGenericSendFromISR+0x3e>
 8005182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <xQueueGenericSendFromISR+0x42>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <xQueueGenericSendFromISR+0x44>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	623b      	str	r3, [r7, #32]
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d103      	bne.n	80051ba <xQueueGenericSendFromISR+0x6e>
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <xQueueGenericSendFromISR+0x72>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <xQueueGenericSendFromISR+0x74>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	61fb      	str	r3, [r7, #28]
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051dc:	f001 fe80 	bl	8006ee0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051e0:	f3ef 8211 	mrs	r2, BASEPRI
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61ba      	str	r2, [r7, #24]
 80051f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <xQueueGenericSendFromISR+0xc2>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d12c      	bne.n	8005268 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005214:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800521e:	f000 f913 	bl	8005448 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005222:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d112      	bne.n	8005252 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800522c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d016      	beq.n	8005262 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	3324      	adds	r3, #36	@ 0x24
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fed5 	bl	8005fe8 <xTaskRemoveFromEventList>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00e      	beq.n	8005262 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e007      	b.n	8005262 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005252:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005256:	3301      	adds	r3, #1
 8005258:	b2db      	uxtb	r3, r3
 800525a:	b25a      	sxtb	r2, r3
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005262:	2301      	movs	r3, #1
 8005264:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005266:	e001      	b.n	800526c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005268:	2300      	movs	r3, #0
 800526a:	637b      	str	r3, [r7, #52]	@ 0x34
 800526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005276:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800527a:	4618      	mov	r0, r3
 800527c:	3738      	adds	r7, #56	@ 0x38
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	@ 0x30
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005290:	2300      	movs	r3, #0
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10b      	bne.n	80052b6 <xQueueReceive+0x32>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	623b      	str	r3, [r7, #32]
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	e7fd      	b.n	80052b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d103      	bne.n	80052c4 <xQueueReceive+0x40>
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <xQueueReceive+0x44>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <xQueueReceive+0x46>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <xQueueReceive+0x62>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	61fb      	str	r3, [r7, #28]
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	e7fd      	b.n	80052e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052e6:	f001 f843 	bl	8006370 <xTaskGetSchedulerState>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d102      	bne.n	80052f6 <xQueueReceive+0x72>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <xQueueReceive+0x76>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <xQueueReceive+0x78>
 80052fa:	2300      	movs	r3, #0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <xQueueReceive+0x94>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	61bb      	str	r3, [r7, #24]
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005318:	f001 fd20 	bl	8006d5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01f      	beq.n	8005368 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800532c:	f000 f8f6 	bl	800551c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	1e5a      	subs	r2, r3, #1
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00f      	beq.n	8005360 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005342:	3310      	adds	r3, #16
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fe4f 	bl	8005fe8 <xTaskRemoveFromEventList>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005350:	4b3c      	ldr	r3, [pc, #240]	@ (8005444 <xQueueReceive+0x1c0>)
 8005352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005360:	f001 fd2c 	bl	8006dbc <vPortExitCritical>
				return pdPASS;
 8005364:	2301      	movs	r3, #1
 8005366:	e069      	b.n	800543c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800536e:	f001 fd25 	bl	8006dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005372:	2300      	movs	r3, #0
 8005374:	e062      	b.n	800543c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800537c:	f107 0310 	add.w	r3, r7, #16
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fe95 	bl	80060b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005386:	2301      	movs	r3, #1
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800538a:	f001 fd17 	bl	8006dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800538e:	f000 fc01 	bl	8005b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005392:	f001 fce3 	bl	8006d5c <vPortEnterCritical>
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800539c:	b25b      	sxtb	r3, r3
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d103      	bne.n	80053ac <xQueueReceive+0x128>
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d103      	bne.n	80053c2 <xQueueReceive+0x13e>
 80053ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c2:	f001 fcfb 	bl	8006dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053c6:	1d3a      	adds	r2, r7, #4
 80053c8:	f107 0310 	add.w	r3, r7, #16
 80053cc:	4611      	mov	r1, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fe84 	bl	80060dc <xTaskCheckForTimeOut>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d123      	bne.n	8005422 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053dc:	f000 f916 	bl	800560c <prvIsQueueEmpty>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d017      	beq.n	8005416 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	3324      	adds	r3, #36	@ 0x24
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4611      	mov	r1, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fda8 	bl	8005f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053f6:	f000 f8b7 	bl	8005568 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053fa:	f000 fbd9 	bl	8005bb0 <xTaskResumeAll>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d189      	bne.n	8005318 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005404:	4b0f      	ldr	r3, [pc, #60]	@ (8005444 <xQueueReceive+0x1c0>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	e780      	b.n	8005318 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005418:	f000 f8a6 	bl	8005568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800541c:	f000 fbc8 	bl	8005bb0 <xTaskResumeAll>
 8005420:	e77a      	b.n	8005318 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005424:	f000 f8a0 	bl	8005568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005428:	f000 fbc2 	bl	8005bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800542c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800542e:	f000 f8ed 	bl	800560c <prvIsQueueEmpty>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	f43f af6f 	beq.w	8005318 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800543a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800543c:	4618      	mov	r0, r3
 800543e:	3730      	adds	r7, #48	@ 0x30
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	e000ed04 	.word	0xe000ed04

08005448 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d14d      	bne.n	800550a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 ff9a 	bl	80063ac <xTaskPriorityDisinherit>
 8005478:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	605a      	str	r2, [r3, #4]
 8005480:	e043      	b.n	800550a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d119      	bne.n	80054bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6898      	ldr	r0, [r3, #8]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	461a      	mov	r2, r3
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	f002 fd51 	bl	8007f3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d32b      	bcc.n	800550a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	609a      	str	r2, [r3, #8]
 80054ba:	e026      	b.n	800550a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68d8      	ldr	r0, [r3, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	461a      	mov	r2, r3
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	f002 fd37 	bl	8007f3a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d4:	425b      	negs	r3, r3
 80054d6:	441a      	add	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d207      	bcs.n	80054f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	425b      	negs	r3, r3
 80054f2:	441a      	add	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d105      	bne.n	800550a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	3b01      	subs	r3, #1
 8005508:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005512:	697b      	ldr	r3, [r7, #20]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d018      	beq.n	8005560 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	441a      	add	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d303      	bcc.n	8005550 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68d9      	ldr	r1, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005558:	461a      	mov	r2, r3
 800555a:	6838      	ldr	r0, [r7, #0]
 800555c:	f002 fced 	bl	8007f3a <memcpy>
	}
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005570:	f001 fbf4 	bl	8006d5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800557a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800557c:	e011      	b.n	80055a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d012      	beq.n	80055ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3324      	adds	r3, #36	@ 0x24
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fd2c 	bl	8005fe8 <xTaskRemoveFromEventList>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005596:	f000 fe05 	bl	80061a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	3b01      	subs	r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	dce9      	bgt.n	800557e <prvUnlockQueue+0x16>
 80055aa:	e000      	b.n	80055ae <prvUnlockQueue+0x46>
					break;
 80055ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	22ff      	movs	r2, #255	@ 0xff
 80055b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80055b6:	f001 fc01 	bl	8006dbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055ba:	f001 fbcf 	bl	8006d5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055c6:	e011      	b.n	80055ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d012      	beq.n	80055f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3310      	adds	r3, #16
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fd07 	bl	8005fe8 <xTaskRemoveFromEventList>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055e0:	f000 fde0 	bl	80061a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dce9      	bgt.n	80055c8 <prvUnlockQueue+0x60>
 80055f4:	e000      	b.n	80055f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	22ff      	movs	r2, #255	@ 0xff
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005600:	f001 fbdc 	bl	8006dbc <vPortExitCritical>
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005614:	f001 fba2 	bl	8006d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005620:	2301      	movs	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e001      	b.n	800562a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800562a:	f001 fbc7 	bl	8006dbc <vPortExitCritical>

	return xReturn;
 800562e:	68fb      	ldr	r3, [r7, #12]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005640:	f001 fb8c 	bl	8006d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564c:	429a      	cmp	r2, r3
 800564e:	d102      	bne.n	8005656 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e001      	b.n	800565a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800565a:	f001 fbaf 	bl	8006dbc <vPortExitCritical>

	return xReturn;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e014      	b.n	80056a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005678:	4a0e      	ldr	r2, [pc, #56]	@ (80056b4 <vQueueAddToRegistry+0x4c>)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005684:	490b      	ldr	r1, [pc, #44]	@ (80056b4 <vQueueAddToRegistry+0x4c>)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800568e:	4a09      	ldr	r2, [pc, #36]	@ (80056b4 <vQueueAddToRegistry+0x4c>)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800569a:	e006      	b.n	80056aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b07      	cmp	r3, #7
 80056a6:	d9e7      	bls.n	8005678 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	20000e30 	.word	0x20000e30

080056b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056c8:	f001 fb48 	bl	8006d5c <vPortEnterCritical>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056d2:	b25b      	sxtb	r3, r3
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d103      	bne.n	80056e2 <vQueueWaitForMessageRestricted+0x2a>
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d103      	bne.n	80056f8 <vQueueWaitForMessageRestricted+0x40>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f8:	f001 fb60 	bl	8006dbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	3324      	adds	r3, #36	@ 0x24
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fc3f 	bl	8005f90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005712:	6978      	ldr	r0, [r7, #20]
 8005714:	f7ff ff28 	bl	8005568 <prvUnlockQueue>
	}
 8005718:	bf00      	nop
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08e      	sub	sp, #56	@ 0x38
 8005724:	af04      	add	r7, sp, #16
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	623b      	str	r3, [r7, #32]
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	61fb      	str	r3, [r7, #28]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800576a:	235c      	movs	r3, #92	@ 0x5c
 800576c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b5c      	cmp	r3, #92	@ 0x5c
 8005772:	d00b      	beq.n	800578c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	61bb      	str	r3, [r7, #24]
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	e7fd      	b.n	8005788 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01e      	beq.n	80057d0 <xTaskCreateStatic+0xb0>
 8005792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057aa:	2300      	movs	r3, #0
 80057ac:	9303      	str	r3, [sp, #12]
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	f107 0314 	add.w	r3, r7, #20
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f850 	bl	8005868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057ca:	f000 f8d5 	bl	8005978 <prvAddNewTaskToReadyList>
 80057ce:	e001      	b.n	80057d4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057d4:	697b      	ldr	r3, [r7, #20]
	}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3728      	adds	r7, #40	@ 0x28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b08c      	sub	sp, #48	@ 0x30
 80057e2:	af04      	add	r7, sp, #16
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 fbb4 	bl	8006f60 <pvPortMalloc>
 80057f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005800:	205c      	movs	r0, #92	@ 0x5c
 8005802:	f001 fbad 	bl	8006f60 <pvPortMalloc>
 8005806:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
 8005814:	e005      	b.n	8005822 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005816:	6978      	ldr	r0, [r7, #20]
 8005818:	f001 fc6a 	bl	80070f0 <vPortFree>
 800581c:	e001      	b.n	8005822 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d017      	beq.n	8005858 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	2300      	movs	r3, #0
 8005834:	9303      	str	r3, [sp, #12]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	9302      	str	r3, [sp, #8]
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f80e 	bl	8005868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800584c:	69f8      	ldr	r0, [r7, #28]
 800584e:	f000 f893 	bl	8005978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005852:	2301      	movs	r3, #1
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	e002      	b.n	800585e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005858:	f04f 33ff 	mov.w	r3, #4294967295
 800585c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800585e:	69bb      	ldr	r3, [r7, #24]
	}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	461a      	mov	r2, r3
 8005880:	21a5      	movs	r1, #165	@ 0xa5
 8005882:	f002 facc 	bl	8007e1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005890:	3b01      	subs	r3, #1
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f023 0307 	bic.w	r3, r3, #7
 800589e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	617b      	str	r3, [r7, #20]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	e012      	b.n	80058ee <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	7819      	ldrb	r1, [r3, #0]
 80058d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	3334      	adds	r3, #52	@ 0x34
 80058d8:	460a      	mov	r2, r1
 80058da:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d006      	beq.n	80058f6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3301      	adds	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b0f      	cmp	r3, #15
 80058f2:	d9e9      	bls.n	80058c8 <prvInitialiseNewTask+0x60>
 80058f4:	e000      	b.n	80058f8 <prvInitialiseNewTask+0x90>
		{
			break;
 80058f6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	2b37      	cmp	r3, #55	@ 0x37
 8005904:	d901      	bls.n	800590a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005906:	2337      	movs	r3, #55	@ 0x37
 8005908:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800590e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005914:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	2200      	movs	r2, #0
 800591a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800591c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591e:	3304      	adds	r3, #4
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff f976 	bl	8004c12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	3318      	adds	r3, #24
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff f971 	bl	8004c12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005934:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005938:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005944:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	2200      	movs	r2, #0
 800594a:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f001 f90b 	bl	8006b74 <pxPortInitialiseStack>
 800595e:	4602      	mov	r2, r0
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005970:	bf00      	nop
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005980:	f001 f9ec 	bl	8006d5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005984:	4b2d      	ldr	r3, [pc, #180]	@ (8005a3c <prvAddNewTaskToReadyList+0xc4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3301      	adds	r3, #1
 800598a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a3c <prvAddNewTaskToReadyList+0xc4>)
 800598c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800598e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a40 <prvAddNewTaskToReadyList+0xc8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005996:	4a2a      	ldr	r2, [pc, #168]	@ (8005a40 <prvAddNewTaskToReadyList+0xc8>)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800599c:	4b27      	ldr	r3, [pc, #156]	@ (8005a3c <prvAddNewTaskToReadyList+0xc4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d110      	bne.n	80059c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059a4:	f000 fc22 	bl	80061ec <prvInitialiseTaskLists>
 80059a8:	e00d      	b.n	80059c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059aa:	4b26      	ldr	r3, [pc, #152]	@ (8005a44 <prvAddNewTaskToReadyList+0xcc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059b2:	4b23      	ldr	r3, [pc, #140]	@ (8005a40 <prvAddNewTaskToReadyList+0xc8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d802      	bhi.n	80059c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a40 <prvAddNewTaskToReadyList+0xc8>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059c6:	4b20      	ldr	r3, [pc, #128]	@ (8005a48 <prvAddNewTaskToReadyList+0xd0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a48 <prvAddNewTaskToReadyList+0xd0>)
 80059ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a48 <prvAddNewTaskToReadyList+0xd0>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059dc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a4c <prvAddNewTaskToReadyList+0xd4>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d903      	bls.n	80059ec <prvAddNewTaskToReadyList+0x74>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e8:	4a18      	ldr	r2, [pc, #96]	@ (8005a4c <prvAddNewTaskToReadyList+0xd4>)
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4a15      	ldr	r2, [pc, #84]	@ (8005a50 <prvAddNewTaskToReadyList+0xd8>)
 80059fa:	441a      	add	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7ff f911 	bl	8004c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a08:	f001 f9d8 	bl	8006dbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a44 <prvAddNewTaskToReadyList+0xcc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a14:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <prvAddNewTaskToReadyList+0xc8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d207      	bcs.n	8005a32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a22:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <prvAddNewTaskToReadyList+0xdc>)
 8005a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20001344 	.word	0x20001344
 8005a40:	20000e70 	.word	0x20000e70
 8005a44:	20001350 	.word	0x20001350
 8005a48:	20001360 	.word	0x20001360
 8005a4c:	2000134c 	.word	0x2000134c
 8005a50:	20000e74 	.word	0x20000e74
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d018      	beq.n	8005a9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a6a:	4b14      	ldr	r3, [pc, #80]	@ (8005abc <vTaskDelay+0x64>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <vTaskDelay+0x32>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	60bb      	str	r3, [r7, #8]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a8a:	f000 f883 	bl	8005b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a8e:	2100      	movs	r1, #0
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fcfb 	bl	800648c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a96:	f000 f88b 	bl	8005bb0 <xTaskResumeAll>
 8005a9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d107      	bne.n	8005ab2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005aa2:	4b07      	ldr	r3, [pc, #28]	@ (8005ac0 <vTaskDelay+0x68>)
 8005aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	2000136c 	.word	0x2000136c
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08a      	sub	sp, #40	@ 0x28
 8005ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ad2:	463a      	mov	r2, r7
 8005ad4:	1d39      	adds	r1, r7, #4
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff f848 	bl	8004b70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	9202      	str	r2, [sp, #8]
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	2300      	movs	r3, #0
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2300      	movs	r3, #0
 8005af0:	460a      	mov	r2, r1
 8005af2:	4922      	ldr	r1, [pc, #136]	@ (8005b7c <vTaskStartScheduler+0xb8>)
 8005af4:	4822      	ldr	r0, [pc, #136]	@ (8005b80 <vTaskStartScheduler+0xbc>)
 8005af6:	f7ff fe13 	bl	8005720 <xTaskCreateStatic>
 8005afa:	4603      	mov	r3, r0
 8005afc:	4a21      	ldr	r2, [pc, #132]	@ (8005b84 <vTaskStartScheduler+0xc0>)
 8005afe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b00:	4b20      	ldr	r3, [pc, #128]	@ (8005b84 <vTaskStartScheduler+0xc0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e001      	b.n	8005b12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d102      	bne.n	8005b1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b18:	f000 fd0c 	bl	8006534 <xTimerCreateTimerTask>
 8005b1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d116      	bne.n	8005b52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	613b      	str	r3, [r7, #16]
}
 8005b36:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b38:	4b13      	ldr	r3, [pc, #76]	@ (8005b88 <vTaskStartScheduler+0xc4>)
 8005b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b40:	4b12      	ldr	r3, [pc, #72]	@ (8005b8c <vTaskStartScheduler+0xc8>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005b46:	4b12      	ldr	r3, [pc, #72]	@ (8005b90 <vTaskStartScheduler+0xcc>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b4c:	f001 f894 	bl	8006c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b50:	e00f      	b.n	8005b72 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b58:	d10b      	bne.n	8005b72 <vTaskStartScheduler+0xae>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	60fb      	str	r3, [r7, #12]
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	e7fd      	b.n	8005b6e <vTaskStartScheduler+0xaa>
}
 8005b72:	bf00      	nop
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	0800a0d0 	.word	0x0800a0d0
 8005b80:	080061bd 	.word	0x080061bd
 8005b84:	20001368 	.word	0x20001368
 8005b88:	20001364 	.word	0x20001364
 8005b8c:	20001350 	.word	0x20001350
 8005b90:	20001348 	.word	0x20001348

08005b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b98:	4b04      	ldr	r3, [pc, #16]	@ (8005bac <vTaskSuspendAll+0x18>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	4a03      	ldr	r2, [pc, #12]	@ (8005bac <vTaskSuspendAll+0x18>)
 8005ba0:	6013      	str	r3, [r2, #0]
}
 8005ba2:	bf00      	nop
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	2000136c 	.word	0x2000136c

08005bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bbe:	4b42      	ldr	r3, [pc, #264]	@ (8005cc8 <xTaskResumeAll+0x118>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <xTaskResumeAll+0x2e>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	603b      	str	r3, [r7, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bde:	f001 f8bd 	bl	8006d5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005be2:	4b39      	ldr	r3, [pc, #228]	@ (8005cc8 <xTaskResumeAll+0x118>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	4a37      	ldr	r2, [pc, #220]	@ (8005cc8 <xTaskResumeAll+0x118>)
 8005bea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bec:	4b36      	ldr	r3, [pc, #216]	@ (8005cc8 <xTaskResumeAll+0x118>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d162      	bne.n	8005cba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bf4:	4b35      	ldr	r3, [pc, #212]	@ (8005ccc <xTaskResumeAll+0x11c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d05e      	beq.n	8005cba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bfc:	e02f      	b.n	8005c5e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005bfe:	4b34      	ldr	r3, [pc, #208]	@ (8005cd0 <xTaskResumeAll+0x120>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3318      	adds	r3, #24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff f868 	bl	8004ce0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff f863 	bl	8004ce0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd4 <xTaskResumeAll+0x124>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d903      	bls.n	8005c2e <xTaskResumeAll+0x7e>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd4 <xTaskResumeAll+0x124>)
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a27      	ldr	r2, [pc, #156]	@ (8005cd8 <xTaskResumeAll+0x128>)
 8005c3c:	441a      	add	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f7fe fff0 	bl	8004c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4e:	4b23      	ldr	r3, [pc, #140]	@ (8005cdc <xTaskResumeAll+0x12c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d302      	bcc.n	8005c5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005c58:	4b21      	ldr	r3, [pc, #132]	@ (8005ce0 <xTaskResumeAll+0x130>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd0 <xTaskResumeAll+0x120>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1cb      	bne.n	8005bfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c6c:	f000 fb5c 	bl	8006328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c70:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce4 <xTaskResumeAll+0x134>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d010      	beq.n	8005c9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c7c:	f000 f844 	bl	8005d08 <xTaskIncrementTick>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005c86:	4b16      	ldr	r3, [pc, #88]	@ (8005ce0 <xTaskResumeAll+0x130>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f1      	bne.n	8005c7c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005c98:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <xTaskResumeAll+0x134>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c9e:	4b10      	ldr	r3, [pc, #64]	@ (8005ce0 <xTaskResumeAll+0x130>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005caa:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce8 <xTaskResumeAll+0x138>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cba:	f001 f87f 	bl	8006dbc <vPortExitCritical>

	return xAlreadyYielded;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	2000136c 	.word	0x2000136c
 8005ccc:	20001344 	.word	0x20001344
 8005cd0:	20001304 	.word	0x20001304
 8005cd4:	2000134c 	.word	0x2000134c
 8005cd8:	20000e74 	.word	0x20000e74
 8005cdc:	20000e70 	.word	0x20000e70
 8005ce0:	20001358 	.word	0x20001358
 8005ce4:	20001354 	.word	0x20001354
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cf2:	4b04      	ldr	r3, [pc, #16]	@ (8005d04 <xTaskGetTickCount+0x18>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cf8:	687b      	ldr	r3, [r7, #4]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr
 8005d04:	20001348 	.word	0x20001348

08005d08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d12:	4b52      	ldr	r3, [pc, #328]	@ (8005e5c <xTaskIncrementTick+0x154>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f040 808f 	bne.w	8005e3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d1c:	4b50      	ldr	r3, [pc, #320]	@ (8005e60 <xTaskIncrementTick+0x158>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3301      	adds	r3, #1
 8005d22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d24:	4a4e      	ldr	r2, [pc, #312]	@ (8005e60 <xTaskIncrementTick+0x158>)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d121      	bne.n	8005d74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d30:	4b4c      	ldr	r3, [pc, #304]	@ (8005e64 <xTaskIncrementTick+0x15c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	603b      	str	r3, [r7, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	e7fd      	b.n	8005d4e <xTaskIncrementTick+0x46>
 8005d52:	4b44      	ldr	r3, [pc, #272]	@ (8005e64 <xTaskIncrementTick+0x15c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	4b43      	ldr	r3, [pc, #268]	@ (8005e68 <xTaskIncrementTick+0x160>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a41      	ldr	r2, [pc, #260]	@ (8005e64 <xTaskIncrementTick+0x15c>)
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	4a41      	ldr	r2, [pc, #260]	@ (8005e68 <xTaskIncrementTick+0x160>)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	4b41      	ldr	r3, [pc, #260]	@ (8005e6c <xTaskIncrementTick+0x164>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e6c <xTaskIncrementTick+0x164>)
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	f000 fada 	bl	8006328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d74:	4b3e      	ldr	r3, [pc, #248]	@ (8005e70 <xTaskIncrementTick+0x168>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d34e      	bcc.n	8005e1c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d7e:	4b39      	ldr	r3, [pc, #228]	@ (8005e64 <xTaskIncrementTick+0x15c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <xTaskIncrementTick+0x84>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <xTaskIncrementTick+0x86>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d92:	4b37      	ldr	r3, [pc, #220]	@ (8005e70 <xTaskIncrementTick+0x168>)
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	601a      	str	r2, [r3, #0]
					break;
 8005d9a:	e03f      	b.n	8005e1c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d9c:	4b31      	ldr	r3, [pc, #196]	@ (8005e64 <xTaskIncrementTick+0x15c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d203      	bcs.n	8005dbc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005db4:	4a2e      	ldr	r2, [pc, #184]	@ (8005e70 <xTaskIncrementTick+0x168>)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6013      	str	r3, [r2, #0]
						break;
 8005dba:	e02f      	b.n	8005e1c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe ff8d 	bl	8004ce0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	3318      	adds	r3, #24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe ff84 	bl	8004ce0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ddc:	4b25      	ldr	r3, [pc, #148]	@ (8005e74 <xTaskIncrementTick+0x16c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d903      	bls.n	8005dec <xTaskIncrementTick+0xe4>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	4a22      	ldr	r2, [pc, #136]	@ (8005e74 <xTaskIncrementTick+0x16c>)
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e78 <xTaskIncrementTick+0x170>)
 8005dfa:	441a      	add	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f7fe ff11 	bl	8004c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005e7c <xTaskIncrementTick+0x174>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d3b3      	bcc.n	8005d7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1a:	e7b0      	b.n	8005d7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e1c:	4b17      	ldr	r3, [pc, #92]	@ (8005e7c <xTaskIncrementTick+0x174>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e22:	4915      	ldr	r1, [pc, #84]	@ (8005e78 <xTaskIncrementTick+0x170>)
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d907      	bls.n	8005e44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e004      	b.n	8005e44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e3a:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <xTaskIncrementTick+0x178>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	4a0f      	ldr	r2, [pc, #60]	@ (8005e80 <xTaskIncrementTick+0x178>)
 8005e42:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e44:	4b0f      	ldr	r3, [pc, #60]	@ (8005e84 <xTaskIncrementTick+0x17c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e50:	697b      	ldr	r3, [r7, #20]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	2000136c 	.word	0x2000136c
 8005e60:	20001348 	.word	0x20001348
 8005e64:	200012fc 	.word	0x200012fc
 8005e68:	20001300 	.word	0x20001300
 8005e6c:	2000135c 	.word	0x2000135c
 8005e70:	20001364 	.word	0x20001364
 8005e74:	2000134c 	.word	0x2000134c
 8005e78:	20000e74 	.word	0x20000e74
 8005e7c:	20000e70 	.word	0x20000e70
 8005e80:	20001354 	.word	0x20001354
 8005e84:	20001358 	.word	0x20001358

08005e88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e8e:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <vTaskSwitchContext+0xa8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e96:	4b27      	ldr	r3, [pc, #156]	@ (8005f34 <vTaskSwitchContext+0xac>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e9c:	e042      	b.n	8005f24 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005e9e:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <vTaskSwitchContext+0xac>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ea4:	4b24      	ldr	r3, [pc, #144]	@ (8005f38 <vTaskSwitchContext+0xb0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e011      	b.n	8005ed0 <vTaskSwitchContext+0x48>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10b      	bne.n	8005eca <vTaskSwitchContext+0x42>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	607b      	str	r3, [r7, #4]
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	e7fd      	b.n	8005ec6 <vTaskSwitchContext+0x3e>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	491a      	ldr	r1, [pc, #104]	@ (8005f3c <vTaskSwitchContext+0xb4>)
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0e3      	beq.n	8005eac <vTaskSwitchContext+0x24>
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a13      	ldr	r2, [pc, #76]	@ (8005f3c <vTaskSwitchContext+0xb4>)
 8005ef0:	4413      	add	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	3308      	adds	r3, #8
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d104      	bne.n	8005f14 <vTaskSwitchContext+0x8c>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	4a09      	ldr	r2, [pc, #36]	@ (8005f40 <vTaskSwitchContext+0xb8>)
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4a06      	ldr	r2, [pc, #24]	@ (8005f38 <vTaskSwitchContext+0xb0>)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6013      	str	r3, [r2, #0]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	2000136c 	.word	0x2000136c
 8005f34:	20001358 	.word	0x20001358
 8005f38:	2000134c 	.word	0x2000134c
 8005f3c:	20000e74 	.word	0x20000e74
 8005f40:	20000e70 	.word	0x20000e70

08005f44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f6c:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <vTaskPlaceOnEventList+0x48>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3318      	adds	r3, #24
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fe fe7b 	bl	8004c70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	6838      	ldr	r0, [r7, #0]
 8005f7e:	f000 fa85 	bl	800648c <prvAddCurrentTaskToDelayedList>
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000e70 	.word	0x20000e70

08005f90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10b      	bne.n	8005fba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	617b      	str	r3, [r7, #20]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fba:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3318      	adds	r3, #24
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7fe fe31 	bl	8004c2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	68b8      	ldr	r0, [r7, #8]
 8005fd8:	f000 fa58 	bl	800648c <prvAddCurrentTaskToDelayedList>
	}
 8005fdc:	bf00      	nop
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000e70 	.word	0x20000e70

08005fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	60fb      	str	r3, [r7, #12]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3318      	adds	r3, #24
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe fe60 	bl	8004ce0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006020:	4b1d      	ldr	r3, [pc, #116]	@ (8006098 <xTaskRemoveFromEventList+0xb0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11d      	bne.n	8006064 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	3304      	adds	r3, #4
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe fe57 	bl	8004ce0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006036:	4b19      	ldr	r3, [pc, #100]	@ (800609c <xTaskRemoveFromEventList+0xb4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d903      	bls.n	8006046 <xTaskRemoveFromEventList+0x5e>
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006042:	4a16      	ldr	r2, [pc, #88]	@ (800609c <xTaskRemoveFromEventList+0xb4>)
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4a13      	ldr	r2, [pc, #76]	@ (80060a0 <xTaskRemoveFromEventList+0xb8>)
 8006054:	441a      	add	r2, r3
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	3304      	adds	r3, #4
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f7fe fde4 	bl	8004c2a <vListInsertEnd>
 8006062:	e005      	b.n	8006070 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	3318      	adds	r3, #24
 8006068:	4619      	mov	r1, r3
 800606a:	480e      	ldr	r0, [pc, #56]	@ (80060a4 <xTaskRemoveFromEventList+0xbc>)
 800606c:	f7fe fddd 	bl	8004c2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006074:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <xTaskRemoveFromEventList+0xc0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	429a      	cmp	r2, r3
 800607c:	d905      	bls.n	800608a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800607e:	2301      	movs	r3, #1
 8006080:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006082:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <xTaskRemoveFromEventList+0xc4>)
 8006084:	2201      	movs	r2, #1
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	e001      	b.n	800608e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800608e:	697b      	ldr	r3, [r7, #20]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	2000136c 	.word	0x2000136c
 800609c:	2000134c 	.word	0x2000134c
 80060a0:	20000e74 	.word	0x20000e74
 80060a4:	20001304 	.word	0x20001304
 80060a8:	20000e70 	.word	0x20000e70
 80060ac:	20001358 	.word	0x20001358

080060b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060b8:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <vTaskInternalSetTimeOutState+0x24>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060c0:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <vTaskInternalSetTimeOutState+0x28>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	605a      	str	r2, [r3, #4]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	2000135c 	.word	0x2000135c
 80060d8:	20001348 	.word	0x20001348

080060dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	60fb      	str	r3, [r7, #12]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006122:	f000 fe1b 	bl	8006d5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006126:	4b1d      	ldr	r3, [pc, #116]	@ (800619c <xTaskCheckForTimeOut+0xc0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d102      	bne.n	8006146 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	e023      	b.n	800618e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b15      	ldr	r3, [pc, #84]	@ (80061a0 <xTaskCheckForTimeOut+0xc4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d007      	beq.n	8006162 <xTaskCheckForTimeOut+0x86>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	429a      	cmp	r2, r3
 800615a:	d302      	bcc.n	8006162 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e015      	b.n	800618e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	429a      	cmp	r2, r3
 800616a:	d20b      	bcs.n	8006184 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff ff99 	bl	80060b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e004      	b.n	800618e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800618e:	f000 fe15 	bl	8006dbc <vPortExitCritical>

	return xReturn;
 8006192:	69fb      	ldr	r3, [r7, #28]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20001348 	.word	0x20001348
 80061a0:	2000135c 	.word	0x2000135c

080061a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061a8:	4b03      	ldr	r3, [pc, #12]	@ (80061b8 <vTaskMissedYield+0x14>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
}
 80061ae:	bf00      	nop
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20001358 	.word	0x20001358

080061bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061c4:	f000 f852 	bl	800626c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <prvIdleTask+0x28>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d9f9      	bls.n	80061c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061d0:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <prvIdleTask+0x2c>)
 80061d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061e0:	e7f0      	b.n	80061c4 <prvIdleTask+0x8>
 80061e2:	bf00      	nop
 80061e4:	20000e74 	.word	0x20000e74
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	e00c      	b.n	8006212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4a12      	ldr	r2, [pc, #72]	@ (800624c <prvInitialiseTaskLists+0x60>)
 8006204:	4413      	add	r3, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fce4 	bl	8004bd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3301      	adds	r3, #1
 8006210:	607b      	str	r3, [r7, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b37      	cmp	r3, #55	@ 0x37
 8006216:	d9ef      	bls.n	80061f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006218:	480d      	ldr	r0, [pc, #52]	@ (8006250 <prvInitialiseTaskLists+0x64>)
 800621a:	f7fe fcdb 	bl	8004bd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800621e:	480d      	ldr	r0, [pc, #52]	@ (8006254 <prvInitialiseTaskLists+0x68>)
 8006220:	f7fe fcd8 	bl	8004bd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006224:	480c      	ldr	r0, [pc, #48]	@ (8006258 <prvInitialiseTaskLists+0x6c>)
 8006226:	f7fe fcd5 	bl	8004bd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800622a:	480c      	ldr	r0, [pc, #48]	@ (800625c <prvInitialiseTaskLists+0x70>)
 800622c:	f7fe fcd2 	bl	8004bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006230:	480b      	ldr	r0, [pc, #44]	@ (8006260 <prvInitialiseTaskLists+0x74>)
 8006232:	f7fe fccf 	bl	8004bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006236:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <prvInitialiseTaskLists+0x78>)
 8006238:	4a05      	ldr	r2, [pc, #20]	@ (8006250 <prvInitialiseTaskLists+0x64>)
 800623a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <prvInitialiseTaskLists+0x7c>)
 800623e:	4a05      	ldr	r2, [pc, #20]	@ (8006254 <prvInitialiseTaskLists+0x68>)
 8006240:	601a      	str	r2, [r3, #0]
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000e74 	.word	0x20000e74
 8006250:	200012d4 	.word	0x200012d4
 8006254:	200012e8 	.word	0x200012e8
 8006258:	20001304 	.word	0x20001304
 800625c:	20001318 	.word	0x20001318
 8006260:	20001330 	.word	0x20001330
 8006264:	200012fc 	.word	0x200012fc
 8006268:	20001300 	.word	0x20001300

0800626c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006272:	e019      	b.n	80062a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006274:	f000 fd72 	bl	8006d5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006278:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <prvCheckTasksWaitingTermination+0x50>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fd2b 	bl	8004ce0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <prvCheckTasksWaitingTermination+0x54>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3b01      	subs	r3, #1
 8006290:	4a0b      	ldr	r2, [pc, #44]	@ (80062c0 <prvCheckTasksWaitingTermination+0x54>)
 8006292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006294:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	4a0a      	ldr	r2, [pc, #40]	@ (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 800629c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800629e:	f000 fd8d 	bl	8006dbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f810 	bl	80062c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e1      	bne.n	8006274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20001318 	.word	0x20001318
 80062c0:	20001344 	.word	0x20001344
 80062c4:	2000132c 	.word	0x2000132c

080062c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d108      	bne.n	80062ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 ff06 	bl	80070f0 <vPortFree>
				vPortFree( pxTCB );
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 ff03 	bl	80070f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062ea:	e019      	b.n	8006320 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d103      	bne.n	80062fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fefa 	bl	80070f0 <vPortFree>
	}
 80062fc:	e010      	b.n	8006320 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006304:	2b02      	cmp	r3, #2
 8006306:	d00b      	beq.n	8006320 <prvDeleteTCB+0x58>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	60fb      	str	r3, [r7, #12]
}
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	e7fd      	b.n	800631c <prvDeleteTCB+0x54>
	}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800632e:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <prvResetNextTaskUnblockTime+0x40>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <prvResetNextTaskUnblockTime+0x14>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <prvResetNextTaskUnblockTime+0x16>
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006342:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <prvResetNextTaskUnblockTime+0x44>)
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800634a:	e008      	b.n	800635e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <prvResetNextTaskUnblockTime+0x40>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4a04      	ldr	r2, [pc, #16]	@ (800636c <prvResetNextTaskUnblockTime+0x44>)
 800635c:	6013      	str	r3, [r2, #0]
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr
 8006368:	200012fc 	.word	0x200012fc
 800636c:	20001364 	.word	0x20001364

08006370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006376:	4b0b      	ldr	r3, [pc, #44]	@ (80063a4 <xTaskGetSchedulerState+0x34>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800637e:	2301      	movs	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	e008      	b.n	8006396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006384:	4b08      	ldr	r3, [pc, #32]	@ (80063a8 <xTaskGetSchedulerState+0x38>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800638c:	2302      	movs	r3, #2
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e001      	b.n	8006396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006392:	2300      	movs	r3, #0
 8006394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006396:	687b      	ldr	r3, [r7, #4]
	}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20001350 	.word	0x20001350
 80063a8:	2000136c 	.word	0x2000136c

080063ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d058      	beq.n	8006474 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006480 <xTaskPriorityDisinherit+0xd4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d00b      	beq.n	80063e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	60fb      	str	r3, [r7, #12]
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	e7fd      	b.n	80063e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10b      	bne.n	8006404 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60bb      	str	r3, [r7, #8]
}
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
 8006402:	e7fd      	b.n	8006400 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006408:	1e5a      	subs	r2, r3, #1
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006416:	429a      	cmp	r2, r3
 8006418:	d02c      	beq.n	8006474 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641e:	2b00      	cmp	r3, #0
 8006420:	d128      	bne.n	8006474 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	3304      	adds	r3, #4
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe fc5a 	bl	8004ce0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006438:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006444:	4b0f      	ldr	r3, [pc, #60]	@ (8006484 <xTaskPriorityDisinherit+0xd8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d903      	bls.n	8006454 <xTaskPriorityDisinherit+0xa8>
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	4a0c      	ldr	r2, [pc, #48]	@ (8006484 <xTaskPriorityDisinherit+0xd8>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4a09      	ldr	r2, [pc, #36]	@ (8006488 <xTaskPriorityDisinherit+0xdc>)
 8006462:	441a      	add	r2, r3
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f7fe fbdd 	bl	8004c2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006474:	697b      	ldr	r3, [r7, #20]
	}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000e70 	.word	0x20000e70
 8006484:	2000134c 	.word	0x2000134c
 8006488:	20000e74 	.word	0x20000e74

0800648c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006496:	4b21      	ldr	r3, [pc, #132]	@ (800651c <prvAddCurrentTaskToDelayedList+0x90>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800649c:	4b20      	ldr	r3, [pc, #128]	@ (8006520 <prvAddCurrentTaskToDelayedList+0x94>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fc1c 	bl	8004ce0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d10a      	bne.n	80064c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006520 <prvAddCurrentTaskToDelayedList+0x94>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4819      	ldr	r0, [pc, #100]	@ (8006524 <prvAddCurrentTaskToDelayedList+0x98>)
 80064c0:	f7fe fbb3 	bl	8004c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064c4:	e026      	b.n	8006514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4413      	add	r3, r2
 80064cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064ce:	4b14      	ldr	r3, [pc, #80]	@ (8006520 <prvAddCurrentTaskToDelayedList+0x94>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d209      	bcs.n	80064f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064de:	4b12      	ldr	r3, [pc, #72]	@ (8006528 <prvAddCurrentTaskToDelayedList+0x9c>)
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006520 <prvAddCurrentTaskToDelayedList+0x94>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f7fe fbc0 	bl	8004c70 <vListInsert>
}
 80064f0:	e010      	b.n	8006514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f2:	4b0e      	ldr	r3, [pc, #56]	@ (800652c <prvAddCurrentTaskToDelayedList+0xa0>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006520 <prvAddCurrentTaskToDelayedList+0x94>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4619      	mov	r1, r3
 80064fe:	4610      	mov	r0, r2
 8006500:	f7fe fbb6 	bl	8004c70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006504:	4b0a      	ldr	r3, [pc, #40]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	429a      	cmp	r2, r3
 800650c:	d202      	bcs.n	8006514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800650e:	4a08      	ldr	r2, [pc, #32]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	6013      	str	r3, [r2, #0]
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20001348 	.word	0x20001348
 8006520:	20000e70 	.word	0x20000e70
 8006524:	20001330 	.word	0x20001330
 8006528:	20001300 	.word	0x20001300
 800652c:	200012fc 	.word	0x200012fc
 8006530:	20001364 	.word	0x20001364

08006534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	@ 0x28
 8006538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800653e:	f000 fad9 	bl	8006af4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006542:	4b1d      	ldr	r3, [pc, #116]	@ (80065b8 <xTimerCreateTimerTask+0x84>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d021      	beq.n	800658e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006552:	1d3a      	adds	r2, r7, #4
 8006554:	f107 0108 	add.w	r1, r7, #8
 8006558:	f107 030c 	add.w	r3, r7, #12
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe fb1f 	bl	8004ba0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	9202      	str	r2, [sp, #8]
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	2302      	movs	r3, #2
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	460a      	mov	r2, r1
 8006574:	4911      	ldr	r1, [pc, #68]	@ (80065bc <xTimerCreateTimerTask+0x88>)
 8006576:	4812      	ldr	r0, [pc, #72]	@ (80065c0 <xTimerCreateTimerTask+0x8c>)
 8006578:	f7ff f8d2 	bl	8005720 <xTaskCreateStatic>
 800657c:	4603      	mov	r3, r0
 800657e:	4a11      	ldr	r2, [pc, #68]	@ (80065c4 <xTimerCreateTimerTask+0x90>)
 8006580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006582:	4b10      	ldr	r3, [pc, #64]	@ (80065c4 <xTimerCreateTimerTask+0x90>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800658a:	2301      	movs	r3, #1
 800658c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10b      	bne.n	80065ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	613b      	str	r3, [r7, #16]
}
 80065a6:	bf00      	nop
 80065a8:	bf00      	nop
 80065aa:	e7fd      	b.n	80065a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80065ac:	697b      	ldr	r3, [r7, #20]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	200013a0 	.word	0x200013a0
 80065bc:	0800a0d8 	.word	0x0800a0d8
 80065c0:	080066e9 	.word	0x080066e9
 80065c4:	200013a4 	.word	0x200013a4

080065c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	@ 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10b      	bne.n	80065f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	623b      	str	r3, [r7, #32]
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	e7fd      	b.n	80065f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065f8:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <xTimerGenericCommand+0x98>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02a      	beq.n	8006656 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b05      	cmp	r3, #5
 8006610:	dc18      	bgt.n	8006644 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006612:	f7ff fead 	bl	8006370 <xTaskGetSchedulerState>
 8006616:	4603      	mov	r3, r0
 8006618:	2b02      	cmp	r3, #2
 800661a:	d109      	bne.n	8006630 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800661c:	4b10      	ldr	r3, [pc, #64]	@ (8006660 <xTimerGenericCommand+0x98>)
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	f107 0110 	add.w	r1, r7, #16
 8006624:	2300      	movs	r3, #0
 8006626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006628:	f7fe fc8e 	bl	8004f48 <xQueueGenericSend>
 800662c:	6278      	str	r0, [r7, #36]	@ 0x24
 800662e:	e012      	b.n	8006656 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006630:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <xTimerGenericCommand+0x98>)
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	f107 0110 	add.w	r1, r7, #16
 8006638:	2300      	movs	r3, #0
 800663a:	2200      	movs	r2, #0
 800663c:	f7fe fc84 	bl	8004f48 <xQueueGenericSend>
 8006640:	6278      	str	r0, [r7, #36]	@ 0x24
 8006642:	e008      	b.n	8006656 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006644:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <xTimerGenericCommand+0x98>)
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	f107 0110 	add.w	r1, r7, #16
 800664c:	2300      	movs	r3, #0
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	f7fe fd7c 	bl	800514c <xQueueGenericSendFromISR>
 8006654:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006658:	4618      	mov	r0, r3
 800665a:	3728      	adds	r7, #40	@ 0x28
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	200013a0 	.word	0x200013a0

08006664 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af02      	add	r7, sp, #8
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800666e:	4b1d      	ldr	r3, [pc, #116]	@ (80066e4 <prvProcessExpiredTimer+0x80>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	3304      	adds	r3, #4
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe fb2f 	bl	8004ce0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d123      	bne.n	80066d2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	18d1      	adds	r1, r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	6978      	ldr	r0, [r7, #20]
 8006698:	f000 f8cc 	bl	8006834 <prvInsertTimerInActiveList>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d017      	beq.n	80066d2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066a2:	2300      	movs	r3, #0
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	2300      	movs	r3, #0
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	2100      	movs	r1, #0
 80066ac:	6978      	ldr	r0, [r7, #20]
 80066ae:	f7ff ff8b 	bl	80065c8 <xTimerGenericCommand>
 80066b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	60fb      	str	r3, [r7, #12]
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	e7fd      	b.n	80066ce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	6978      	ldr	r0, [r7, #20]
 80066d8:	4798      	blx	r3
}
 80066da:	bf00      	nop
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20001398 	.word	0x20001398

080066e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066f0:	f107 0308 	add.w	r3, r7, #8
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 f859 	bl	80067ac <prvGetNextExpireTime>
 80066fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4619      	mov	r1, r3
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f805 	bl	8006710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006706:	f000 f8d7 	bl	80068b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800670a:	bf00      	nop
 800670c:	e7f0      	b.n	80066f0 <prvTimerTask+0x8>
	...

08006710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800671a:	f7ff fa3b 	bl	8005b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800671e:	f107 0308 	add.w	r3, r7, #8
 8006722:	4618      	mov	r0, r3
 8006724:	f000 f866 	bl	80067f4 <prvSampleTimeNow>
 8006728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d130      	bne.n	8006792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <prvProcessTimerOrBlockTask+0x3c>
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	429a      	cmp	r2, r3
 800673c:	d806      	bhi.n	800674c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800673e:	f7ff fa37 	bl	8005bb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff ff8d 	bl	8006664 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800674a:	e024      	b.n	8006796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006752:	4b13      	ldr	r3, [pc, #76]	@ (80067a0 <prvProcessTimerOrBlockTask+0x90>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006764:	4b0f      	ldr	r3, [pc, #60]	@ (80067a4 <prvProcessTimerOrBlockTask+0x94>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4619      	mov	r1, r3
 8006772:	f7fe ffa1 	bl	80056b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006776:	f7ff fa1b 	bl	8005bb0 <xTaskResumeAll>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006780:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <prvProcessTimerOrBlockTask+0x98>)
 8006782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
}
 8006790:	e001      	b.n	8006796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006792:	f7ff fa0d 	bl	8005bb0 <xTaskResumeAll>
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	2000139c 	.word	0x2000139c
 80067a4:	200013a0 	.word	0x200013a0
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067b4:	4b0e      	ldr	r3, [pc, #56]	@ (80067f0 <prvGetNextExpireTime+0x44>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d105      	bne.n	80067de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067d2:	4b07      	ldr	r3, [pc, #28]	@ (80067f0 <prvGetNextExpireTime+0x44>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e001      	b.n	80067e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067e2:	68fb      	ldr	r3, [r7, #12]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20001398 	.word	0x20001398

080067f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067fc:	f7ff fa76 	bl	8005cec <xTaskGetTickCount>
 8006800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006802:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <prvSampleTimeNow+0x3c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	429a      	cmp	r2, r3
 800680a:	d205      	bcs.n	8006818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800680c:	f000 f910 	bl	8006a30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e002      	b.n	800681e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800681e:	4a04      	ldr	r2, [pc, #16]	@ (8006830 <prvSampleTimeNow+0x3c>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	200013a8 	.word	0x200013a8

08006834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d812      	bhi.n	8006880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	1ad2      	subs	r2, r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e01b      	b.n	80068a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800686e:	4b10      	ldr	r3, [pc, #64]	@ (80068b0 <prvInsertTimerInActiveList+0x7c>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f7fe f9f9 	bl	8004c70 <vListInsert>
 800687e:	e012      	b.n	80068a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d206      	bcs.n	8006896 <prvInsertTimerInActiveList+0x62>
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d302      	bcc.n	8006896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e007      	b.n	80068a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006896:	4b07      	ldr	r3, [pc, #28]	@ (80068b4 <prvInsertTimerInActiveList+0x80>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3304      	adds	r3, #4
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7fe f9e5 	bl	8004c70 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068a6:	697b      	ldr	r3, [r7, #20]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	2000139c 	.word	0x2000139c
 80068b4:	20001398 	.word	0x20001398

080068b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08e      	sub	sp, #56	@ 0x38
 80068bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068be:	e0a5      	b.n	8006a0c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da19      	bge.n	80068fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	3304      	adds	r3, #4
 80068ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	61fb      	str	r3, [r7, #28]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068f0:	6850      	ldr	r0, [r2, #4]
 80068f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068f4:	6892      	ldr	r2, [r2, #8]
 80068f6:	4611      	mov	r1, r2
 80068f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f2c0 8085 	blt.w	8006a0c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	3304      	adds	r3, #4
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe f9e4 	bl	8004ce0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006918:	463b      	mov	r3, r7
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff ff6a 	bl	80067f4 <prvSampleTimeNow>
 8006920:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b09      	cmp	r3, #9
 8006926:	d86c      	bhi.n	8006a02 <prvProcessReceivedCommands+0x14a>
 8006928:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <prvProcessReceivedCommands+0x78>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006959 	.word	0x08006959
 8006934:	08006959 	.word	0x08006959
 8006938:	08006959 	.word	0x08006959
 800693c:	08006a03 	.word	0x08006a03
 8006940:	080069b7 	.word	0x080069b7
 8006944:	080069f1 	.word	0x080069f1
 8006948:	08006959 	.word	0x08006959
 800694c:	08006959 	.word	0x08006959
 8006950:	08006a03 	.word	0x08006a03
 8006954:	080069b7 	.word	0x080069b7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	18d1      	adds	r1, r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006966:	f7ff ff65 	bl	8006834 <prvInsertTimerInActiveList>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d04a      	beq.n	8006a06 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006976:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d142      	bne.n	8006a06 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	441a      	add	r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	2100      	movs	r1, #0
 8006990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006992:	f7ff fe19 	bl	80065c8 <xTimerGenericCommand>
 8006996:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d133      	bne.n	8006a06 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	61bb      	str	r3, [r7, #24]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <prvProcessReceivedCommands+0x124>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	617b      	str	r3, [r7, #20]
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	699a      	ldr	r2, [r3, #24]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	18d1      	adds	r1, r2, r3
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069ea:	f7ff ff23 	bl	8006834 <prvInsertTimerInActiveList>
					break;
 80069ee:	e00d      	b.n	8006a0c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d107      	bne.n	8006a0a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80069fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069fc:	f000 fb78 	bl	80070f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a00:	e003      	b.n	8006a0a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8006a02:	bf00      	nop
 8006a04:	e002      	b.n	8006a0c <prvProcessReceivedCommands+0x154>
					break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <prvProcessReceivedCommands+0x154>
					break;
 8006a0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a0c:	4b07      	ldr	r3, [pc, #28]	@ (8006a2c <prvProcessReceivedCommands+0x174>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	1d39      	adds	r1, r7, #4
 8006a12:	2200      	movs	r2, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fc35 	bl	8005284 <xQueueReceive>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f47f af4f 	bne.w	80068c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	3730      	adds	r7, #48	@ 0x30
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	200013a0 	.word	0x200013a0

08006a30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a36:	e046      	b.n	8006ac6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a38:	4b2c      	ldr	r3, [pc, #176]	@ (8006aec <prvSwitchTimerLists+0xbc>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a42:	4b2a      	ldr	r3, [pc, #168]	@ (8006aec <prvSwitchTimerLists+0xbc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe f945 	bl	8004ce0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d12f      	bne.n	8006ac6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d90e      	bls.n	8006a96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a84:	4b19      	ldr	r3, [pc, #100]	@ (8006aec <prvSwitchTimerLists+0xbc>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f7fe f8ee 	bl	8004c70 <vListInsert>
 8006a94:	e017      	b.n	8006ac6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a96:	2300      	movs	r3, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff fd91 	bl	80065c8 <xTimerGenericCommand>
 8006aa6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10b      	bne.n	8006ac6 <prvSwitchTimerLists+0x96>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	603b      	str	r3, [r7, #0]
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	e7fd      	b.n	8006ac2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ac6:	4b09      	ldr	r3, [pc, #36]	@ (8006aec <prvSwitchTimerLists+0xbc>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1b3      	bne.n	8006a38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <prvSwitchTimerLists+0xbc>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ad6:	4b06      	ldr	r3, [pc, #24]	@ (8006af0 <prvSwitchTimerLists+0xc0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a04      	ldr	r2, [pc, #16]	@ (8006aec <prvSwitchTimerLists+0xbc>)
 8006adc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ade:	4a04      	ldr	r2, [pc, #16]	@ (8006af0 <prvSwitchTimerLists+0xc0>)
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	6013      	str	r3, [r2, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20001398 	.word	0x20001398
 8006af0:	2000139c 	.word	0x2000139c

08006af4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006afa:	f000 f92f 	bl	8006d5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006afe:	4b15      	ldr	r3, [pc, #84]	@ (8006b54 <prvCheckForValidListAndQueue+0x60>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d120      	bne.n	8006b48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b06:	4814      	ldr	r0, [pc, #80]	@ (8006b58 <prvCheckForValidListAndQueue+0x64>)
 8006b08:	f7fe f864 	bl	8004bd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b0c:	4813      	ldr	r0, [pc, #76]	@ (8006b5c <prvCheckForValidListAndQueue+0x68>)
 8006b0e:	f7fe f861 	bl	8004bd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b12:	4b13      	ldr	r3, [pc, #76]	@ (8006b60 <prvCheckForValidListAndQueue+0x6c>)
 8006b14:	4a10      	ldr	r2, [pc, #64]	@ (8006b58 <prvCheckForValidListAndQueue+0x64>)
 8006b16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b18:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <prvCheckForValidListAndQueue+0x70>)
 8006b1a:	4a10      	ldr	r2, [pc, #64]	@ (8006b5c <prvCheckForValidListAndQueue+0x68>)
 8006b1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4b11      	ldr	r3, [pc, #68]	@ (8006b68 <prvCheckForValidListAndQueue+0x74>)
 8006b24:	4a11      	ldr	r2, [pc, #68]	@ (8006b6c <prvCheckForValidListAndQueue+0x78>)
 8006b26:	2110      	movs	r1, #16
 8006b28:	200a      	movs	r0, #10
 8006b2a:	f7fe f96d 	bl	8004e08 <xQueueGenericCreateStatic>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4a08      	ldr	r2, [pc, #32]	@ (8006b54 <prvCheckForValidListAndQueue+0x60>)
 8006b32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b34:	4b07      	ldr	r3, [pc, #28]	@ (8006b54 <prvCheckForValidListAndQueue+0x60>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b3c:	4b05      	ldr	r3, [pc, #20]	@ (8006b54 <prvCheckForValidListAndQueue+0x60>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	490b      	ldr	r1, [pc, #44]	@ (8006b70 <prvCheckForValidListAndQueue+0x7c>)
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe fd90 	bl	8005668 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b48:	f000 f938 	bl	8006dbc <vPortExitCritical>
}
 8006b4c:	bf00      	nop
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200013a0 	.word	0x200013a0
 8006b58:	20001370 	.word	0x20001370
 8006b5c:	20001384 	.word	0x20001384
 8006b60:	20001398 	.word	0x20001398
 8006b64:	2000139c 	.word	0x2000139c
 8006b68:	2000144c 	.word	0x2000144c
 8006b6c:	200013ac 	.word	0x200013ac
 8006b70:	0800a0e0 	.word	0x0800a0e0

08006b74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3b04      	subs	r3, #4
 8006b84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3b04      	subs	r3, #4
 8006b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f023 0201 	bic.w	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3b04      	subs	r3, #4
 8006ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ba4:	4a08      	ldr	r2, [pc, #32]	@ (8006bc8 <pxPortInitialiseStack+0x54>)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3b14      	subs	r3, #20
 8006bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3b20      	subs	r3, #32
 8006bba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr
 8006bc8:	08006bcd 	.word	0x08006bcd

08006bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bd6:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <prvTaskExitError+0x54>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d00b      	beq.n	8006bf8 <prvTaskExitError+0x2c>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60fb      	str	r3, [r7, #12]
}
 8006bf2:	bf00      	nop
 8006bf4:	bf00      	nop
 8006bf6:	e7fd      	b.n	8006bf4 <prvTaskExitError+0x28>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	60bb      	str	r3, [r7, #8]
}
 8006c0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c0c:	bf00      	nop
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0fc      	beq.n	8006c0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr
 8006c20:	20000014 	.word	0x20000014
	...

08006c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c30:	4b07      	ldr	r3, [pc, #28]	@ (8006c50 <pxCurrentTCBConst2>)
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	6808      	ldr	r0, [r1, #0]
 8006c36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c3a:	f380 8809 	msr	PSP, r0
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f380 8811 	msr	BASEPRI, r0
 8006c4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c4e:	4770      	bx	lr

08006c50 <pxCurrentTCBConst2>:
 8006c50:	20000e70 	.word	0x20000e70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop

08006c58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c58:	4806      	ldr	r0, [pc, #24]	@ (8006c74 <prvPortStartFirstTask+0x1c>)
 8006c5a:	6800      	ldr	r0, [r0, #0]
 8006c5c:	6800      	ldr	r0, [r0, #0]
 8006c5e:	f380 8808 	msr	MSP, r0
 8006c62:	b662      	cpsie	i
 8006c64:	b661      	cpsie	f
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	df00      	svc	0
 8006c70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c72:	bf00      	nop
 8006c74:	e000ed08 	.word	0xe000ed08

08006c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c7e:	4b32      	ldr	r3, [pc, #200]	@ (8006d48 <xPortStartScheduler+0xd0>)
 8006c80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	22ff      	movs	r2, #255	@ 0xff
 8006c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d4c <xPortStartScheduler+0xd4>)
 8006ca4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8006d50 <xPortStartScheduler+0xd8>)
 8006ca8:	2207      	movs	r2, #7
 8006caa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cac:	e009      	b.n	8006cc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cae:	4b28      	ldr	r3, [pc, #160]	@ (8006d50 <xPortStartScheduler+0xd8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	4a26      	ldr	r2, [pc, #152]	@ (8006d50 <xPortStartScheduler+0xd8>)
 8006cb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cca:	2b80      	cmp	r3, #128	@ 0x80
 8006ccc:	d0ef      	beq.n	8006cae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cce:	4b20      	ldr	r3, [pc, #128]	@ (8006d50 <xPortStartScheduler+0xd8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1c3 0307 	rsb	r3, r3, #7
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d00b      	beq.n	8006cf2 <xPortStartScheduler+0x7a>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	60bb      	str	r3, [r7, #8]
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	e7fd      	b.n	8006cee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cf2:	4b17      	ldr	r3, [pc, #92]	@ (8006d50 <xPortStartScheduler+0xd8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	4a15      	ldr	r2, [pc, #84]	@ (8006d50 <xPortStartScheduler+0xd8>)
 8006cfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cfc:	4b14      	ldr	r3, [pc, #80]	@ (8006d50 <xPortStartScheduler+0xd8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d04:	4a12      	ldr	r2, [pc, #72]	@ (8006d50 <xPortStartScheduler+0xd8>)
 8006d06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d10:	4b10      	ldr	r3, [pc, #64]	@ (8006d54 <xPortStartScheduler+0xdc>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a0f      	ldr	r2, [pc, #60]	@ (8006d54 <xPortStartScheduler+0xdc>)
 8006d16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <xPortStartScheduler+0xdc>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a0c      	ldr	r2, [pc, #48]	@ (8006d54 <xPortStartScheduler+0xdc>)
 8006d22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d28:	f000 f8b8 	bl	8006e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d58 <xPortStartScheduler+0xe0>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d32:	f7ff ff91 	bl	8006c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d36:	f7ff f8a7 	bl	8005e88 <vTaskSwitchContext>
	prvTaskExitError();
 8006d3a:	f7ff ff47 	bl	8006bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	e000e400 	.word	0xe000e400
 8006d4c:	2000149c 	.word	0x2000149c
 8006d50:	200014a0 	.word	0x200014a0
 8006d54:	e000ed20 	.word	0xe000ed20
 8006d58:	20000014 	.word	0x20000014

08006d5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	607b      	str	r3, [r7, #4]
}
 8006d74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d76:	4b0f      	ldr	r3, [pc, #60]	@ (8006db4 <vPortEnterCritical+0x58>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006db4 <vPortEnterCritical+0x58>)
 8006d7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d80:	4b0c      	ldr	r3, [pc, #48]	@ (8006db4 <vPortEnterCritical+0x58>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d110      	bne.n	8006daa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <vPortEnterCritical+0x5c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <vPortEnterCritical+0x4e>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	603b      	str	r3, [r7, #0]
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <vPortEnterCritical+0x4a>
	}
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr
 8006db4:	20000014 	.word	0x20000014
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dc2:	4b12      	ldr	r3, [pc, #72]	@ (8006e0c <vPortExitCritical+0x50>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <vPortExitCritical+0x26>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	607b      	str	r3, [r7, #4]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006de2:	4b0a      	ldr	r3, [pc, #40]	@ (8006e0c <vPortExitCritical+0x50>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	4a08      	ldr	r2, [pc, #32]	@ (8006e0c <vPortExitCritical+0x50>)
 8006dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dec:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <vPortExitCritical+0x50>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d105      	bne.n	8006e00 <vPortExitCritical+0x44>
 8006df4:	2300      	movs	r3, #0
 8006df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	f383 8811 	msr	BASEPRI, r3
}
 8006dfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000014 	.word	0x20000014

08006e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e10:	f3ef 8009 	mrs	r0, PSP
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <pxCurrentTCBConst>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e20:	6010      	str	r0, [r2, #0]
 8006e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e2a:	f380 8811 	msr	BASEPRI, r0
 8006e2e:	f7ff f82b 	bl	8005e88 <vTaskSwitchContext>
 8006e32:	f04f 0000 	mov.w	r0, #0
 8006e36:	f380 8811 	msr	BASEPRI, r0
 8006e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e3e:	6819      	ldr	r1, [r3, #0]
 8006e40:	6808      	ldr	r0, [r1, #0]
 8006e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e46:	f380 8809 	msr	PSP, r0
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	4770      	bx	lr

08006e50 <pxCurrentTCBConst>:
 8006e50:	20000e70 	.word	0x20000e70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	607b      	str	r3, [r7, #4]
}
 8006e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e72:	f7fe ff49 	bl	8005d08 <xTaskIncrementTick>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e7c:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <SysTick_Handler+0x40>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	2300      	movs	r3, #0
 8006e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
}
 8006e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ecc <vPortSetupTimerInterrupt+0x30>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eac:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <vPortSetupTimerInterrupt+0x38>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a09      	ldr	r2, [pc, #36]	@ (8006ed8 <vPortSetupTimerInterrupt+0x3c>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	4a08      	ldr	r2, [pc, #32]	@ (8006edc <vPortSetupTimerInterrupt+0x40>)
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ebe:	4b03      	ldr	r3, [pc, #12]	@ (8006ecc <vPortSetupTimerInterrupt+0x30>)
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	601a      	str	r2, [r3, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr
 8006ecc:	e000e010 	.word	0xe000e010
 8006ed0:	e000e018 	.word	0xe000e018
 8006ed4:	20000008 	.word	0x20000008
 8006ed8:	10624dd3 	.word	0x10624dd3
 8006edc:	e000e014 	.word	0xe000e014

08006ee0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ee6:	f3ef 8305 	mrs	r3, IPSR
 8006eea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b0f      	cmp	r3, #15
 8006ef0:	d915      	bls.n	8006f1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ef2:	4a17      	ldr	r2, [pc, #92]	@ (8006f50 <vPortValidateInterruptPriority+0x70>)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006efc:	4b15      	ldr	r3, [pc, #84]	@ (8006f54 <vPortValidateInterruptPriority+0x74>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	7afa      	ldrb	r2, [r7, #11]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d20b      	bcs.n	8006f1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	607b      	str	r3, [r7, #4]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f58 <vPortValidateInterruptPriority+0x78>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <vPortValidateInterruptPriority+0x7c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d90b      	bls.n	8006f46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	603b      	str	r3, [r7, #0]
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	e7fd      	b.n	8006f42 <vPortValidateInterruptPriority+0x62>
	}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr
 8006f50:	e000e3f0 	.word	0xe000e3f0
 8006f54:	2000149c 	.word	0x2000149c
 8006f58:	e000ed0c 	.word	0xe000ed0c
 8006f5c:	200014a0 	.word	0x200014a0

08006f60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	@ 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f6c:	f7fe fe12 	bl	8005b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f70:	4b5a      	ldr	r3, [pc, #360]	@ (80070dc <pvPortMalloc+0x17c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f78:	f000 f916 	bl	80071a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f7c:	4b58      	ldr	r3, [pc, #352]	@ (80070e0 <pvPortMalloc+0x180>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4013      	ands	r3, r2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 8090 	bne.w	80070aa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01e      	beq.n	8006fce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006f90:	2208      	movs	r2, #8
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d015      	beq.n	8006fce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f023 0307 	bic.w	r3, r3, #7
 8006fa8:	3308      	adds	r3, #8
 8006faa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <pvPortMalloc+0x6e>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	617b      	str	r3, [r7, #20]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d06a      	beq.n	80070aa <pvPortMalloc+0x14a>
 8006fd4:	4b43      	ldr	r3, [pc, #268]	@ (80070e4 <pvPortMalloc+0x184>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d865      	bhi.n	80070aa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fde:	4b42      	ldr	r3, [pc, #264]	@ (80070e8 <pvPortMalloc+0x188>)
 8006fe0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fe2:	4b41      	ldr	r3, [pc, #260]	@ (80070e8 <pvPortMalloc+0x188>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fe8:	e004      	b.n	8006ff4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d903      	bls.n	8007006 <pvPortMalloc+0xa6>
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f1      	bne.n	8006fea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007006:	4b35      	ldr	r3, [pc, #212]	@ (80070dc <pvPortMalloc+0x17c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800700c:	429a      	cmp	r2, r3
 800700e:	d04c      	beq.n	80070aa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2208      	movs	r2, #8
 8007016:	4413      	add	r3, r2
 8007018:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	1ad2      	subs	r2, r2, r3
 800702a:	2308      	movs	r3, #8
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	429a      	cmp	r2, r3
 8007030:	d920      	bls.n	8007074 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4413      	add	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <pvPortMalloc+0xfc>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	613b      	str	r3, [r7, #16]
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	e7fd      	b.n	8007058 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800706e:	69b8      	ldr	r0, [r7, #24]
 8007070:	f000 f8fc 	bl	800726c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007074:	4b1b      	ldr	r3, [pc, #108]	@ (80070e4 <pvPortMalloc+0x184>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	4a19      	ldr	r2, [pc, #100]	@ (80070e4 <pvPortMalloc+0x184>)
 8007080:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007082:	4b18      	ldr	r3, [pc, #96]	@ (80070e4 <pvPortMalloc+0x184>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b19      	ldr	r3, [pc, #100]	@ (80070ec <pvPortMalloc+0x18c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d203      	bcs.n	8007096 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800708e:	4b15      	ldr	r3, [pc, #84]	@ (80070e4 <pvPortMalloc+0x184>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a16      	ldr	r2, [pc, #88]	@ (80070ec <pvPortMalloc+0x18c>)
 8007094:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	4b11      	ldr	r3, [pc, #68]	@ (80070e0 <pvPortMalloc+0x180>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	431a      	orrs	r2, r3
 80070a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070aa:	f7fe fd81 	bl	8005bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <pvPortMalloc+0x170>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	60fb      	str	r3, [r7, #12]
}
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	e7fd      	b.n	80070cc <pvPortMalloc+0x16c>
	return pvReturn;
 80070d0:	69fb      	ldr	r3, [r7, #28]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3728      	adds	r7, #40	@ 0x28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	200022bc 	.word	0x200022bc
 80070e0:	200022c8 	.word	0x200022c8
 80070e4:	200022c0 	.word	0x200022c0
 80070e8:	200022b4 	.word	0x200022b4
 80070ec:	200022c4 	.word	0x200022c4

080070f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d04a      	beq.n	8007198 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007102:	2308      	movs	r3, #8
 8007104:	425b      	negs	r3, r3
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4413      	add	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	4b22      	ldr	r3, [pc, #136]	@ (80071a0 <vPortFree+0xb0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4013      	ands	r3, r2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10b      	bne.n	8007136 <vPortFree+0x46>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	60fb      	str	r3, [r7, #12]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <vPortFree+0x66>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60bb      	str	r3, [r7, #8]
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	e7fd      	b.n	8007152 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	4b11      	ldr	r3, [pc, #68]	@ (80071a0 <vPortFree+0xb0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d019      	beq.n	8007198 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d115      	bne.n	8007198 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	4b0b      	ldr	r3, [pc, #44]	@ (80071a0 <vPortFree+0xb0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	43db      	mvns	r3, r3
 8007176:	401a      	ands	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800717c:	f7fe fd0a 	bl	8005b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	4b07      	ldr	r3, [pc, #28]	@ (80071a4 <vPortFree+0xb4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4413      	add	r3, r2
 800718a:	4a06      	ldr	r2, [pc, #24]	@ (80071a4 <vPortFree+0xb4>)
 800718c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800718e:	6938      	ldr	r0, [r7, #16]
 8007190:	f000 f86c 	bl	800726c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007194:	f7fe fd0c 	bl	8005bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	200022c8 	.word	0x200022c8
 80071a4:	200022c0 	.word	0x200022c0

080071a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ae:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80071b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071b4:	4b27      	ldr	r3, [pc, #156]	@ (8007254 <prvHeapInit+0xac>)
 80071b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00c      	beq.n	80071dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3307      	adds	r3, #7
 80071c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007254 <prvHeapInit+0xac>)
 80071d8:	4413      	add	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007258 <prvHeapInit+0xb0>)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007258 <prvHeapInit+0xb0>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	4413      	add	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071f4:	2208      	movs	r2, #8
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0307 	bic.w	r3, r3, #7
 8007202:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a15      	ldr	r2, [pc, #84]	@ (800725c <prvHeapInit+0xb4>)
 8007208:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800720a:	4b14      	ldr	r3, [pc, #80]	@ (800725c <prvHeapInit+0xb4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007212:	4b12      	ldr	r3, [pc, #72]	@ (800725c <prvHeapInit+0xb4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	1ad2      	subs	r2, r2, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007228:	4b0c      	ldr	r3, [pc, #48]	@ (800725c <prvHeapInit+0xb4>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4a0a      	ldr	r2, [pc, #40]	@ (8007260 <prvHeapInit+0xb8>)
 8007236:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	4a09      	ldr	r2, [pc, #36]	@ (8007264 <prvHeapInit+0xbc>)
 800723e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007240:	4b09      	ldr	r3, [pc, #36]	@ (8007268 <prvHeapInit+0xc0>)
 8007242:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007246:	601a      	str	r2, [r3, #0]
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	200014a4 	.word	0x200014a4
 8007258:	200022b4 	.word	0x200022b4
 800725c:	200022bc 	.word	0x200022bc
 8007260:	200022c4 	.word	0x200022c4
 8007264:	200022c0 	.word	0x200022c0
 8007268:	200022c8 	.word	0x200022c8

0800726c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007274:	4b27      	ldr	r3, [pc, #156]	@ (8007314 <prvInsertBlockIntoFreeList+0xa8>)
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e002      	b.n	8007280 <prvInsertBlockIntoFreeList+0x14>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d8f7      	bhi.n	800727a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4413      	add	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	d108      	bne.n	80072ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	441a      	add	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d118      	bne.n	80072f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4b14      	ldr	r3, [pc, #80]	@ (8007318 <prvInsertBlockIntoFreeList+0xac>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d00d      	beq.n	80072ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e008      	b.n	80072fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <prvInsertBlockIntoFreeList+0xac>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e003      	b.n	80072fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d002      	beq.n	800730a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr
 8007314:	200022b4 	.word	0x200022b4
 8007318:	200022bc 	.word	0x200022bc

0800731c <__cvt>:
 800731c:	2b00      	cmp	r3, #0
 800731e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007322:	461d      	mov	r5, r3
 8007324:	bfbb      	ittet	lt
 8007326:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800732a:	461d      	movlt	r5, r3
 800732c:	2300      	movge	r3, #0
 800732e:	232d      	movlt	r3, #45	@ 0x2d
 8007330:	b088      	sub	sp, #32
 8007332:	4614      	mov	r4, r2
 8007334:	bfb8      	it	lt
 8007336:	4614      	movlt	r4, r2
 8007338:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800733a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800733c:	7013      	strb	r3, [r2, #0]
 800733e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007340:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007344:	f023 0820 	bic.w	r8, r3, #32
 8007348:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800734c:	d005      	beq.n	800735a <__cvt+0x3e>
 800734e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007352:	d100      	bne.n	8007356 <__cvt+0x3a>
 8007354:	3601      	adds	r6, #1
 8007356:	2302      	movs	r3, #2
 8007358:	e000      	b.n	800735c <__cvt+0x40>
 800735a:	2303      	movs	r3, #3
 800735c:	aa07      	add	r2, sp, #28
 800735e:	9204      	str	r2, [sp, #16]
 8007360:	aa06      	add	r2, sp, #24
 8007362:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007366:	e9cd 3600 	strd	r3, r6, [sp]
 800736a:	4622      	mov	r2, r4
 800736c:	462b      	mov	r3, r5
 800736e:	f000 fe7b 	bl	8008068 <_dtoa_r>
 8007372:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007376:	4607      	mov	r7, r0
 8007378:	d119      	bne.n	80073ae <__cvt+0x92>
 800737a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800737c:	07db      	lsls	r3, r3, #31
 800737e:	d50e      	bpl.n	800739e <__cvt+0x82>
 8007380:	eb00 0906 	add.w	r9, r0, r6
 8007384:	2200      	movs	r2, #0
 8007386:	2300      	movs	r3, #0
 8007388:	4620      	mov	r0, r4
 800738a:	4629      	mov	r1, r5
 800738c:	f7f9 fb0c 	bl	80009a8 <__aeabi_dcmpeq>
 8007390:	b108      	cbz	r0, 8007396 <__cvt+0x7a>
 8007392:	f8cd 901c 	str.w	r9, [sp, #28]
 8007396:	2230      	movs	r2, #48	@ 0x30
 8007398:	9b07      	ldr	r3, [sp, #28]
 800739a:	454b      	cmp	r3, r9
 800739c:	d31e      	bcc.n	80073dc <__cvt+0xc0>
 800739e:	4638      	mov	r0, r7
 80073a0:	9b07      	ldr	r3, [sp, #28]
 80073a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80073a4:	1bdb      	subs	r3, r3, r7
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	b008      	add	sp, #32
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073b2:	eb00 0906 	add.w	r9, r0, r6
 80073b6:	d1e5      	bne.n	8007384 <__cvt+0x68>
 80073b8:	7803      	ldrb	r3, [r0, #0]
 80073ba:	2b30      	cmp	r3, #48	@ 0x30
 80073bc:	d10a      	bne.n	80073d4 <__cvt+0xb8>
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f9 faef 	bl	80009a8 <__aeabi_dcmpeq>
 80073ca:	b918      	cbnz	r0, 80073d4 <__cvt+0xb8>
 80073cc:	f1c6 0601 	rsb	r6, r6, #1
 80073d0:	f8ca 6000 	str.w	r6, [sl]
 80073d4:	f8da 3000 	ldr.w	r3, [sl]
 80073d8:	4499      	add	r9, r3
 80073da:	e7d3      	b.n	8007384 <__cvt+0x68>
 80073dc:	1c59      	adds	r1, r3, #1
 80073de:	9107      	str	r1, [sp, #28]
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e7d9      	b.n	8007398 <__cvt+0x7c>

080073e4 <__exponent>:
 80073e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e6:	2900      	cmp	r1, #0
 80073e8:	bfb6      	itet	lt
 80073ea:	232d      	movlt	r3, #45	@ 0x2d
 80073ec:	232b      	movge	r3, #43	@ 0x2b
 80073ee:	4249      	neglt	r1, r1
 80073f0:	2909      	cmp	r1, #9
 80073f2:	7002      	strb	r2, [r0, #0]
 80073f4:	7043      	strb	r3, [r0, #1]
 80073f6:	dd29      	ble.n	800744c <__exponent+0x68>
 80073f8:	f10d 0307 	add.w	r3, sp, #7
 80073fc:	461d      	mov	r5, r3
 80073fe:	270a      	movs	r7, #10
 8007400:	fbb1 f6f7 	udiv	r6, r1, r7
 8007404:	461a      	mov	r2, r3
 8007406:	fb07 1416 	mls	r4, r7, r6, r1
 800740a:	3430      	adds	r4, #48	@ 0x30
 800740c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007410:	460c      	mov	r4, r1
 8007412:	2c63      	cmp	r4, #99	@ 0x63
 8007414:	4631      	mov	r1, r6
 8007416:	f103 33ff 	add.w	r3, r3, #4294967295
 800741a:	dcf1      	bgt.n	8007400 <__exponent+0x1c>
 800741c:	3130      	adds	r1, #48	@ 0x30
 800741e:	1e94      	subs	r4, r2, #2
 8007420:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007424:	4623      	mov	r3, r4
 8007426:	1c41      	adds	r1, r0, #1
 8007428:	42ab      	cmp	r3, r5
 800742a:	d30a      	bcc.n	8007442 <__exponent+0x5e>
 800742c:	f10d 0309 	add.w	r3, sp, #9
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	42ac      	cmp	r4, r5
 8007434:	bf88      	it	hi
 8007436:	2300      	movhi	r3, #0
 8007438:	3302      	adds	r3, #2
 800743a:	4403      	add	r3, r0
 800743c:	1a18      	subs	r0, r3, r0
 800743e:	b003      	add	sp, #12
 8007440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007442:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007446:	f801 6f01 	strb.w	r6, [r1, #1]!
 800744a:	e7ed      	b.n	8007428 <__exponent+0x44>
 800744c:	2330      	movs	r3, #48	@ 0x30
 800744e:	3130      	adds	r1, #48	@ 0x30
 8007450:	7083      	strb	r3, [r0, #2]
 8007452:	70c1      	strb	r1, [r0, #3]
 8007454:	1d03      	adds	r3, r0, #4
 8007456:	e7f1      	b.n	800743c <__exponent+0x58>

08007458 <_printf_float>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	b091      	sub	sp, #68	@ 0x44
 800745e:	460c      	mov	r4, r1
 8007460:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007464:	4616      	mov	r6, r2
 8007466:	461f      	mov	r7, r3
 8007468:	4605      	mov	r5, r0
 800746a:	f000 fce1 	bl	8007e30 <_localeconv_r>
 800746e:	6803      	ldr	r3, [r0, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	9308      	str	r3, [sp, #32]
 8007474:	f7f8 fe6c 	bl	8000150 <strlen>
 8007478:	2300      	movs	r3, #0
 800747a:	930e      	str	r3, [sp, #56]	@ 0x38
 800747c:	f8d8 3000 	ldr.w	r3, [r8]
 8007480:	9009      	str	r0, [sp, #36]	@ 0x24
 8007482:	3307      	adds	r3, #7
 8007484:	f023 0307 	bic.w	r3, r3, #7
 8007488:	f103 0208 	add.w	r2, r3, #8
 800748c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007490:	f8d4 b000 	ldr.w	fp, [r4]
 8007494:	f8c8 2000 	str.w	r2, [r8]
 8007498:	e9d3 8900 	ldrd	r8, r9, [r3]
 800749c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80074a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80074a6:	f04f 32ff 	mov.w	r2, #4294967295
 80074aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80074b2:	4b9c      	ldr	r3, [pc, #624]	@ (8007724 <_printf_float+0x2cc>)
 80074b4:	f7f9 faaa 	bl	8000a0c <__aeabi_dcmpun>
 80074b8:	bb70      	cbnz	r0, 8007518 <_printf_float+0xc0>
 80074ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	4b98      	ldr	r3, [pc, #608]	@ (8007724 <_printf_float+0x2cc>)
 80074c4:	f7f9 fa84 	bl	80009d0 <__aeabi_dcmple>
 80074c8:	bb30      	cbnz	r0, 8007518 <_printf_float+0xc0>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	4640      	mov	r0, r8
 80074d0:	4649      	mov	r1, r9
 80074d2:	f7f9 fa73 	bl	80009bc <__aeabi_dcmplt>
 80074d6:	b110      	cbz	r0, 80074de <_printf_float+0x86>
 80074d8:	232d      	movs	r3, #45	@ 0x2d
 80074da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074de:	4a92      	ldr	r2, [pc, #584]	@ (8007728 <_printf_float+0x2d0>)
 80074e0:	4b92      	ldr	r3, [pc, #584]	@ (800772c <_printf_float+0x2d4>)
 80074e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074e6:	bf94      	ite	ls
 80074e8:	4690      	movls	r8, r2
 80074ea:	4698      	movhi	r8, r3
 80074ec:	2303      	movs	r3, #3
 80074ee:	f04f 0900 	mov.w	r9, #0
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	f02b 0304 	bic.w	r3, fp, #4
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	4633      	mov	r3, r6
 80074fc:	4621      	mov	r1, r4
 80074fe:	4628      	mov	r0, r5
 8007500:	9700      	str	r7, [sp, #0]
 8007502:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007504:	f000 f9d4 	bl	80078b0 <_printf_common>
 8007508:	3001      	adds	r0, #1
 800750a:	f040 8090 	bne.w	800762e <_printf_float+0x1d6>
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	b011      	add	sp, #68	@ 0x44
 8007514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007518:	4642      	mov	r2, r8
 800751a:	464b      	mov	r3, r9
 800751c:	4640      	mov	r0, r8
 800751e:	4649      	mov	r1, r9
 8007520:	f7f9 fa74 	bl	8000a0c <__aeabi_dcmpun>
 8007524:	b148      	cbz	r0, 800753a <_printf_float+0xe2>
 8007526:	464b      	mov	r3, r9
 8007528:	2b00      	cmp	r3, #0
 800752a:	bfb8      	it	lt
 800752c:	232d      	movlt	r3, #45	@ 0x2d
 800752e:	4a80      	ldr	r2, [pc, #512]	@ (8007730 <_printf_float+0x2d8>)
 8007530:	bfb8      	it	lt
 8007532:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007536:	4b7f      	ldr	r3, [pc, #508]	@ (8007734 <_printf_float+0x2dc>)
 8007538:	e7d3      	b.n	80074e2 <_printf_float+0x8a>
 800753a:	6863      	ldr	r3, [r4, #4]
 800753c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	d13f      	bne.n	80075c4 <_printf_float+0x16c>
 8007544:	2306      	movs	r3, #6
 8007546:	6063      	str	r3, [r4, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	9206      	str	r2, [sp, #24]
 8007552:	aa0e      	add	r2, sp, #56	@ 0x38
 8007554:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007558:	aa0d      	add	r2, sp, #52	@ 0x34
 800755a:	9203      	str	r2, [sp, #12]
 800755c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007560:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007564:	6863      	ldr	r3, [r4, #4]
 8007566:	4642      	mov	r2, r8
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	4628      	mov	r0, r5
 800756c:	464b      	mov	r3, r9
 800756e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007570:	f7ff fed4 	bl	800731c <__cvt>
 8007574:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007576:	4680      	mov	r8, r0
 8007578:	2947      	cmp	r1, #71	@ 0x47
 800757a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800757c:	d128      	bne.n	80075d0 <_printf_float+0x178>
 800757e:	1cc8      	adds	r0, r1, #3
 8007580:	db02      	blt.n	8007588 <_printf_float+0x130>
 8007582:	6863      	ldr	r3, [r4, #4]
 8007584:	4299      	cmp	r1, r3
 8007586:	dd40      	ble.n	800760a <_printf_float+0x1b2>
 8007588:	f1aa 0a02 	sub.w	sl, sl, #2
 800758c:	fa5f fa8a 	uxtb.w	sl, sl
 8007590:	4652      	mov	r2, sl
 8007592:	3901      	subs	r1, #1
 8007594:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007598:	910d      	str	r1, [sp, #52]	@ 0x34
 800759a:	f7ff ff23 	bl	80073e4 <__exponent>
 800759e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075a0:	4681      	mov	r9, r0
 80075a2:	1813      	adds	r3, r2, r0
 80075a4:	2a01      	cmp	r2, #1
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	dc02      	bgt.n	80075b0 <_printf_float+0x158>
 80075aa:	6822      	ldr	r2, [r4, #0]
 80075ac:	07d2      	lsls	r2, r2, #31
 80075ae:	d501      	bpl.n	80075b4 <_printf_float+0x15c>
 80075b0:	3301      	adds	r3, #1
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d09e      	beq.n	80074fa <_printf_float+0xa2>
 80075bc:	232d      	movs	r3, #45	@ 0x2d
 80075be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c2:	e79a      	b.n	80074fa <_printf_float+0xa2>
 80075c4:	2947      	cmp	r1, #71	@ 0x47
 80075c6:	d1bf      	bne.n	8007548 <_printf_float+0xf0>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1bd      	bne.n	8007548 <_printf_float+0xf0>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e7ba      	b.n	8007546 <_printf_float+0xee>
 80075d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075d4:	d9dc      	bls.n	8007590 <_printf_float+0x138>
 80075d6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075da:	d118      	bne.n	800760e <_printf_float+0x1b6>
 80075dc:	2900      	cmp	r1, #0
 80075de:	6863      	ldr	r3, [r4, #4]
 80075e0:	dd0b      	ble.n	80075fa <_printf_float+0x1a2>
 80075e2:	6121      	str	r1, [r4, #16]
 80075e4:	b913      	cbnz	r3, 80075ec <_printf_float+0x194>
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	07d0      	lsls	r0, r2, #31
 80075ea:	d502      	bpl.n	80075f2 <_printf_float+0x19a>
 80075ec:	3301      	adds	r3, #1
 80075ee:	440b      	add	r3, r1
 80075f0:	6123      	str	r3, [r4, #16]
 80075f2:	f04f 0900 	mov.w	r9, #0
 80075f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075f8:	e7dc      	b.n	80075b4 <_printf_float+0x15c>
 80075fa:	b913      	cbnz	r3, 8007602 <_printf_float+0x1aa>
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	07d2      	lsls	r2, r2, #31
 8007600:	d501      	bpl.n	8007606 <_printf_float+0x1ae>
 8007602:	3302      	adds	r3, #2
 8007604:	e7f4      	b.n	80075f0 <_printf_float+0x198>
 8007606:	2301      	movs	r3, #1
 8007608:	e7f2      	b.n	80075f0 <_printf_float+0x198>
 800760a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800760e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007610:	4299      	cmp	r1, r3
 8007612:	db05      	blt.n	8007620 <_printf_float+0x1c8>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	6121      	str	r1, [r4, #16]
 8007618:	07d8      	lsls	r0, r3, #31
 800761a:	d5ea      	bpl.n	80075f2 <_printf_float+0x19a>
 800761c:	1c4b      	adds	r3, r1, #1
 800761e:	e7e7      	b.n	80075f0 <_printf_float+0x198>
 8007620:	2900      	cmp	r1, #0
 8007622:	bfcc      	ite	gt
 8007624:	2201      	movgt	r2, #1
 8007626:	f1c1 0202 	rsble	r2, r1, #2
 800762a:	4413      	add	r3, r2
 800762c:	e7e0      	b.n	80075f0 <_printf_float+0x198>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	055a      	lsls	r2, r3, #21
 8007632:	d407      	bmi.n	8007644 <_printf_float+0x1ec>
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	4642      	mov	r2, r8
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	d12b      	bne.n	800769a <_printf_float+0x242>
 8007642:	e764      	b.n	800750e <_printf_float+0xb6>
 8007644:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007648:	f240 80dc 	bls.w	8007804 <_printf_float+0x3ac>
 800764c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007650:	2200      	movs	r2, #0
 8007652:	2300      	movs	r3, #0
 8007654:	f7f9 f9a8 	bl	80009a8 <__aeabi_dcmpeq>
 8007658:	2800      	cmp	r0, #0
 800765a:	d033      	beq.n	80076c4 <_printf_float+0x26c>
 800765c:	2301      	movs	r3, #1
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	4a35      	ldr	r2, [pc, #212]	@ (8007738 <_printf_float+0x2e0>)
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f af51 	beq.w	800750e <_printf_float+0xb6>
 800766c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007670:	4543      	cmp	r3, r8
 8007672:	db02      	blt.n	800767a <_printf_float+0x222>
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	07d8      	lsls	r0, r3, #31
 8007678:	d50f      	bpl.n	800769a <_printf_float+0x242>
 800767a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	f43f af42 	beq.w	800750e <_printf_float+0xb6>
 800768a:	f04f 0900 	mov.w	r9, #0
 800768e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007692:	f104 0a1a 	add.w	sl, r4, #26
 8007696:	45c8      	cmp	r8, r9
 8007698:	dc09      	bgt.n	80076ae <_printf_float+0x256>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	079b      	lsls	r3, r3, #30
 800769e:	f100 8102 	bmi.w	80078a6 <_printf_float+0x44e>
 80076a2:	68e0      	ldr	r0, [r4, #12]
 80076a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076a6:	4298      	cmp	r0, r3
 80076a8:	bfb8      	it	lt
 80076aa:	4618      	movlt	r0, r3
 80076ac:	e731      	b.n	8007512 <_printf_float+0xba>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4652      	mov	r2, sl
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b8      	blx	r7
 80076b8:	3001      	adds	r0, #1
 80076ba:	f43f af28 	beq.w	800750e <_printf_float+0xb6>
 80076be:	f109 0901 	add.w	r9, r9, #1
 80076c2:	e7e8      	b.n	8007696 <_printf_float+0x23e>
 80076c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dc38      	bgt.n	800773c <_printf_float+0x2e4>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	4a19      	ldr	r2, [pc, #100]	@ (8007738 <_printf_float+0x2e0>)
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f af1a 	beq.w	800750e <_printf_float+0xb6>
 80076da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80076de:	ea59 0303 	orrs.w	r3, r9, r3
 80076e2:	d102      	bne.n	80076ea <_printf_float+0x292>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	07d9      	lsls	r1, r3, #31
 80076e8:	d5d7      	bpl.n	800769a <_printf_float+0x242>
 80076ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076ee:	4631      	mov	r1, r6
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b8      	blx	r7
 80076f4:	3001      	adds	r0, #1
 80076f6:	f43f af0a 	beq.w	800750e <_printf_float+0xb6>
 80076fa:	f04f 0a00 	mov.w	sl, #0
 80076fe:	f104 0b1a 	add.w	fp, r4, #26
 8007702:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007704:	425b      	negs	r3, r3
 8007706:	4553      	cmp	r3, sl
 8007708:	dc01      	bgt.n	800770e <_printf_float+0x2b6>
 800770a:	464b      	mov	r3, r9
 800770c:	e793      	b.n	8007636 <_printf_float+0x1de>
 800770e:	2301      	movs	r3, #1
 8007710:	465a      	mov	r2, fp
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	f43f aef8 	beq.w	800750e <_printf_float+0xb6>
 800771e:	f10a 0a01 	add.w	sl, sl, #1
 8007722:	e7ee      	b.n	8007702 <_printf_float+0x2aa>
 8007724:	7fefffff 	.word	0x7fefffff
 8007728:	0800af10 	.word	0x0800af10
 800772c:	0800af14 	.word	0x0800af14
 8007730:	0800af18 	.word	0x0800af18
 8007734:	0800af1c 	.word	0x0800af1c
 8007738:	0800af20 	.word	0x0800af20
 800773c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800773e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007742:	4553      	cmp	r3, sl
 8007744:	bfa8      	it	ge
 8007746:	4653      	movge	r3, sl
 8007748:	2b00      	cmp	r3, #0
 800774a:	4699      	mov	r9, r3
 800774c:	dc36      	bgt.n	80077bc <_printf_float+0x364>
 800774e:	f04f 0b00 	mov.w	fp, #0
 8007752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007756:	f104 021a 	add.w	r2, r4, #26
 800775a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800775c:	930a      	str	r3, [sp, #40]	@ 0x28
 800775e:	eba3 0309 	sub.w	r3, r3, r9
 8007762:	455b      	cmp	r3, fp
 8007764:	dc31      	bgt.n	80077ca <_printf_float+0x372>
 8007766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007768:	459a      	cmp	sl, r3
 800776a:	dc3a      	bgt.n	80077e2 <_printf_float+0x38a>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	07da      	lsls	r2, r3, #31
 8007770:	d437      	bmi.n	80077e2 <_printf_float+0x38a>
 8007772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007774:	ebaa 0903 	sub.w	r9, sl, r3
 8007778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800777a:	ebaa 0303 	sub.w	r3, sl, r3
 800777e:	4599      	cmp	r9, r3
 8007780:	bfa8      	it	ge
 8007782:	4699      	movge	r9, r3
 8007784:	f1b9 0f00 	cmp.w	r9, #0
 8007788:	dc33      	bgt.n	80077f2 <_printf_float+0x39a>
 800778a:	f04f 0800 	mov.w	r8, #0
 800778e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007792:	f104 0b1a 	add.w	fp, r4, #26
 8007796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007798:	ebaa 0303 	sub.w	r3, sl, r3
 800779c:	eba3 0309 	sub.w	r3, r3, r9
 80077a0:	4543      	cmp	r3, r8
 80077a2:	f77f af7a 	ble.w	800769a <_printf_float+0x242>
 80077a6:	2301      	movs	r3, #1
 80077a8:	465a      	mov	r2, fp
 80077aa:	4631      	mov	r1, r6
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	f43f aeac 	beq.w	800750e <_printf_float+0xb6>
 80077b6:	f108 0801 	add.w	r8, r8, #1
 80077ba:	e7ec      	b.n	8007796 <_printf_float+0x33e>
 80077bc:	4642      	mov	r2, r8
 80077be:	4631      	mov	r1, r6
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b8      	blx	r7
 80077c4:	3001      	adds	r0, #1
 80077c6:	d1c2      	bne.n	800774e <_printf_float+0x2f6>
 80077c8:	e6a1      	b.n	800750e <_printf_float+0xb6>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4631      	mov	r1, r6
 80077ce:	4628      	mov	r0, r5
 80077d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f ae9a 	beq.w	800750e <_printf_float+0xb6>
 80077da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077dc:	f10b 0b01 	add.w	fp, fp, #1
 80077e0:	e7bb      	b.n	800775a <_printf_float+0x302>
 80077e2:	4631      	mov	r1, r6
 80077e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b8      	blx	r7
 80077ec:	3001      	adds	r0, #1
 80077ee:	d1c0      	bne.n	8007772 <_printf_float+0x31a>
 80077f0:	e68d      	b.n	800750e <_printf_float+0xb6>
 80077f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077f4:	464b      	mov	r3, r9
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	4442      	add	r2, r8
 80077fc:	47b8      	blx	r7
 80077fe:	3001      	adds	r0, #1
 8007800:	d1c3      	bne.n	800778a <_printf_float+0x332>
 8007802:	e684      	b.n	800750e <_printf_float+0xb6>
 8007804:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007808:	f1ba 0f01 	cmp.w	sl, #1
 800780c:	dc01      	bgt.n	8007812 <_printf_float+0x3ba>
 800780e:	07db      	lsls	r3, r3, #31
 8007810:	d536      	bpl.n	8007880 <_printf_float+0x428>
 8007812:	2301      	movs	r3, #1
 8007814:	4642      	mov	r2, r8
 8007816:	4631      	mov	r1, r6
 8007818:	4628      	mov	r0, r5
 800781a:	47b8      	blx	r7
 800781c:	3001      	adds	r0, #1
 800781e:	f43f ae76 	beq.w	800750e <_printf_float+0xb6>
 8007822:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	f43f ae6e 	beq.w	800750e <_printf_float+0xb6>
 8007832:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007836:	2200      	movs	r2, #0
 8007838:	2300      	movs	r3, #0
 800783a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800783e:	f7f9 f8b3 	bl	80009a8 <__aeabi_dcmpeq>
 8007842:	b9c0      	cbnz	r0, 8007876 <_printf_float+0x41e>
 8007844:	4653      	mov	r3, sl
 8007846:	f108 0201 	add.w	r2, r8, #1
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	d10c      	bne.n	800786e <_printf_float+0x416>
 8007854:	e65b      	b.n	800750e <_printf_float+0xb6>
 8007856:	2301      	movs	r3, #1
 8007858:	465a      	mov	r2, fp
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	f43f ae54 	beq.w	800750e <_printf_float+0xb6>
 8007866:	f108 0801 	add.w	r8, r8, #1
 800786a:	45d0      	cmp	r8, sl
 800786c:	dbf3      	blt.n	8007856 <_printf_float+0x3fe>
 800786e:	464b      	mov	r3, r9
 8007870:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007874:	e6e0      	b.n	8007638 <_printf_float+0x1e0>
 8007876:	f04f 0800 	mov.w	r8, #0
 800787a:	f104 0b1a 	add.w	fp, r4, #26
 800787e:	e7f4      	b.n	800786a <_printf_float+0x412>
 8007880:	2301      	movs	r3, #1
 8007882:	4642      	mov	r2, r8
 8007884:	e7e1      	b.n	800784a <_printf_float+0x3f2>
 8007886:	2301      	movs	r3, #1
 8007888:	464a      	mov	r2, r9
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	f43f ae3c 	beq.w	800750e <_printf_float+0xb6>
 8007896:	f108 0801 	add.w	r8, r8, #1
 800789a:	68e3      	ldr	r3, [r4, #12]
 800789c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800789e:	1a5b      	subs	r3, r3, r1
 80078a0:	4543      	cmp	r3, r8
 80078a2:	dcf0      	bgt.n	8007886 <_printf_float+0x42e>
 80078a4:	e6fd      	b.n	80076a2 <_printf_float+0x24a>
 80078a6:	f04f 0800 	mov.w	r8, #0
 80078aa:	f104 0919 	add.w	r9, r4, #25
 80078ae:	e7f4      	b.n	800789a <_printf_float+0x442>

080078b0 <_printf_common>:
 80078b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b4:	4616      	mov	r6, r2
 80078b6:	4698      	mov	r8, r3
 80078b8:	688a      	ldr	r2, [r1, #8]
 80078ba:	690b      	ldr	r3, [r1, #16]
 80078bc:	4607      	mov	r7, r0
 80078be:	4293      	cmp	r3, r2
 80078c0:	bfb8      	it	lt
 80078c2:	4613      	movlt	r3, r2
 80078c4:	6033      	str	r3, [r6, #0]
 80078c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078ca:	460c      	mov	r4, r1
 80078cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078d0:	b10a      	cbz	r2, 80078d6 <_printf_common+0x26>
 80078d2:	3301      	adds	r3, #1
 80078d4:	6033      	str	r3, [r6, #0]
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	0699      	lsls	r1, r3, #26
 80078da:	bf42      	ittt	mi
 80078dc:	6833      	ldrmi	r3, [r6, #0]
 80078de:	3302      	addmi	r3, #2
 80078e0:	6033      	strmi	r3, [r6, #0]
 80078e2:	6825      	ldr	r5, [r4, #0]
 80078e4:	f015 0506 	ands.w	r5, r5, #6
 80078e8:	d106      	bne.n	80078f8 <_printf_common+0x48>
 80078ea:	f104 0a19 	add.w	sl, r4, #25
 80078ee:	68e3      	ldr	r3, [r4, #12]
 80078f0:	6832      	ldr	r2, [r6, #0]
 80078f2:	1a9b      	subs	r3, r3, r2
 80078f4:	42ab      	cmp	r3, r5
 80078f6:	dc2b      	bgt.n	8007950 <_printf_common+0xa0>
 80078f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078fc:	6822      	ldr	r2, [r4, #0]
 80078fe:	3b00      	subs	r3, #0
 8007900:	bf18      	it	ne
 8007902:	2301      	movne	r3, #1
 8007904:	0692      	lsls	r2, r2, #26
 8007906:	d430      	bmi.n	800796a <_printf_common+0xba>
 8007908:	4641      	mov	r1, r8
 800790a:	4638      	mov	r0, r7
 800790c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007910:	47c8      	blx	r9
 8007912:	3001      	adds	r0, #1
 8007914:	d023      	beq.n	800795e <_printf_common+0xae>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	6922      	ldr	r2, [r4, #16]
 800791a:	f003 0306 	and.w	r3, r3, #6
 800791e:	2b04      	cmp	r3, #4
 8007920:	bf14      	ite	ne
 8007922:	2500      	movne	r5, #0
 8007924:	6833      	ldreq	r3, [r6, #0]
 8007926:	f04f 0600 	mov.w	r6, #0
 800792a:	bf08      	it	eq
 800792c:	68e5      	ldreq	r5, [r4, #12]
 800792e:	f104 041a 	add.w	r4, r4, #26
 8007932:	bf08      	it	eq
 8007934:	1aed      	subeq	r5, r5, r3
 8007936:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800793a:	bf08      	it	eq
 800793c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007940:	4293      	cmp	r3, r2
 8007942:	bfc4      	itt	gt
 8007944:	1a9b      	subgt	r3, r3, r2
 8007946:	18ed      	addgt	r5, r5, r3
 8007948:	42b5      	cmp	r5, r6
 800794a:	d11a      	bne.n	8007982 <_printf_common+0xd2>
 800794c:	2000      	movs	r0, #0
 800794e:	e008      	b.n	8007962 <_printf_common+0xb2>
 8007950:	2301      	movs	r3, #1
 8007952:	4652      	mov	r2, sl
 8007954:	4641      	mov	r1, r8
 8007956:	4638      	mov	r0, r7
 8007958:	47c8      	blx	r9
 800795a:	3001      	adds	r0, #1
 800795c:	d103      	bne.n	8007966 <_printf_common+0xb6>
 800795e:	f04f 30ff 	mov.w	r0, #4294967295
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	3501      	adds	r5, #1
 8007968:	e7c1      	b.n	80078ee <_printf_common+0x3e>
 800796a:	2030      	movs	r0, #48	@ 0x30
 800796c:	18e1      	adds	r1, r4, r3
 800796e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007978:	4422      	add	r2, r4
 800797a:	3302      	adds	r3, #2
 800797c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007980:	e7c2      	b.n	8007908 <_printf_common+0x58>
 8007982:	2301      	movs	r3, #1
 8007984:	4622      	mov	r2, r4
 8007986:	4641      	mov	r1, r8
 8007988:	4638      	mov	r0, r7
 800798a:	47c8      	blx	r9
 800798c:	3001      	adds	r0, #1
 800798e:	d0e6      	beq.n	800795e <_printf_common+0xae>
 8007990:	3601      	adds	r6, #1
 8007992:	e7d9      	b.n	8007948 <_printf_common+0x98>

08007994 <_printf_i>:
 8007994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	7e0f      	ldrb	r7, [r1, #24]
 800799a:	4691      	mov	r9, r2
 800799c:	2f78      	cmp	r7, #120	@ 0x78
 800799e:	4680      	mov	r8, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	469a      	mov	sl, r3
 80079a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079aa:	d807      	bhi.n	80079bc <_printf_i+0x28>
 80079ac:	2f62      	cmp	r7, #98	@ 0x62
 80079ae:	d80a      	bhi.n	80079c6 <_printf_i+0x32>
 80079b0:	2f00      	cmp	r7, #0
 80079b2:	f000 80d3 	beq.w	8007b5c <_printf_i+0x1c8>
 80079b6:	2f58      	cmp	r7, #88	@ 0x58
 80079b8:	f000 80ba 	beq.w	8007b30 <_printf_i+0x19c>
 80079bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079c4:	e03a      	b.n	8007a3c <_printf_i+0xa8>
 80079c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079ca:	2b15      	cmp	r3, #21
 80079cc:	d8f6      	bhi.n	80079bc <_printf_i+0x28>
 80079ce:	a101      	add	r1, pc, #4	@ (adr r1, 80079d4 <_printf_i+0x40>)
 80079d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a41 	.word	0x08007a41
 80079dc:	080079bd 	.word	0x080079bd
 80079e0:	080079bd 	.word	0x080079bd
 80079e4:	080079bd 	.word	0x080079bd
 80079e8:	080079bd 	.word	0x080079bd
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	080079bd 	.word	0x080079bd
 80079f4:	080079bd 	.word	0x080079bd
 80079f8:	080079bd 	.word	0x080079bd
 80079fc:	080079bd 	.word	0x080079bd
 8007a00:	08007b43 	.word	0x08007b43
 8007a04:	08007a6b 	.word	0x08007a6b
 8007a08:	08007afd 	.word	0x08007afd
 8007a0c:	080079bd 	.word	0x080079bd
 8007a10:	080079bd 	.word	0x080079bd
 8007a14:	08007b65 	.word	0x08007b65
 8007a18:	080079bd 	.word	0x080079bd
 8007a1c:	08007a6b 	.word	0x08007a6b
 8007a20:	080079bd 	.word	0x080079bd
 8007a24:	080079bd 	.word	0x080079bd
 8007a28:	08007b05 	.word	0x08007b05
 8007a2c:	6833      	ldr	r3, [r6, #0]
 8007a2e:	1d1a      	adds	r2, r3, #4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6032      	str	r2, [r6, #0]
 8007a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e09e      	b.n	8007b7e <_printf_i+0x1ea>
 8007a40:	6833      	ldr	r3, [r6, #0]
 8007a42:	6820      	ldr	r0, [r4, #0]
 8007a44:	1d19      	adds	r1, r3, #4
 8007a46:	6031      	str	r1, [r6, #0]
 8007a48:	0606      	lsls	r6, r0, #24
 8007a4a:	d501      	bpl.n	8007a50 <_printf_i+0xbc>
 8007a4c:	681d      	ldr	r5, [r3, #0]
 8007a4e:	e003      	b.n	8007a58 <_printf_i+0xc4>
 8007a50:	0645      	lsls	r5, r0, #25
 8007a52:	d5fb      	bpl.n	8007a4c <_printf_i+0xb8>
 8007a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	da03      	bge.n	8007a64 <_printf_i+0xd0>
 8007a5c:	232d      	movs	r3, #45	@ 0x2d
 8007a5e:	426d      	negs	r5, r5
 8007a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a64:	230a      	movs	r3, #10
 8007a66:	4859      	ldr	r0, [pc, #356]	@ (8007bcc <_printf_i+0x238>)
 8007a68:	e011      	b.n	8007a8e <_printf_i+0xfa>
 8007a6a:	6821      	ldr	r1, [r4, #0]
 8007a6c:	6833      	ldr	r3, [r6, #0]
 8007a6e:	0608      	lsls	r0, r1, #24
 8007a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a74:	d402      	bmi.n	8007a7c <_printf_i+0xe8>
 8007a76:	0649      	lsls	r1, r1, #25
 8007a78:	bf48      	it	mi
 8007a7a:	b2ad      	uxthmi	r5, r5
 8007a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a7e:	6033      	str	r3, [r6, #0]
 8007a80:	bf14      	ite	ne
 8007a82:	230a      	movne	r3, #10
 8007a84:	2308      	moveq	r3, #8
 8007a86:	4851      	ldr	r0, [pc, #324]	@ (8007bcc <_printf_i+0x238>)
 8007a88:	2100      	movs	r1, #0
 8007a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a8e:	6866      	ldr	r6, [r4, #4]
 8007a90:	2e00      	cmp	r6, #0
 8007a92:	bfa8      	it	ge
 8007a94:	6821      	ldrge	r1, [r4, #0]
 8007a96:	60a6      	str	r6, [r4, #8]
 8007a98:	bfa4      	itt	ge
 8007a9a:	f021 0104 	bicge.w	r1, r1, #4
 8007a9e:	6021      	strge	r1, [r4, #0]
 8007aa0:	b90d      	cbnz	r5, 8007aa6 <_printf_i+0x112>
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	d04b      	beq.n	8007b3e <_printf_i+0x1aa>
 8007aa6:	4616      	mov	r6, r2
 8007aa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007aac:	fb03 5711 	mls	r7, r3, r1, r5
 8007ab0:	5dc7      	ldrb	r7, [r0, r7]
 8007ab2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ab6:	462f      	mov	r7, r5
 8007ab8:	42bb      	cmp	r3, r7
 8007aba:	460d      	mov	r5, r1
 8007abc:	d9f4      	bls.n	8007aa8 <_printf_i+0x114>
 8007abe:	2b08      	cmp	r3, #8
 8007ac0:	d10b      	bne.n	8007ada <_printf_i+0x146>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	07df      	lsls	r7, r3, #31
 8007ac6:	d508      	bpl.n	8007ada <_printf_i+0x146>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	6861      	ldr	r1, [r4, #4]
 8007acc:	4299      	cmp	r1, r3
 8007ace:	bfde      	ittt	le
 8007ad0:	2330      	movle	r3, #48	@ 0x30
 8007ad2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ad6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ada:	1b92      	subs	r2, r2, r6
 8007adc:	6122      	str	r2, [r4, #16]
 8007ade:	464b      	mov	r3, r9
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	f8cd a000 	str.w	sl, [sp]
 8007ae8:	aa03      	add	r2, sp, #12
 8007aea:	f7ff fee1 	bl	80078b0 <_printf_common>
 8007aee:	3001      	adds	r0, #1
 8007af0:	d14a      	bne.n	8007b88 <_printf_i+0x1f4>
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	b004      	add	sp, #16
 8007af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	f043 0320 	orr.w	r3, r3, #32
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	2778      	movs	r7, #120	@ 0x78
 8007b06:	4832      	ldr	r0, [pc, #200]	@ (8007bd0 <_printf_i+0x23c>)
 8007b08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	6831      	ldr	r1, [r6, #0]
 8007b10:	061f      	lsls	r7, r3, #24
 8007b12:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b16:	d402      	bmi.n	8007b1e <_printf_i+0x18a>
 8007b18:	065f      	lsls	r7, r3, #25
 8007b1a:	bf48      	it	mi
 8007b1c:	b2ad      	uxthmi	r5, r5
 8007b1e:	6031      	str	r1, [r6, #0]
 8007b20:	07d9      	lsls	r1, r3, #31
 8007b22:	bf44      	itt	mi
 8007b24:	f043 0320 	orrmi.w	r3, r3, #32
 8007b28:	6023      	strmi	r3, [r4, #0]
 8007b2a:	b11d      	cbz	r5, 8007b34 <_printf_i+0x1a0>
 8007b2c:	2310      	movs	r3, #16
 8007b2e:	e7ab      	b.n	8007a88 <_printf_i+0xf4>
 8007b30:	4826      	ldr	r0, [pc, #152]	@ (8007bcc <_printf_i+0x238>)
 8007b32:	e7e9      	b.n	8007b08 <_printf_i+0x174>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	f023 0320 	bic.w	r3, r3, #32
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	e7f6      	b.n	8007b2c <_printf_i+0x198>
 8007b3e:	4616      	mov	r6, r2
 8007b40:	e7bd      	b.n	8007abe <_printf_i+0x12a>
 8007b42:	6833      	ldr	r3, [r6, #0]
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1d18      	adds	r0, r3, #4
 8007b48:	6961      	ldr	r1, [r4, #20]
 8007b4a:	6030      	str	r0, [r6, #0]
 8007b4c:	062e      	lsls	r6, r5, #24
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	d501      	bpl.n	8007b56 <_printf_i+0x1c2>
 8007b52:	6019      	str	r1, [r3, #0]
 8007b54:	e002      	b.n	8007b5c <_printf_i+0x1c8>
 8007b56:	0668      	lsls	r0, r5, #25
 8007b58:	d5fb      	bpl.n	8007b52 <_printf_i+0x1be>
 8007b5a:	8019      	strh	r1, [r3, #0]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4616      	mov	r6, r2
 8007b60:	6123      	str	r3, [r4, #16]
 8007b62:	e7bc      	b.n	8007ade <_printf_i+0x14a>
 8007b64:	6833      	ldr	r3, [r6, #0]
 8007b66:	2100      	movs	r1, #0
 8007b68:	1d1a      	adds	r2, r3, #4
 8007b6a:	6032      	str	r2, [r6, #0]
 8007b6c:	681e      	ldr	r6, [r3, #0]
 8007b6e:	6862      	ldr	r2, [r4, #4]
 8007b70:	4630      	mov	r0, r6
 8007b72:	f000 f9d4 	bl	8007f1e <memchr>
 8007b76:	b108      	cbz	r0, 8007b7c <_printf_i+0x1e8>
 8007b78:	1b80      	subs	r0, r0, r6
 8007b7a:	6060      	str	r0, [r4, #4]
 8007b7c:	6863      	ldr	r3, [r4, #4]
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	2300      	movs	r3, #0
 8007b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b86:	e7aa      	b.n	8007ade <_printf_i+0x14a>
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	6923      	ldr	r3, [r4, #16]
 8007b90:	47d0      	blx	sl
 8007b92:	3001      	adds	r0, #1
 8007b94:	d0ad      	beq.n	8007af2 <_printf_i+0x15e>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	079b      	lsls	r3, r3, #30
 8007b9a:	d413      	bmi.n	8007bc4 <_printf_i+0x230>
 8007b9c:	68e0      	ldr	r0, [r4, #12]
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	4298      	cmp	r0, r3
 8007ba2:	bfb8      	it	lt
 8007ba4:	4618      	movlt	r0, r3
 8007ba6:	e7a6      	b.n	8007af6 <_printf_i+0x162>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	4632      	mov	r2, r6
 8007bac:	4649      	mov	r1, r9
 8007bae:	4640      	mov	r0, r8
 8007bb0:	47d0      	blx	sl
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d09d      	beq.n	8007af2 <_printf_i+0x15e>
 8007bb6:	3501      	adds	r5, #1
 8007bb8:	68e3      	ldr	r3, [r4, #12]
 8007bba:	9903      	ldr	r1, [sp, #12]
 8007bbc:	1a5b      	subs	r3, r3, r1
 8007bbe:	42ab      	cmp	r3, r5
 8007bc0:	dcf2      	bgt.n	8007ba8 <_printf_i+0x214>
 8007bc2:	e7eb      	b.n	8007b9c <_printf_i+0x208>
 8007bc4:	2500      	movs	r5, #0
 8007bc6:	f104 0619 	add.w	r6, r4, #25
 8007bca:	e7f5      	b.n	8007bb8 <_printf_i+0x224>
 8007bcc:	0800af22 	.word	0x0800af22
 8007bd0:	0800af33 	.word	0x0800af33

08007bd4 <std>:
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	4604      	mov	r4, r0
 8007bda:	e9c0 3300 	strd	r3, r3, [r0]
 8007bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007be2:	6083      	str	r3, [r0, #8]
 8007be4:	8181      	strh	r1, [r0, #12]
 8007be6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007be8:	81c2      	strh	r2, [r0, #14]
 8007bea:	6183      	str	r3, [r0, #24]
 8007bec:	4619      	mov	r1, r3
 8007bee:	2208      	movs	r2, #8
 8007bf0:	305c      	adds	r0, #92	@ 0x5c
 8007bf2:	f000 f914 	bl	8007e1e <memset>
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c2c <std+0x58>)
 8007bf8:	6224      	str	r4, [r4, #32]
 8007bfa:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c30 <std+0x5c>)
 8007bfe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c00:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <std+0x60>)
 8007c02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c04:	4b0c      	ldr	r3, [pc, #48]	@ (8007c38 <std+0x64>)
 8007c06:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c08:	4b0c      	ldr	r3, [pc, #48]	@ (8007c3c <std+0x68>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d006      	beq.n	8007c1c <std+0x48>
 8007c0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c12:	4294      	cmp	r4, r2
 8007c14:	d002      	beq.n	8007c1c <std+0x48>
 8007c16:	33d0      	adds	r3, #208	@ 0xd0
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	d105      	bne.n	8007c28 <std+0x54>
 8007c1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c24:	f000 b978 	b.w	8007f18 <__retarget_lock_init_recursive>
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	bf00      	nop
 8007c2c:	08007d99 	.word	0x08007d99
 8007c30:	08007dbb 	.word	0x08007dbb
 8007c34:	08007df3 	.word	0x08007df3
 8007c38:	08007e17 	.word	0x08007e17
 8007c3c:	200022cc 	.word	0x200022cc

08007c40 <stdio_exit_handler>:
 8007c40:	4a02      	ldr	r2, [pc, #8]	@ (8007c4c <stdio_exit_handler+0xc>)
 8007c42:	4903      	ldr	r1, [pc, #12]	@ (8007c50 <stdio_exit_handler+0x10>)
 8007c44:	4803      	ldr	r0, [pc, #12]	@ (8007c54 <stdio_exit_handler+0x14>)
 8007c46:	f000 b869 	b.w	8007d1c <_fwalk_sglue>
 8007c4a:	bf00      	nop
 8007c4c:	20000018 	.word	0x20000018
 8007c50:	080098a5 	.word	0x080098a5
 8007c54:	20000028 	.word	0x20000028

08007c58 <cleanup_stdio>:
 8007c58:	6841      	ldr	r1, [r0, #4]
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <cleanup_stdio+0x34>)
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	4604      	mov	r4, r0
 8007c62:	d001      	beq.n	8007c68 <cleanup_stdio+0x10>
 8007c64:	f001 fe1e 	bl	80098a4 <_fflush_r>
 8007c68:	68a1      	ldr	r1, [r4, #8]
 8007c6a:	4b09      	ldr	r3, [pc, #36]	@ (8007c90 <cleanup_stdio+0x38>)
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	d002      	beq.n	8007c76 <cleanup_stdio+0x1e>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f001 fe17 	bl	80098a4 <_fflush_r>
 8007c76:	68e1      	ldr	r1, [r4, #12]
 8007c78:	4b06      	ldr	r3, [pc, #24]	@ (8007c94 <cleanup_stdio+0x3c>)
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	d004      	beq.n	8007c88 <cleanup_stdio+0x30>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c84:	f001 be0e 	b.w	80098a4 <_fflush_r>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200022cc 	.word	0x200022cc
 8007c90:	20002334 	.word	0x20002334
 8007c94:	2000239c 	.word	0x2000239c

08007c98 <global_stdio_init.part.0>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc8 <global_stdio_init.part.0+0x30>)
 8007c9c:	4c0b      	ldr	r4, [pc, #44]	@ (8007ccc <global_stdio_init.part.0+0x34>)
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8007cd0 <global_stdio_init.part.0+0x38>)
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	2104      	movs	r1, #4
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f7ff ff94 	bl	8007bd4 <std>
 8007cac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	2109      	movs	r1, #9
 8007cb4:	f7ff ff8e 	bl	8007bd4 <std>
 8007cb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc2:	2112      	movs	r1, #18
 8007cc4:	f7ff bf86 	b.w	8007bd4 <std>
 8007cc8:	20002404 	.word	0x20002404
 8007ccc:	200022cc 	.word	0x200022cc
 8007cd0:	08007c41 	.word	0x08007c41

08007cd4 <__sfp_lock_acquire>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	@ (8007cdc <__sfp_lock_acquire+0x8>)
 8007cd6:	f000 b920 	b.w	8007f1a <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	2000240d 	.word	0x2000240d

08007ce0 <__sfp_lock_release>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	@ (8007ce8 <__sfp_lock_release+0x8>)
 8007ce2:	f000 b91b 	b.w	8007f1c <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	2000240d 	.word	0x2000240d

08007cec <__sinit>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	4604      	mov	r4, r0
 8007cf0:	f7ff fff0 	bl	8007cd4 <__sfp_lock_acquire>
 8007cf4:	6a23      	ldr	r3, [r4, #32]
 8007cf6:	b11b      	cbz	r3, 8007d00 <__sinit+0x14>
 8007cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfc:	f7ff bff0 	b.w	8007ce0 <__sfp_lock_release>
 8007d00:	4b04      	ldr	r3, [pc, #16]	@ (8007d14 <__sinit+0x28>)
 8007d02:	6223      	str	r3, [r4, #32]
 8007d04:	4b04      	ldr	r3, [pc, #16]	@ (8007d18 <__sinit+0x2c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f5      	bne.n	8007cf8 <__sinit+0xc>
 8007d0c:	f7ff ffc4 	bl	8007c98 <global_stdio_init.part.0>
 8007d10:	e7f2      	b.n	8007cf8 <__sinit+0xc>
 8007d12:	bf00      	nop
 8007d14:	08007c59 	.word	0x08007c59
 8007d18:	20002404 	.word	0x20002404

08007d1c <_fwalk_sglue>:
 8007d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	4607      	mov	r7, r0
 8007d22:	4688      	mov	r8, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	2600      	movs	r6, #0
 8007d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007d30:	d505      	bpl.n	8007d3e <_fwalk_sglue+0x22>
 8007d32:	6824      	ldr	r4, [r4, #0]
 8007d34:	2c00      	cmp	r4, #0
 8007d36:	d1f7      	bne.n	8007d28 <_fwalk_sglue+0xc>
 8007d38:	4630      	mov	r0, r6
 8007d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d907      	bls.n	8007d54 <_fwalk_sglue+0x38>
 8007d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	d003      	beq.n	8007d54 <_fwalk_sglue+0x38>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4638      	mov	r0, r7
 8007d50:	47c0      	blx	r8
 8007d52:	4306      	orrs	r6, r0
 8007d54:	3568      	adds	r5, #104	@ 0x68
 8007d56:	e7e9      	b.n	8007d2c <_fwalk_sglue+0x10>

08007d58 <siprintf>:
 8007d58:	b40e      	push	{r1, r2, r3}
 8007d5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d5e:	b500      	push	{lr}
 8007d60:	b09c      	sub	sp, #112	@ 0x70
 8007d62:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d64:	9002      	str	r0, [sp, #8]
 8007d66:	9006      	str	r0, [sp, #24]
 8007d68:	9107      	str	r1, [sp, #28]
 8007d6a:	9104      	str	r1, [sp, #16]
 8007d6c:	4808      	ldr	r0, [pc, #32]	@ (8007d90 <siprintf+0x38>)
 8007d6e:	4909      	ldr	r1, [pc, #36]	@ (8007d94 <siprintf+0x3c>)
 8007d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d74:	9105      	str	r1, [sp, #20]
 8007d76:	6800      	ldr	r0, [r0, #0]
 8007d78:	a902      	add	r1, sp, #8
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	f001 fc16 	bl	80095ac <_svfiprintf_r>
 8007d80:	2200      	movs	r2, #0
 8007d82:	9b02      	ldr	r3, [sp, #8]
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	b01c      	add	sp, #112	@ 0x70
 8007d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d8c:	b003      	add	sp, #12
 8007d8e:	4770      	bx	lr
 8007d90:	20000024 	.word	0x20000024
 8007d94:	ffff0208 	.word	0xffff0208

08007d98 <__sread>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da0:	f000 f86c 	bl	8007e7c <_read_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	bfab      	itete	ge
 8007da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007daa:	89a3      	ldrhlt	r3, [r4, #12]
 8007dac:	181b      	addge	r3, r3, r0
 8007dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007db2:	bfac      	ite	ge
 8007db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007db6:	81a3      	strhlt	r3, [r4, #12]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__swrite>:
 8007dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	898b      	ldrh	r3, [r1, #12]
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	05db      	lsls	r3, r3, #23
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4616      	mov	r6, r2
 8007dca:	d505      	bpl.n	8007dd8 <__swrite+0x1e>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd4:	f000 f840 	bl	8007e58 <_lseek_r>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	4632      	mov	r2, r6
 8007ddc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	4628      	mov	r0, r5
 8007de4:	463b      	mov	r3, r7
 8007de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	f000 b857 	b.w	8007ea0 <_write_r>

08007df2 <__sseek>:
 8007df2:	b510      	push	{r4, lr}
 8007df4:	460c      	mov	r4, r1
 8007df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfa:	f000 f82d 	bl	8007e58 <_lseek_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	bf15      	itete	ne
 8007e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e0e:	81a3      	strheq	r3, [r4, #12]
 8007e10:	bf18      	it	ne
 8007e12:	81a3      	strhne	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__sclose>:
 8007e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1a:	f000 b80d 	b.w	8007e38 <_close_r>

08007e1e <memset>:
 8007e1e:	4603      	mov	r3, r0
 8007e20:	4402      	add	r2, r0
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d100      	bne.n	8007e28 <memset+0xa>
 8007e26:	4770      	bx	lr
 8007e28:	f803 1b01 	strb.w	r1, [r3], #1
 8007e2c:	e7f9      	b.n	8007e22 <memset+0x4>
	...

08007e30 <_localeconv_r>:
 8007e30:	4800      	ldr	r0, [pc, #0]	@ (8007e34 <_localeconv_r+0x4>)
 8007e32:	4770      	bx	lr
 8007e34:	20000164 	.word	0x20000164

08007e38 <_close_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4d05      	ldr	r5, [pc, #20]	@ (8007e54 <_close_r+0x1c>)
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	f7f9 fda5 	bl	8001992 <_close>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_close_r+0x1a>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_close_r+0x1a>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20002408 	.word	0x20002408

08007e58 <_lseek_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	4611      	mov	r1, r2
 8007e60:	2200      	movs	r2, #0
 8007e62:	4d05      	ldr	r5, [pc, #20]	@ (8007e78 <_lseek_r+0x20>)
 8007e64:	602a      	str	r2, [r5, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f7f9 fdb7 	bl	80019da <_lseek>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_lseek_r+0x1e>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_lseek_r+0x1e>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	20002408 	.word	0x20002408

08007e7c <_read_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	2200      	movs	r2, #0
 8007e86:	4d05      	ldr	r5, [pc, #20]	@ (8007e9c <_read_r+0x20>)
 8007e88:	602a      	str	r2, [r5, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f7f9 fd48 	bl	8001920 <_read>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_read_r+0x1e>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_read_r+0x1e>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20002408 	.word	0x20002408

08007ea0 <_write_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4d05      	ldr	r5, [pc, #20]	@ (8007ec0 <_write_r+0x20>)
 8007eac:	602a      	str	r2, [r5, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f7f9 fd53 	bl	800195a <_write>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_write_r+0x1e>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_write_r+0x1e>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	20002408 	.word	0x20002408

08007ec4 <__errno>:
 8007ec4:	4b01      	ldr	r3, [pc, #4]	@ (8007ecc <__errno+0x8>)
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	20000024 	.word	0x20000024

08007ed0 <__libc_init_array>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	2600      	movs	r6, #0
 8007ed4:	4d0c      	ldr	r5, [pc, #48]	@ (8007f08 <__libc_init_array+0x38>)
 8007ed6:	4c0d      	ldr	r4, [pc, #52]	@ (8007f0c <__libc_init_array+0x3c>)
 8007ed8:	1b64      	subs	r4, r4, r5
 8007eda:	10a4      	asrs	r4, r4, #2
 8007edc:	42a6      	cmp	r6, r4
 8007ede:	d109      	bne.n	8007ef4 <__libc_init_array+0x24>
 8007ee0:	f002 f86e 	bl	8009fc0 <_init>
 8007ee4:	2600      	movs	r6, #0
 8007ee6:	4d0a      	ldr	r5, [pc, #40]	@ (8007f10 <__libc_init_array+0x40>)
 8007ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8007f14 <__libc_init_array+0x44>)
 8007eea:	1b64      	subs	r4, r4, r5
 8007eec:	10a4      	asrs	r4, r4, #2
 8007eee:	42a6      	cmp	r6, r4
 8007ef0:	d105      	bne.n	8007efe <__libc_init_array+0x2e>
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef8:	4798      	blx	r3
 8007efa:	3601      	adds	r6, #1
 8007efc:	e7ee      	b.n	8007edc <__libc_init_array+0xc>
 8007efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f02:	4798      	blx	r3
 8007f04:	3601      	adds	r6, #1
 8007f06:	e7f2      	b.n	8007eee <__libc_init_array+0x1e>
 8007f08:	0800b288 	.word	0x0800b288
 8007f0c:	0800b288 	.word	0x0800b288
 8007f10:	0800b288 	.word	0x0800b288
 8007f14:	0800b28c 	.word	0x0800b28c

08007f18 <__retarget_lock_init_recursive>:
 8007f18:	4770      	bx	lr

08007f1a <__retarget_lock_acquire_recursive>:
 8007f1a:	4770      	bx	lr

08007f1c <__retarget_lock_release_recursive>:
 8007f1c:	4770      	bx	lr

08007f1e <memchr>:
 8007f1e:	4603      	mov	r3, r0
 8007f20:	b510      	push	{r4, lr}
 8007f22:	b2c9      	uxtb	r1, r1
 8007f24:	4402      	add	r2, r0
 8007f26:	4293      	cmp	r3, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	d101      	bne.n	8007f30 <memchr+0x12>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e003      	b.n	8007f38 <memchr+0x1a>
 8007f30:	7804      	ldrb	r4, [r0, #0]
 8007f32:	3301      	adds	r3, #1
 8007f34:	428c      	cmp	r4, r1
 8007f36:	d1f6      	bne.n	8007f26 <memchr+0x8>
 8007f38:	bd10      	pop	{r4, pc}

08007f3a <memcpy>:
 8007f3a:	440a      	add	r2, r1
 8007f3c:	4291      	cmp	r1, r2
 8007f3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f42:	d100      	bne.n	8007f46 <memcpy+0xc>
 8007f44:	4770      	bx	lr
 8007f46:	b510      	push	{r4, lr}
 8007f48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f4c:	4291      	cmp	r1, r2
 8007f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f52:	d1f9      	bne.n	8007f48 <memcpy+0xe>
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <quorem>:
 8007f56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5a:	6903      	ldr	r3, [r0, #16]
 8007f5c:	690c      	ldr	r4, [r1, #16]
 8007f5e:	4607      	mov	r7, r0
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	db7e      	blt.n	8008062 <quorem+0x10c>
 8007f64:	3c01      	subs	r4, #1
 8007f66:	00a3      	lsls	r3, r4, #2
 8007f68:	f100 0514 	add.w	r5, r0, #20
 8007f6c:	f101 0814 	add.w	r8, r1, #20
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f76:	9301      	str	r3, [sp, #4]
 8007f78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f80:	3301      	adds	r3, #1
 8007f82:	429a      	cmp	r2, r3
 8007f84:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f8c:	d32e      	bcc.n	8007fec <quorem+0x96>
 8007f8e:	f04f 0a00 	mov.w	sl, #0
 8007f92:	46c4      	mov	ip, r8
 8007f94:	46ae      	mov	lr, r5
 8007f96:	46d3      	mov	fp, sl
 8007f98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f9c:	b298      	uxth	r0, r3
 8007f9e:	fb06 a000 	mla	r0, r6, r0, sl
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	0c02      	lsrs	r2, r0, #16
 8007fa6:	fb06 2303 	mla	r3, r6, r3, r2
 8007faa:	f8de 2000 	ldr.w	r2, [lr]
 8007fae:	b280      	uxth	r0, r0
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	1a12      	subs	r2, r2, r0
 8007fb4:	445a      	add	r2, fp
 8007fb6:	f8de 0000 	ldr.w	r0, [lr]
 8007fba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007fc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fc8:	b292      	uxth	r2, r2
 8007fca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fce:	45e1      	cmp	r9, ip
 8007fd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fd4:	f84e 2b04 	str.w	r2, [lr], #4
 8007fd8:	d2de      	bcs.n	8007f98 <quorem+0x42>
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	58eb      	ldr	r3, [r5, r3]
 8007fde:	b92b      	cbnz	r3, 8007fec <quorem+0x96>
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	3b04      	subs	r3, #4
 8007fe4:	429d      	cmp	r5, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	d32f      	bcc.n	800804a <quorem+0xf4>
 8007fea:	613c      	str	r4, [r7, #16]
 8007fec:	4638      	mov	r0, r7
 8007fee:	f001 f979 	bl	80092e4 <__mcmp>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	db25      	blt.n	8008042 <quorem+0xec>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ffe:	f8d1 c000 	ldr.w	ip, [r1]
 8008002:	fa1f fe82 	uxth.w	lr, r2
 8008006:	fa1f f38c 	uxth.w	r3, ip
 800800a:	eba3 030e 	sub.w	r3, r3, lr
 800800e:	4403      	add	r3, r0
 8008010:	0c12      	lsrs	r2, r2, #16
 8008012:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008016:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800801a:	b29b      	uxth	r3, r3
 800801c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008020:	45c1      	cmp	r9, r8
 8008022:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008026:	f841 3b04 	str.w	r3, [r1], #4
 800802a:	d2e6      	bcs.n	8007ffa <quorem+0xa4>
 800802c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008030:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008034:	b922      	cbnz	r2, 8008040 <quorem+0xea>
 8008036:	3b04      	subs	r3, #4
 8008038:	429d      	cmp	r5, r3
 800803a:	461a      	mov	r2, r3
 800803c:	d30b      	bcc.n	8008056 <quorem+0x100>
 800803e:	613c      	str	r4, [r7, #16]
 8008040:	3601      	adds	r6, #1
 8008042:	4630      	mov	r0, r6
 8008044:	b003      	add	sp, #12
 8008046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804a:	6812      	ldr	r2, [r2, #0]
 800804c:	3b04      	subs	r3, #4
 800804e:	2a00      	cmp	r2, #0
 8008050:	d1cb      	bne.n	8007fea <quorem+0x94>
 8008052:	3c01      	subs	r4, #1
 8008054:	e7c6      	b.n	8007fe4 <quorem+0x8e>
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	3b04      	subs	r3, #4
 800805a:	2a00      	cmp	r2, #0
 800805c:	d1ef      	bne.n	800803e <quorem+0xe8>
 800805e:	3c01      	subs	r4, #1
 8008060:	e7ea      	b.n	8008038 <quorem+0xe2>
 8008062:	2000      	movs	r0, #0
 8008064:	e7ee      	b.n	8008044 <quorem+0xee>
	...

08008068 <_dtoa_r>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	4614      	mov	r4, r2
 800806e:	461d      	mov	r5, r3
 8008070:	69c7      	ldr	r7, [r0, #28]
 8008072:	b097      	sub	sp, #92	@ 0x5c
 8008074:	4683      	mov	fp, r0
 8008076:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800807a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800807c:	b97f      	cbnz	r7, 800809e <_dtoa_r+0x36>
 800807e:	2010      	movs	r0, #16
 8008080:	f000 fe02 	bl	8008c88 <malloc>
 8008084:	4602      	mov	r2, r0
 8008086:	f8cb 001c 	str.w	r0, [fp, #28]
 800808a:	b920      	cbnz	r0, 8008096 <_dtoa_r+0x2e>
 800808c:	21ef      	movs	r1, #239	@ 0xef
 800808e:	4ba8      	ldr	r3, [pc, #672]	@ (8008330 <_dtoa_r+0x2c8>)
 8008090:	48a8      	ldr	r0, [pc, #672]	@ (8008334 <_dtoa_r+0x2cc>)
 8008092:	f001 fc59 	bl	8009948 <__assert_func>
 8008096:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800809a:	6007      	str	r7, [r0, #0]
 800809c:	60c7      	str	r7, [r0, #12]
 800809e:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	b159      	cbz	r1, 80080be <_dtoa_r+0x56>
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	2301      	movs	r3, #1
 80080aa:	4093      	lsls	r3, r2
 80080ac:	604a      	str	r2, [r1, #4]
 80080ae:	608b      	str	r3, [r1, #8]
 80080b0:	4658      	mov	r0, fp
 80080b2:	f000 fedf 	bl	8008e74 <_Bfree>
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	1e2b      	subs	r3, r5, #0
 80080c0:	bfaf      	iteee	ge
 80080c2:	2300      	movge	r3, #0
 80080c4:	2201      	movlt	r2, #1
 80080c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080ca:	9303      	strlt	r3, [sp, #12]
 80080cc:	bfa8      	it	ge
 80080ce:	6033      	strge	r3, [r6, #0]
 80080d0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80080d4:	4b98      	ldr	r3, [pc, #608]	@ (8008338 <_dtoa_r+0x2d0>)
 80080d6:	bfb8      	it	lt
 80080d8:	6032      	strlt	r2, [r6, #0]
 80080da:	ea33 0308 	bics.w	r3, r3, r8
 80080de:	d112      	bne.n	8008106 <_dtoa_r+0x9e>
 80080e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80080ec:	4323      	orrs	r3, r4
 80080ee:	f000 8550 	beq.w	8008b92 <_dtoa_r+0xb2a>
 80080f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80080f4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800833c <_dtoa_r+0x2d4>
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8552 	beq.w	8008ba2 <_dtoa_r+0xb3a>
 80080fe:	f10a 0303 	add.w	r3, sl, #3
 8008102:	f000 bd4c 	b.w	8008b9e <_dtoa_r+0xb36>
 8008106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800810a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800810e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008112:	2200      	movs	r2, #0
 8008114:	2300      	movs	r3, #0
 8008116:	f7f8 fc47 	bl	80009a8 <__aeabi_dcmpeq>
 800811a:	4607      	mov	r7, r0
 800811c:	b158      	cbz	r0, 8008136 <_dtoa_r+0xce>
 800811e:	2301      	movs	r3, #1
 8008120:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008126:	b113      	cbz	r3, 800812e <_dtoa_r+0xc6>
 8008128:	4b85      	ldr	r3, [pc, #532]	@ (8008340 <_dtoa_r+0x2d8>)
 800812a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008344 <_dtoa_r+0x2dc>
 8008132:	f000 bd36 	b.w	8008ba2 <_dtoa_r+0xb3a>
 8008136:	ab14      	add	r3, sp, #80	@ 0x50
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	ab15      	add	r3, sp, #84	@ 0x54
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	4658      	mov	r0, fp
 8008140:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008144:	f001 f97e 	bl	8009444 <__d2b>
 8008148:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800814c:	4681      	mov	r9, r0
 800814e:	2e00      	cmp	r6, #0
 8008150:	d077      	beq.n	8008242 <_dtoa_r+0x1da>
 8008152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008158:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800815c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008160:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008164:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008168:	9712      	str	r7, [sp, #72]	@ 0x48
 800816a:	4619      	mov	r1, r3
 800816c:	2200      	movs	r2, #0
 800816e:	4b76      	ldr	r3, [pc, #472]	@ (8008348 <_dtoa_r+0x2e0>)
 8008170:	f7f7 fffa 	bl	8000168 <__aeabi_dsub>
 8008174:	a368      	add	r3, pc, #416	@ (adr r3, 8008318 <_dtoa_r+0x2b0>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f7f8 f9ad 	bl	80004d8 <__aeabi_dmul>
 800817e:	a368      	add	r3, pc, #416	@ (adr r3, 8008320 <_dtoa_r+0x2b8>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f7f7 fff2 	bl	800016c <__adddf3>
 8008188:	4604      	mov	r4, r0
 800818a:	4630      	mov	r0, r6
 800818c:	460d      	mov	r5, r1
 800818e:	f7f8 f939 	bl	8000404 <__aeabi_i2d>
 8008192:	a365      	add	r3, pc, #404	@ (adr r3, 8008328 <_dtoa_r+0x2c0>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 f99e 	bl	80004d8 <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4620      	mov	r0, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	f7f7 ffe2 	bl	800016c <__adddf3>
 80081a8:	4604      	mov	r4, r0
 80081aa:	460d      	mov	r5, r1
 80081ac:	f7f8 fc44 	bl	8000a38 <__aeabi_d2iz>
 80081b0:	2200      	movs	r2, #0
 80081b2:	4607      	mov	r7, r0
 80081b4:	2300      	movs	r3, #0
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 fbff 	bl	80009bc <__aeabi_dcmplt>
 80081be:	b140      	cbz	r0, 80081d2 <_dtoa_r+0x16a>
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7f8 f91f 	bl	8000404 <__aeabi_i2d>
 80081c6:	4622      	mov	r2, r4
 80081c8:	462b      	mov	r3, r5
 80081ca:	f7f8 fbed 	bl	80009a8 <__aeabi_dcmpeq>
 80081ce:	b900      	cbnz	r0, 80081d2 <_dtoa_r+0x16a>
 80081d0:	3f01      	subs	r7, #1
 80081d2:	2f16      	cmp	r7, #22
 80081d4:	d853      	bhi.n	800827e <_dtoa_r+0x216>
 80081d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081da:	4b5c      	ldr	r3, [pc, #368]	@ (800834c <_dtoa_r+0x2e4>)
 80081dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	f7f8 fbea 	bl	80009bc <__aeabi_dcmplt>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d04a      	beq.n	8008282 <_dtoa_r+0x21a>
 80081ec:	2300      	movs	r3, #0
 80081ee:	3f01      	subs	r7, #1
 80081f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081f4:	1b9b      	subs	r3, r3, r6
 80081f6:	1e5a      	subs	r2, r3, #1
 80081f8:	bf46      	itte	mi
 80081fa:	f1c3 0801 	rsbmi	r8, r3, #1
 80081fe:	2300      	movmi	r3, #0
 8008200:	f04f 0800 	movpl.w	r8, #0
 8008204:	9209      	str	r2, [sp, #36]	@ 0x24
 8008206:	bf48      	it	mi
 8008208:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800820a:	2f00      	cmp	r7, #0
 800820c:	db3b      	blt.n	8008286 <_dtoa_r+0x21e>
 800820e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008210:	970e      	str	r7, [sp, #56]	@ 0x38
 8008212:	443b      	add	r3, r7
 8008214:	9309      	str	r3, [sp, #36]	@ 0x24
 8008216:	2300      	movs	r3, #0
 8008218:	930a      	str	r3, [sp, #40]	@ 0x28
 800821a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800821c:	2b09      	cmp	r3, #9
 800821e:	d866      	bhi.n	80082ee <_dtoa_r+0x286>
 8008220:	2b05      	cmp	r3, #5
 8008222:	bfc4      	itt	gt
 8008224:	3b04      	subgt	r3, #4
 8008226:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008228:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800822a:	bfc8      	it	gt
 800822c:	2400      	movgt	r4, #0
 800822e:	f1a3 0302 	sub.w	r3, r3, #2
 8008232:	bfd8      	it	le
 8008234:	2401      	movle	r4, #1
 8008236:	2b03      	cmp	r3, #3
 8008238:	d864      	bhi.n	8008304 <_dtoa_r+0x29c>
 800823a:	e8df f003 	tbb	[pc, r3]
 800823e:	382b      	.short	0x382b
 8008240:	5636      	.short	0x5636
 8008242:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008246:	441e      	add	r6, r3
 8008248:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800824c:	2b20      	cmp	r3, #32
 800824e:	bfc1      	itttt	gt
 8008250:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008254:	fa08 f803 	lslgt.w	r8, r8, r3
 8008258:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800825c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008260:	bfd6      	itet	le
 8008262:	f1c3 0320 	rsble	r3, r3, #32
 8008266:	ea48 0003 	orrgt.w	r0, r8, r3
 800826a:	fa04 f003 	lslle.w	r0, r4, r3
 800826e:	f7f8 f8b9 	bl	80003e4 <__aeabi_ui2d>
 8008272:	2201      	movs	r2, #1
 8008274:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008278:	3e01      	subs	r6, #1
 800827a:	9212      	str	r2, [sp, #72]	@ 0x48
 800827c:	e775      	b.n	800816a <_dtoa_r+0x102>
 800827e:	2301      	movs	r3, #1
 8008280:	e7b6      	b.n	80081f0 <_dtoa_r+0x188>
 8008282:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008284:	e7b5      	b.n	80081f2 <_dtoa_r+0x18a>
 8008286:	427b      	negs	r3, r7
 8008288:	930a      	str	r3, [sp, #40]	@ 0x28
 800828a:	2300      	movs	r3, #0
 800828c:	eba8 0807 	sub.w	r8, r8, r7
 8008290:	930e      	str	r3, [sp, #56]	@ 0x38
 8008292:	e7c2      	b.n	800821a <_dtoa_r+0x1b2>
 8008294:	2300      	movs	r3, #0
 8008296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008298:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800829a:	2b00      	cmp	r3, #0
 800829c:	dc35      	bgt.n	800830a <_dtoa_r+0x2a2>
 800829e:	2301      	movs	r3, #1
 80082a0:	461a      	mov	r2, r3
 80082a2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80082a6:	9221      	str	r2, [sp, #132]	@ 0x84
 80082a8:	e00b      	b.n	80082c2 <_dtoa_r+0x25a>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e7f3      	b.n	8008296 <_dtoa_r+0x22e>
 80082ae:	2300      	movs	r3, #0
 80082b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	9308      	str	r3, [sp, #32]
 80082b8:	3301      	adds	r3, #1
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	bfb8      	it	lt
 80082c0:	2301      	movlt	r3, #1
 80082c2:	2100      	movs	r1, #0
 80082c4:	2204      	movs	r2, #4
 80082c6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80082ca:	f102 0514 	add.w	r5, r2, #20
 80082ce:	429d      	cmp	r5, r3
 80082d0:	d91f      	bls.n	8008312 <_dtoa_r+0x2aa>
 80082d2:	6041      	str	r1, [r0, #4]
 80082d4:	4658      	mov	r0, fp
 80082d6:	f000 fd8d 	bl	8008df4 <_Balloc>
 80082da:	4682      	mov	sl, r0
 80082dc:	2800      	cmp	r0, #0
 80082de:	d139      	bne.n	8008354 <_dtoa_r+0x2ec>
 80082e0:	4602      	mov	r2, r0
 80082e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80082e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008350 <_dtoa_r+0x2e8>)
 80082e8:	e6d2      	b.n	8008090 <_dtoa_r+0x28>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e7e0      	b.n	80082b0 <_dtoa_r+0x248>
 80082ee:	2401      	movs	r4, #1
 80082f0:	2300      	movs	r3, #0
 80082f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	2200      	movs	r2, #0
 80082fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008300:	2312      	movs	r3, #18
 8008302:	e7d0      	b.n	80082a6 <_dtoa_r+0x23e>
 8008304:	2301      	movs	r3, #1
 8008306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008308:	e7f5      	b.n	80082f6 <_dtoa_r+0x28e>
 800830a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800830c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008310:	e7d7      	b.n	80082c2 <_dtoa_r+0x25a>
 8008312:	3101      	adds	r1, #1
 8008314:	0052      	lsls	r2, r2, #1
 8008316:	e7d8      	b.n	80082ca <_dtoa_r+0x262>
 8008318:	636f4361 	.word	0x636f4361
 800831c:	3fd287a7 	.word	0x3fd287a7
 8008320:	8b60c8b3 	.word	0x8b60c8b3
 8008324:	3fc68a28 	.word	0x3fc68a28
 8008328:	509f79fb 	.word	0x509f79fb
 800832c:	3fd34413 	.word	0x3fd34413
 8008330:	0800af51 	.word	0x0800af51
 8008334:	0800af68 	.word	0x0800af68
 8008338:	7ff00000 	.word	0x7ff00000
 800833c:	0800af4d 	.word	0x0800af4d
 8008340:	0800af21 	.word	0x0800af21
 8008344:	0800af20 	.word	0x0800af20
 8008348:	3ff80000 	.word	0x3ff80000
 800834c:	0800b060 	.word	0x0800b060
 8008350:	0800afc0 	.word	0x0800afc0
 8008354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008358:	6018      	str	r0, [r3, #0]
 800835a:	9b07      	ldr	r3, [sp, #28]
 800835c:	2b0e      	cmp	r3, #14
 800835e:	f200 80a4 	bhi.w	80084aa <_dtoa_r+0x442>
 8008362:	2c00      	cmp	r4, #0
 8008364:	f000 80a1 	beq.w	80084aa <_dtoa_r+0x442>
 8008368:	2f00      	cmp	r7, #0
 800836a:	dd33      	ble.n	80083d4 <_dtoa_r+0x36c>
 800836c:	4b86      	ldr	r3, [pc, #536]	@ (8008588 <_dtoa_r+0x520>)
 800836e:	f007 020f 	and.w	r2, r7, #15
 8008372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008376:	05f8      	lsls	r0, r7, #23
 8008378:	e9d3 3400 	ldrd	r3, r4, [r3]
 800837c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008380:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008384:	d516      	bpl.n	80083b4 <_dtoa_r+0x34c>
 8008386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800838a:	4b80      	ldr	r3, [pc, #512]	@ (800858c <_dtoa_r+0x524>)
 800838c:	2603      	movs	r6, #3
 800838e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008392:	f7f8 f9cb 	bl	800072c <__aeabi_ddiv>
 8008396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800839a:	f004 040f 	and.w	r4, r4, #15
 800839e:	4d7b      	ldr	r5, [pc, #492]	@ (800858c <_dtoa_r+0x524>)
 80083a0:	b954      	cbnz	r4, 80083b8 <_dtoa_r+0x350>
 80083a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083aa:	f7f8 f9bf 	bl	800072c <__aeabi_ddiv>
 80083ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b2:	e028      	b.n	8008406 <_dtoa_r+0x39e>
 80083b4:	2602      	movs	r6, #2
 80083b6:	e7f2      	b.n	800839e <_dtoa_r+0x336>
 80083b8:	07e1      	lsls	r1, r4, #31
 80083ba:	d508      	bpl.n	80083ce <_dtoa_r+0x366>
 80083bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083c4:	f7f8 f888 	bl	80004d8 <__aeabi_dmul>
 80083c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083cc:	3601      	adds	r6, #1
 80083ce:	1064      	asrs	r4, r4, #1
 80083d0:	3508      	adds	r5, #8
 80083d2:	e7e5      	b.n	80083a0 <_dtoa_r+0x338>
 80083d4:	f000 80d2 	beq.w	800857c <_dtoa_r+0x514>
 80083d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083dc:	427c      	negs	r4, r7
 80083de:	4b6a      	ldr	r3, [pc, #424]	@ (8008588 <_dtoa_r+0x520>)
 80083e0:	f004 020f 	and.w	r2, r4, #15
 80083e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	f7f8 f874 	bl	80004d8 <__aeabi_dmul>
 80083f0:	2602      	movs	r6, #2
 80083f2:	2300      	movs	r3, #0
 80083f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083f8:	4d64      	ldr	r5, [pc, #400]	@ (800858c <_dtoa_r+0x524>)
 80083fa:	1124      	asrs	r4, r4, #4
 80083fc:	2c00      	cmp	r4, #0
 80083fe:	f040 80b2 	bne.w	8008566 <_dtoa_r+0x4fe>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1d3      	bne.n	80083ae <_dtoa_r+0x346>
 8008406:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800840a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 80b7 	beq.w	8008580 <_dtoa_r+0x518>
 8008412:	2200      	movs	r2, #0
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	4b5d      	ldr	r3, [pc, #372]	@ (8008590 <_dtoa_r+0x528>)
 800841a:	f7f8 facf 	bl	80009bc <__aeabi_dcmplt>
 800841e:	2800      	cmp	r0, #0
 8008420:	f000 80ae 	beq.w	8008580 <_dtoa_r+0x518>
 8008424:	9b07      	ldr	r3, [sp, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80aa 	beq.w	8008580 <_dtoa_r+0x518>
 800842c:	9b08      	ldr	r3, [sp, #32]
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd37      	ble.n	80084a2 <_dtoa_r+0x43a>
 8008432:	1e7b      	subs	r3, r7, #1
 8008434:	4620      	mov	r0, r4
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	2200      	movs	r2, #0
 800843a:	4629      	mov	r1, r5
 800843c:	4b55      	ldr	r3, [pc, #340]	@ (8008594 <_dtoa_r+0x52c>)
 800843e:	f7f8 f84b 	bl	80004d8 <__aeabi_dmul>
 8008442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008446:	9c08      	ldr	r4, [sp, #32]
 8008448:	3601      	adds	r6, #1
 800844a:	4630      	mov	r0, r6
 800844c:	f7f7 ffda 	bl	8000404 <__aeabi_i2d>
 8008450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008454:	f7f8 f840 	bl	80004d8 <__aeabi_dmul>
 8008458:	2200      	movs	r2, #0
 800845a:	4b4f      	ldr	r3, [pc, #316]	@ (8008598 <_dtoa_r+0x530>)
 800845c:	f7f7 fe86 	bl	800016c <__adddf3>
 8008460:	4605      	mov	r5, r0
 8008462:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008466:	2c00      	cmp	r4, #0
 8008468:	f040 809a 	bne.w	80085a0 <_dtoa_r+0x538>
 800846c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008470:	2200      	movs	r2, #0
 8008472:	4b4a      	ldr	r3, [pc, #296]	@ (800859c <_dtoa_r+0x534>)
 8008474:	f7f7 fe78 	bl	8000168 <__aeabi_dsub>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008480:	462a      	mov	r2, r5
 8008482:	4633      	mov	r3, r6
 8008484:	f7f8 fab8 	bl	80009f8 <__aeabi_dcmpgt>
 8008488:	2800      	cmp	r0, #0
 800848a:	f040 828e 	bne.w	80089aa <_dtoa_r+0x942>
 800848e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008492:	462a      	mov	r2, r5
 8008494:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008498:	f7f8 fa90 	bl	80009bc <__aeabi_dcmplt>
 800849c:	2800      	cmp	r0, #0
 800849e:	f040 8127 	bne.w	80086f0 <_dtoa_r+0x688>
 80084a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80084a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80084aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f2c0 8163 	blt.w	8008778 <_dtoa_r+0x710>
 80084b2:	2f0e      	cmp	r7, #14
 80084b4:	f300 8160 	bgt.w	8008778 <_dtoa_r+0x710>
 80084b8:	4b33      	ldr	r3, [pc, #204]	@ (8008588 <_dtoa_r+0x520>)
 80084ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da03      	bge.n	80084d4 <_dtoa_r+0x46c>
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f340 8100 	ble.w	80086d4 <_dtoa_r+0x66c>
 80084d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084d8:	4656      	mov	r6, sl
 80084da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084de:	4620      	mov	r0, r4
 80084e0:	4629      	mov	r1, r5
 80084e2:	f7f8 f923 	bl	800072c <__aeabi_ddiv>
 80084e6:	f7f8 faa7 	bl	8000a38 <__aeabi_d2iz>
 80084ea:	4680      	mov	r8, r0
 80084ec:	f7f7 ff8a 	bl	8000404 <__aeabi_i2d>
 80084f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084f4:	f7f7 fff0 	bl	80004d8 <__aeabi_dmul>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4620      	mov	r0, r4
 80084fe:	4629      	mov	r1, r5
 8008500:	f7f7 fe32 	bl	8000168 <__aeabi_dsub>
 8008504:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008508:	9d07      	ldr	r5, [sp, #28]
 800850a:	f806 4b01 	strb.w	r4, [r6], #1
 800850e:	eba6 040a 	sub.w	r4, r6, sl
 8008512:	42a5      	cmp	r5, r4
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	f040 8116 	bne.w	8008748 <_dtoa_r+0x6e0>
 800851c:	f7f7 fe26 	bl	800016c <__adddf3>
 8008520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008524:	4604      	mov	r4, r0
 8008526:	460d      	mov	r5, r1
 8008528:	f7f8 fa66 	bl	80009f8 <__aeabi_dcmpgt>
 800852c:	2800      	cmp	r0, #0
 800852e:	f040 80f8 	bne.w	8008722 <_dtoa_r+0x6ba>
 8008532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008536:	4620      	mov	r0, r4
 8008538:	4629      	mov	r1, r5
 800853a:	f7f8 fa35 	bl	80009a8 <__aeabi_dcmpeq>
 800853e:	b118      	cbz	r0, 8008548 <_dtoa_r+0x4e0>
 8008540:	f018 0f01 	tst.w	r8, #1
 8008544:	f040 80ed 	bne.w	8008722 <_dtoa_r+0x6ba>
 8008548:	4649      	mov	r1, r9
 800854a:	4658      	mov	r0, fp
 800854c:	f000 fc92 	bl	8008e74 <_Bfree>
 8008550:	2300      	movs	r3, #0
 8008552:	7033      	strb	r3, [r6, #0]
 8008554:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008556:	3701      	adds	r7, #1
 8008558:	601f      	str	r7, [r3, #0]
 800855a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 8320 	beq.w	8008ba2 <_dtoa_r+0xb3a>
 8008562:	601e      	str	r6, [r3, #0]
 8008564:	e31d      	b.n	8008ba2 <_dtoa_r+0xb3a>
 8008566:	07e2      	lsls	r2, r4, #31
 8008568:	d505      	bpl.n	8008576 <_dtoa_r+0x50e>
 800856a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800856e:	f7f7 ffb3 	bl	80004d8 <__aeabi_dmul>
 8008572:	2301      	movs	r3, #1
 8008574:	3601      	adds	r6, #1
 8008576:	1064      	asrs	r4, r4, #1
 8008578:	3508      	adds	r5, #8
 800857a:	e73f      	b.n	80083fc <_dtoa_r+0x394>
 800857c:	2602      	movs	r6, #2
 800857e:	e742      	b.n	8008406 <_dtoa_r+0x39e>
 8008580:	9c07      	ldr	r4, [sp, #28]
 8008582:	9704      	str	r7, [sp, #16]
 8008584:	e761      	b.n	800844a <_dtoa_r+0x3e2>
 8008586:	bf00      	nop
 8008588:	0800b060 	.word	0x0800b060
 800858c:	0800b038 	.word	0x0800b038
 8008590:	3ff00000 	.word	0x3ff00000
 8008594:	40240000 	.word	0x40240000
 8008598:	401c0000 	.word	0x401c0000
 800859c:	40140000 	.word	0x40140000
 80085a0:	4b70      	ldr	r3, [pc, #448]	@ (8008764 <_dtoa_r+0x6fc>)
 80085a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085ac:	4454      	add	r4, sl
 80085ae:	2900      	cmp	r1, #0
 80085b0:	d045      	beq.n	800863e <_dtoa_r+0x5d6>
 80085b2:	2000      	movs	r0, #0
 80085b4:	496c      	ldr	r1, [pc, #432]	@ (8008768 <_dtoa_r+0x700>)
 80085b6:	f7f8 f8b9 	bl	800072c <__aeabi_ddiv>
 80085ba:	4633      	mov	r3, r6
 80085bc:	462a      	mov	r2, r5
 80085be:	f7f7 fdd3 	bl	8000168 <__aeabi_dsub>
 80085c2:	4656      	mov	r6, sl
 80085c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085cc:	f7f8 fa34 	bl	8000a38 <__aeabi_d2iz>
 80085d0:	4605      	mov	r5, r0
 80085d2:	f7f7 ff17 	bl	8000404 <__aeabi_i2d>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085de:	f7f7 fdc3 	bl	8000168 <__aeabi_dsub>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	3530      	adds	r5, #48	@ 0x30
 80085e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085f0:	f806 5b01 	strb.w	r5, [r6], #1
 80085f4:	f7f8 f9e2 	bl	80009bc <__aeabi_dcmplt>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d163      	bne.n	80086c4 <_dtoa_r+0x65c>
 80085fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008600:	2000      	movs	r0, #0
 8008602:	495a      	ldr	r1, [pc, #360]	@ (800876c <_dtoa_r+0x704>)
 8008604:	f7f7 fdb0 	bl	8000168 <__aeabi_dsub>
 8008608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800860c:	f7f8 f9d6 	bl	80009bc <__aeabi_dcmplt>
 8008610:	2800      	cmp	r0, #0
 8008612:	f040 8087 	bne.w	8008724 <_dtoa_r+0x6bc>
 8008616:	42a6      	cmp	r6, r4
 8008618:	f43f af43 	beq.w	80084a2 <_dtoa_r+0x43a>
 800861c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008620:	2200      	movs	r2, #0
 8008622:	4b53      	ldr	r3, [pc, #332]	@ (8008770 <_dtoa_r+0x708>)
 8008624:	f7f7 ff58 	bl	80004d8 <__aeabi_dmul>
 8008628:	2200      	movs	r2, #0
 800862a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800862e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008632:	4b4f      	ldr	r3, [pc, #316]	@ (8008770 <_dtoa_r+0x708>)
 8008634:	f7f7 ff50 	bl	80004d8 <__aeabi_dmul>
 8008638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800863c:	e7c4      	b.n	80085c8 <_dtoa_r+0x560>
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	f7f7 ff49 	bl	80004d8 <__aeabi_dmul>
 8008646:	4656      	mov	r6, sl
 8008648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800864c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800864e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008652:	f7f8 f9f1 	bl	8000a38 <__aeabi_d2iz>
 8008656:	4605      	mov	r5, r0
 8008658:	f7f7 fed4 	bl	8000404 <__aeabi_i2d>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008664:	f7f7 fd80 	bl	8000168 <__aeabi_dsub>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	3530      	adds	r5, #48	@ 0x30
 800866e:	f806 5b01 	strb.w	r5, [r6], #1
 8008672:	42a6      	cmp	r6, r4
 8008674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	d124      	bne.n	80086c8 <_dtoa_r+0x660>
 800867e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008682:	4b39      	ldr	r3, [pc, #228]	@ (8008768 <_dtoa_r+0x700>)
 8008684:	f7f7 fd72 	bl	800016c <__adddf3>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008690:	f7f8 f9b2 	bl	80009f8 <__aeabi_dcmpgt>
 8008694:	2800      	cmp	r0, #0
 8008696:	d145      	bne.n	8008724 <_dtoa_r+0x6bc>
 8008698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800869c:	2000      	movs	r0, #0
 800869e:	4932      	ldr	r1, [pc, #200]	@ (8008768 <_dtoa_r+0x700>)
 80086a0:	f7f7 fd62 	bl	8000168 <__aeabi_dsub>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ac:	f7f8 f986 	bl	80009bc <__aeabi_dcmplt>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f43f aef6 	beq.w	80084a2 <_dtoa_r+0x43a>
 80086b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80086b8:	1e73      	subs	r3, r6, #1
 80086ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80086c0:	2b30      	cmp	r3, #48	@ 0x30
 80086c2:	d0f8      	beq.n	80086b6 <_dtoa_r+0x64e>
 80086c4:	9f04      	ldr	r7, [sp, #16]
 80086c6:	e73f      	b.n	8008548 <_dtoa_r+0x4e0>
 80086c8:	4b29      	ldr	r3, [pc, #164]	@ (8008770 <_dtoa_r+0x708>)
 80086ca:	f7f7 ff05 	bl	80004d8 <__aeabi_dmul>
 80086ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d2:	e7bc      	b.n	800864e <_dtoa_r+0x5e6>
 80086d4:	d10c      	bne.n	80086f0 <_dtoa_r+0x688>
 80086d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086da:	2200      	movs	r2, #0
 80086dc:	4b25      	ldr	r3, [pc, #148]	@ (8008774 <_dtoa_r+0x70c>)
 80086de:	f7f7 fefb 	bl	80004d8 <__aeabi_dmul>
 80086e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086e6:	f7f8 f97d 	bl	80009e4 <__aeabi_dcmpge>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	f000 815b 	beq.w	80089a6 <_dtoa_r+0x93e>
 80086f0:	2400      	movs	r4, #0
 80086f2:	4625      	mov	r5, r4
 80086f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086f6:	4656      	mov	r6, sl
 80086f8:	43db      	mvns	r3, r3
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	2700      	movs	r7, #0
 80086fe:	4621      	mov	r1, r4
 8008700:	4658      	mov	r0, fp
 8008702:	f000 fbb7 	bl	8008e74 <_Bfree>
 8008706:	2d00      	cmp	r5, #0
 8008708:	d0dc      	beq.n	80086c4 <_dtoa_r+0x65c>
 800870a:	b12f      	cbz	r7, 8008718 <_dtoa_r+0x6b0>
 800870c:	42af      	cmp	r7, r5
 800870e:	d003      	beq.n	8008718 <_dtoa_r+0x6b0>
 8008710:	4639      	mov	r1, r7
 8008712:	4658      	mov	r0, fp
 8008714:	f000 fbae 	bl	8008e74 <_Bfree>
 8008718:	4629      	mov	r1, r5
 800871a:	4658      	mov	r0, fp
 800871c:	f000 fbaa 	bl	8008e74 <_Bfree>
 8008720:	e7d0      	b.n	80086c4 <_dtoa_r+0x65c>
 8008722:	9704      	str	r7, [sp, #16]
 8008724:	4633      	mov	r3, r6
 8008726:	461e      	mov	r6, r3
 8008728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800872c:	2a39      	cmp	r2, #57	@ 0x39
 800872e:	d107      	bne.n	8008740 <_dtoa_r+0x6d8>
 8008730:	459a      	cmp	sl, r3
 8008732:	d1f8      	bne.n	8008726 <_dtoa_r+0x6be>
 8008734:	9a04      	ldr	r2, [sp, #16]
 8008736:	3201      	adds	r2, #1
 8008738:	9204      	str	r2, [sp, #16]
 800873a:	2230      	movs	r2, #48	@ 0x30
 800873c:	f88a 2000 	strb.w	r2, [sl]
 8008740:	781a      	ldrb	r2, [r3, #0]
 8008742:	3201      	adds	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
 8008746:	e7bd      	b.n	80086c4 <_dtoa_r+0x65c>
 8008748:	2200      	movs	r2, #0
 800874a:	4b09      	ldr	r3, [pc, #36]	@ (8008770 <_dtoa_r+0x708>)
 800874c:	f7f7 fec4 	bl	80004d8 <__aeabi_dmul>
 8008750:	2200      	movs	r2, #0
 8008752:	2300      	movs	r3, #0
 8008754:	4604      	mov	r4, r0
 8008756:	460d      	mov	r5, r1
 8008758:	f7f8 f926 	bl	80009a8 <__aeabi_dcmpeq>
 800875c:	2800      	cmp	r0, #0
 800875e:	f43f aebc 	beq.w	80084da <_dtoa_r+0x472>
 8008762:	e6f1      	b.n	8008548 <_dtoa_r+0x4e0>
 8008764:	0800b060 	.word	0x0800b060
 8008768:	3fe00000 	.word	0x3fe00000
 800876c:	3ff00000 	.word	0x3ff00000
 8008770:	40240000 	.word	0x40240000
 8008774:	40140000 	.word	0x40140000
 8008778:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800877a:	2a00      	cmp	r2, #0
 800877c:	f000 80db 	beq.w	8008936 <_dtoa_r+0x8ce>
 8008780:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008782:	2a01      	cmp	r2, #1
 8008784:	f300 80bf 	bgt.w	8008906 <_dtoa_r+0x89e>
 8008788:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800878a:	2a00      	cmp	r2, #0
 800878c:	f000 80b7 	beq.w	80088fe <_dtoa_r+0x896>
 8008790:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008794:	4646      	mov	r6, r8
 8008796:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800879a:	2101      	movs	r1, #1
 800879c:	441a      	add	r2, r3
 800879e:	4658      	mov	r0, fp
 80087a0:	4498      	add	r8, r3
 80087a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80087a4:	f000 fc1a 	bl	8008fdc <__i2b>
 80087a8:	4605      	mov	r5, r0
 80087aa:	b15e      	cbz	r6, 80087c4 <_dtoa_r+0x75c>
 80087ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	dd08      	ble.n	80087c4 <_dtoa_r+0x75c>
 80087b2:	42b3      	cmp	r3, r6
 80087b4:	bfa8      	it	ge
 80087b6:	4633      	movge	r3, r6
 80087b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087ba:	eba8 0803 	sub.w	r8, r8, r3
 80087be:	1af6      	subs	r6, r6, r3
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c6:	b1f3      	cbz	r3, 8008806 <_dtoa_r+0x79e>
 80087c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80b7 	beq.w	800893e <_dtoa_r+0x8d6>
 80087d0:	b18c      	cbz	r4, 80087f6 <_dtoa_r+0x78e>
 80087d2:	4629      	mov	r1, r5
 80087d4:	4622      	mov	r2, r4
 80087d6:	4658      	mov	r0, fp
 80087d8:	f000 fcbe 	bl	8009158 <__pow5mult>
 80087dc:	464a      	mov	r2, r9
 80087de:	4601      	mov	r1, r0
 80087e0:	4605      	mov	r5, r0
 80087e2:	4658      	mov	r0, fp
 80087e4:	f000 fc10 	bl	8009008 <__multiply>
 80087e8:	4649      	mov	r1, r9
 80087ea:	9004      	str	r0, [sp, #16]
 80087ec:	4658      	mov	r0, fp
 80087ee:	f000 fb41 	bl	8008e74 <_Bfree>
 80087f2:	9b04      	ldr	r3, [sp, #16]
 80087f4:	4699      	mov	r9, r3
 80087f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f8:	1b1a      	subs	r2, r3, r4
 80087fa:	d004      	beq.n	8008806 <_dtoa_r+0x79e>
 80087fc:	4649      	mov	r1, r9
 80087fe:	4658      	mov	r0, fp
 8008800:	f000 fcaa 	bl	8009158 <__pow5mult>
 8008804:	4681      	mov	r9, r0
 8008806:	2101      	movs	r1, #1
 8008808:	4658      	mov	r0, fp
 800880a:	f000 fbe7 	bl	8008fdc <__i2b>
 800880e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008810:	4604      	mov	r4, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 81c9 	beq.w	8008baa <_dtoa_r+0xb42>
 8008818:	461a      	mov	r2, r3
 800881a:	4601      	mov	r1, r0
 800881c:	4658      	mov	r0, fp
 800881e:	f000 fc9b 	bl	8009158 <__pow5mult>
 8008822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008824:	4604      	mov	r4, r0
 8008826:	2b01      	cmp	r3, #1
 8008828:	f300 808f 	bgt.w	800894a <_dtoa_r+0x8e2>
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f040 8087 	bne.w	8008942 <_dtoa_r+0x8da>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 8083 	bne.w	8008946 <_dtoa_r+0x8de>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008846:	0d1b      	lsrs	r3, r3, #20
 8008848:	051b      	lsls	r3, r3, #20
 800884a:	b12b      	cbz	r3, 8008858 <_dtoa_r+0x7f0>
 800884c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884e:	f108 0801 	add.w	r8, r8, #1
 8008852:	3301      	adds	r3, #1
 8008854:	9309      	str	r3, [sp, #36]	@ 0x24
 8008856:	2301      	movs	r3, #1
 8008858:	930a      	str	r3, [sp, #40]	@ 0x28
 800885a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 81aa 	beq.w	8008bb6 <_dtoa_r+0xb4e>
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008868:	6918      	ldr	r0, [r3, #16]
 800886a:	f000 fb6b 	bl	8008f44 <__hi0bits>
 800886e:	f1c0 0020 	rsb	r0, r0, #32
 8008872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008874:	4418      	add	r0, r3
 8008876:	f010 001f 	ands.w	r0, r0, #31
 800887a:	d071      	beq.n	8008960 <_dtoa_r+0x8f8>
 800887c:	f1c0 0320 	rsb	r3, r0, #32
 8008880:	2b04      	cmp	r3, #4
 8008882:	dd65      	ble.n	8008950 <_dtoa_r+0x8e8>
 8008884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008886:	f1c0 001c 	rsb	r0, r0, #28
 800888a:	4403      	add	r3, r0
 800888c:	4480      	add	r8, r0
 800888e:	4406      	add	r6, r0
 8008890:	9309      	str	r3, [sp, #36]	@ 0x24
 8008892:	f1b8 0f00 	cmp.w	r8, #0
 8008896:	dd05      	ble.n	80088a4 <_dtoa_r+0x83c>
 8008898:	4649      	mov	r1, r9
 800889a:	4642      	mov	r2, r8
 800889c:	4658      	mov	r0, fp
 800889e:	f000 fcb5 	bl	800920c <__lshift>
 80088a2:	4681      	mov	r9, r0
 80088a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	dd05      	ble.n	80088b6 <_dtoa_r+0x84e>
 80088aa:	4621      	mov	r1, r4
 80088ac:	461a      	mov	r2, r3
 80088ae:	4658      	mov	r0, fp
 80088b0:	f000 fcac 	bl	800920c <__lshift>
 80088b4:	4604      	mov	r4, r0
 80088b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d053      	beq.n	8008964 <_dtoa_r+0x8fc>
 80088bc:	4621      	mov	r1, r4
 80088be:	4648      	mov	r0, r9
 80088c0:	f000 fd10 	bl	80092e4 <__mcmp>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	da4d      	bge.n	8008964 <_dtoa_r+0x8fc>
 80088c8:	1e7b      	subs	r3, r7, #1
 80088ca:	4649      	mov	r1, r9
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	220a      	movs	r2, #10
 80088d0:	2300      	movs	r3, #0
 80088d2:	4658      	mov	r0, fp
 80088d4:	f000 faf0 	bl	8008eb8 <__multadd>
 80088d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088da:	4681      	mov	r9, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 816c 	beq.w	8008bba <_dtoa_r+0xb52>
 80088e2:	2300      	movs	r3, #0
 80088e4:	4629      	mov	r1, r5
 80088e6:	220a      	movs	r2, #10
 80088e8:	4658      	mov	r0, fp
 80088ea:	f000 fae5 	bl	8008eb8 <__multadd>
 80088ee:	9b08      	ldr	r3, [sp, #32]
 80088f0:	4605      	mov	r5, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dc61      	bgt.n	80089ba <_dtoa_r+0x952>
 80088f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	dc3b      	bgt.n	8008974 <_dtoa_r+0x90c>
 80088fc:	e05d      	b.n	80089ba <_dtoa_r+0x952>
 80088fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008900:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008904:	e746      	b.n	8008794 <_dtoa_r+0x72c>
 8008906:	9b07      	ldr	r3, [sp, #28]
 8008908:	1e5c      	subs	r4, r3, #1
 800890a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800890c:	42a3      	cmp	r3, r4
 800890e:	bfbf      	itttt	lt
 8008910:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008912:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008914:	1ae3      	sublt	r3, r4, r3
 8008916:	18d2      	addlt	r2, r2, r3
 8008918:	bfa8      	it	ge
 800891a:	1b1c      	subge	r4, r3, r4
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	bfbe      	ittt	lt
 8008920:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008922:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008924:	2400      	movlt	r4, #0
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfb5      	itete	lt
 800892a:	eba8 0603 	sublt.w	r6, r8, r3
 800892e:	4646      	movge	r6, r8
 8008930:	2300      	movlt	r3, #0
 8008932:	9b07      	ldrge	r3, [sp, #28]
 8008934:	e730      	b.n	8008798 <_dtoa_r+0x730>
 8008936:	4646      	mov	r6, r8
 8008938:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800893a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800893c:	e735      	b.n	80087aa <_dtoa_r+0x742>
 800893e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008940:	e75c      	b.n	80087fc <_dtoa_r+0x794>
 8008942:	2300      	movs	r3, #0
 8008944:	e788      	b.n	8008858 <_dtoa_r+0x7f0>
 8008946:	9b02      	ldr	r3, [sp, #8]
 8008948:	e786      	b.n	8008858 <_dtoa_r+0x7f0>
 800894a:	2300      	movs	r3, #0
 800894c:	930a      	str	r3, [sp, #40]	@ 0x28
 800894e:	e788      	b.n	8008862 <_dtoa_r+0x7fa>
 8008950:	d09f      	beq.n	8008892 <_dtoa_r+0x82a>
 8008952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008954:	331c      	adds	r3, #28
 8008956:	441a      	add	r2, r3
 8008958:	4498      	add	r8, r3
 800895a:	441e      	add	r6, r3
 800895c:	9209      	str	r2, [sp, #36]	@ 0x24
 800895e:	e798      	b.n	8008892 <_dtoa_r+0x82a>
 8008960:	4603      	mov	r3, r0
 8008962:	e7f6      	b.n	8008952 <_dtoa_r+0x8ea>
 8008964:	9b07      	ldr	r3, [sp, #28]
 8008966:	9704      	str	r7, [sp, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	dc20      	bgt.n	80089ae <_dtoa_r+0x946>
 800896c:	9308      	str	r3, [sp, #32]
 800896e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008970:	2b02      	cmp	r3, #2
 8008972:	dd1e      	ble.n	80089b2 <_dtoa_r+0x94a>
 8008974:	9b08      	ldr	r3, [sp, #32]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f47f aebc 	bne.w	80086f4 <_dtoa_r+0x68c>
 800897c:	4621      	mov	r1, r4
 800897e:	2205      	movs	r2, #5
 8008980:	4658      	mov	r0, fp
 8008982:	f000 fa99 	bl	8008eb8 <__multadd>
 8008986:	4601      	mov	r1, r0
 8008988:	4604      	mov	r4, r0
 800898a:	4648      	mov	r0, r9
 800898c:	f000 fcaa 	bl	80092e4 <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	f77f aeaf 	ble.w	80086f4 <_dtoa_r+0x68c>
 8008996:	2331      	movs	r3, #49	@ 0x31
 8008998:	4656      	mov	r6, sl
 800899a:	f806 3b01 	strb.w	r3, [r6], #1
 800899e:	9b04      	ldr	r3, [sp, #16]
 80089a0:	3301      	adds	r3, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	e6aa      	b.n	80086fc <_dtoa_r+0x694>
 80089a6:	9c07      	ldr	r4, [sp, #28]
 80089a8:	9704      	str	r7, [sp, #16]
 80089aa:	4625      	mov	r5, r4
 80089ac:	e7f3      	b.n	8008996 <_dtoa_r+0x92e>
 80089ae:	9b07      	ldr	r3, [sp, #28]
 80089b0:	9308      	str	r3, [sp, #32]
 80089b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 8104 	beq.w	8008bc2 <_dtoa_r+0xb5a>
 80089ba:	2e00      	cmp	r6, #0
 80089bc:	dd05      	ble.n	80089ca <_dtoa_r+0x962>
 80089be:	4629      	mov	r1, r5
 80089c0:	4632      	mov	r2, r6
 80089c2:	4658      	mov	r0, fp
 80089c4:	f000 fc22 	bl	800920c <__lshift>
 80089c8:	4605      	mov	r5, r0
 80089ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d05a      	beq.n	8008a86 <_dtoa_r+0xa1e>
 80089d0:	4658      	mov	r0, fp
 80089d2:	6869      	ldr	r1, [r5, #4]
 80089d4:	f000 fa0e 	bl	8008df4 <_Balloc>
 80089d8:	4606      	mov	r6, r0
 80089da:	b928      	cbnz	r0, 80089e8 <_dtoa_r+0x980>
 80089dc:	4602      	mov	r2, r0
 80089de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089e2:	4b83      	ldr	r3, [pc, #524]	@ (8008bf0 <_dtoa_r+0xb88>)
 80089e4:	f7ff bb54 	b.w	8008090 <_dtoa_r+0x28>
 80089e8:	692a      	ldr	r2, [r5, #16]
 80089ea:	f105 010c 	add.w	r1, r5, #12
 80089ee:	3202      	adds	r2, #2
 80089f0:	0092      	lsls	r2, r2, #2
 80089f2:	300c      	adds	r0, #12
 80089f4:	f7ff faa1 	bl	8007f3a <memcpy>
 80089f8:	2201      	movs	r2, #1
 80089fa:	4631      	mov	r1, r6
 80089fc:	4658      	mov	r0, fp
 80089fe:	f000 fc05 	bl	800920c <__lshift>
 8008a02:	462f      	mov	r7, r5
 8008a04:	4605      	mov	r5, r0
 8008a06:	f10a 0301 	add.w	r3, sl, #1
 8008a0a:	9307      	str	r3, [sp, #28]
 8008a0c:	9b08      	ldr	r3, [sp, #32]
 8008a0e:	4453      	add	r3, sl
 8008a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a12:	9b02      	ldr	r3, [sp, #8]
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a1a:	9b07      	ldr	r3, [sp, #28]
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	4648      	mov	r0, r9
 8008a22:	9302      	str	r3, [sp, #8]
 8008a24:	f7ff fa97 	bl	8007f56 <quorem>
 8008a28:	4639      	mov	r1, r7
 8008a2a:	9008      	str	r0, [sp, #32]
 8008a2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a30:	4648      	mov	r0, r9
 8008a32:	f000 fc57 	bl	80092e4 <__mcmp>
 8008a36:	462a      	mov	r2, r5
 8008a38:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f000 fc6d 	bl	800931c <__mdiff>
 8008a42:	68c2      	ldr	r2, [r0, #12]
 8008a44:	4606      	mov	r6, r0
 8008a46:	bb02      	cbnz	r2, 8008a8a <_dtoa_r+0xa22>
 8008a48:	4601      	mov	r1, r0
 8008a4a:	4648      	mov	r0, r9
 8008a4c:	f000 fc4a 	bl	80092e4 <__mcmp>
 8008a50:	4602      	mov	r2, r0
 8008a52:	4631      	mov	r1, r6
 8008a54:	4658      	mov	r0, fp
 8008a56:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a58:	f000 fa0c 	bl	8008e74 <_Bfree>
 8008a5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a60:	9e07      	ldr	r6, [sp, #28]
 8008a62:	ea43 0102 	orr.w	r1, r3, r2
 8008a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a68:	4319      	orrs	r1, r3
 8008a6a:	d110      	bne.n	8008a8e <_dtoa_r+0xa26>
 8008a6c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a70:	d029      	beq.n	8008ac6 <_dtoa_r+0xa5e>
 8008a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dd02      	ble.n	8008a7e <_dtoa_r+0xa16>
 8008a78:	9b08      	ldr	r3, [sp, #32]
 8008a7a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a7e:	9b02      	ldr	r3, [sp, #8]
 8008a80:	f883 8000 	strb.w	r8, [r3]
 8008a84:	e63b      	b.n	80086fe <_dtoa_r+0x696>
 8008a86:	4628      	mov	r0, r5
 8008a88:	e7bb      	b.n	8008a02 <_dtoa_r+0x99a>
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	e7e1      	b.n	8008a52 <_dtoa_r+0x9ea>
 8008a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	db04      	blt.n	8008a9e <_dtoa_r+0xa36>
 8008a94:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008a96:	430b      	orrs	r3, r1
 8008a98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	d120      	bne.n	8008ae0 <_dtoa_r+0xa78>
 8008a9e:	2a00      	cmp	r2, #0
 8008aa0:	dded      	ble.n	8008a7e <_dtoa_r+0xa16>
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	4658      	mov	r0, fp
 8008aa8:	f000 fbb0 	bl	800920c <__lshift>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4681      	mov	r9, r0
 8008ab0:	f000 fc18 	bl	80092e4 <__mcmp>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	dc03      	bgt.n	8008ac0 <_dtoa_r+0xa58>
 8008ab8:	d1e1      	bne.n	8008a7e <_dtoa_r+0xa16>
 8008aba:	f018 0f01 	tst.w	r8, #1
 8008abe:	d0de      	beq.n	8008a7e <_dtoa_r+0xa16>
 8008ac0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ac4:	d1d8      	bne.n	8008a78 <_dtoa_r+0xa10>
 8008ac6:	2339      	movs	r3, #57	@ 0x39
 8008ac8:	9a02      	ldr	r2, [sp, #8]
 8008aca:	7013      	strb	r3, [r2, #0]
 8008acc:	4633      	mov	r3, r6
 8008ace:	461e      	mov	r6, r3
 8008ad0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	2a39      	cmp	r2, #57	@ 0x39
 8008ad8:	d052      	beq.n	8008b80 <_dtoa_r+0xb18>
 8008ada:	3201      	adds	r2, #1
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	e60e      	b.n	80086fe <_dtoa_r+0x696>
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	dd07      	ble.n	8008af4 <_dtoa_r+0xa8c>
 8008ae4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ae8:	d0ed      	beq.n	8008ac6 <_dtoa_r+0xa5e>
 8008aea:	9a02      	ldr	r2, [sp, #8]
 8008aec:	f108 0301 	add.w	r3, r8, #1
 8008af0:	7013      	strb	r3, [r2, #0]
 8008af2:	e604      	b.n	80086fe <_dtoa_r+0x696>
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	9a07      	ldr	r2, [sp, #28]
 8008af8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008afc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d028      	beq.n	8008b54 <_dtoa_r+0xaec>
 8008b02:	4649      	mov	r1, r9
 8008b04:	2300      	movs	r3, #0
 8008b06:	220a      	movs	r2, #10
 8008b08:	4658      	mov	r0, fp
 8008b0a:	f000 f9d5 	bl	8008eb8 <__multadd>
 8008b0e:	42af      	cmp	r7, r5
 8008b10:	4681      	mov	r9, r0
 8008b12:	f04f 0300 	mov.w	r3, #0
 8008b16:	f04f 020a 	mov.w	r2, #10
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	4658      	mov	r0, fp
 8008b1e:	d107      	bne.n	8008b30 <_dtoa_r+0xac8>
 8008b20:	f000 f9ca 	bl	8008eb8 <__multadd>
 8008b24:	4607      	mov	r7, r0
 8008b26:	4605      	mov	r5, r0
 8008b28:	9b07      	ldr	r3, [sp, #28]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	9307      	str	r3, [sp, #28]
 8008b2e:	e774      	b.n	8008a1a <_dtoa_r+0x9b2>
 8008b30:	f000 f9c2 	bl	8008eb8 <__multadd>
 8008b34:	4629      	mov	r1, r5
 8008b36:	4607      	mov	r7, r0
 8008b38:	2300      	movs	r3, #0
 8008b3a:	220a      	movs	r2, #10
 8008b3c:	4658      	mov	r0, fp
 8008b3e:	f000 f9bb 	bl	8008eb8 <__multadd>
 8008b42:	4605      	mov	r5, r0
 8008b44:	e7f0      	b.n	8008b28 <_dtoa_r+0xac0>
 8008b46:	9b08      	ldr	r3, [sp, #32]
 8008b48:	2700      	movs	r7, #0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bfcc      	ite	gt
 8008b4e:	461e      	movgt	r6, r3
 8008b50:	2601      	movle	r6, #1
 8008b52:	4456      	add	r6, sl
 8008b54:	4649      	mov	r1, r9
 8008b56:	2201      	movs	r2, #1
 8008b58:	4658      	mov	r0, fp
 8008b5a:	f000 fb57 	bl	800920c <__lshift>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4681      	mov	r9, r0
 8008b62:	f000 fbbf 	bl	80092e4 <__mcmp>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	dcb0      	bgt.n	8008acc <_dtoa_r+0xa64>
 8008b6a:	d102      	bne.n	8008b72 <_dtoa_r+0xb0a>
 8008b6c:	f018 0f01 	tst.w	r8, #1
 8008b70:	d1ac      	bne.n	8008acc <_dtoa_r+0xa64>
 8008b72:	4633      	mov	r3, r6
 8008b74:	461e      	mov	r6, r3
 8008b76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b7a:	2a30      	cmp	r2, #48	@ 0x30
 8008b7c:	d0fa      	beq.n	8008b74 <_dtoa_r+0xb0c>
 8008b7e:	e5be      	b.n	80086fe <_dtoa_r+0x696>
 8008b80:	459a      	cmp	sl, r3
 8008b82:	d1a4      	bne.n	8008ace <_dtoa_r+0xa66>
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	3301      	adds	r3, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	2331      	movs	r3, #49	@ 0x31
 8008b8c:	f88a 3000 	strb.w	r3, [sl]
 8008b90:	e5b5      	b.n	80086fe <_dtoa_r+0x696>
 8008b92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b94:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bf4 <_dtoa_r+0xb8c>
 8008b98:	b11b      	cbz	r3, 8008ba2 <_dtoa_r+0xb3a>
 8008b9a:	f10a 0308 	add.w	r3, sl, #8
 8008b9e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	b017      	add	sp, #92	@ 0x5c
 8008ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008baa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	f77f ae3d 	ble.w	800882c <_dtoa_r+0x7c4>
 8008bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	e65b      	b.n	8008872 <_dtoa_r+0x80a>
 8008bba:	9b08      	ldr	r3, [sp, #32]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f77f aed6 	ble.w	800896e <_dtoa_r+0x906>
 8008bc2:	4656      	mov	r6, sl
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	4648      	mov	r0, r9
 8008bc8:	f7ff f9c5 	bl	8007f56 <quorem>
 8008bcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bd0:	9b08      	ldr	r3, [sp, #32]
 8008bd2:	f806 8b01 	strb.w	r8, [r6], #1
 8008bd6:	eba6 020a 	sub.w	r2, r6, sl
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	ddb3      	ble.n	8008b46 <_dtoa_r+0xade>
 8008bde:	4649      	mov	r1, r9
 8008be0:	2300      	movs	r3, #0
 8008be2:	220a      	movs	r2, #10
 8008be4:	4658      	mov	r0, fp
 8008be6:	f000 f967 	bl	8008eb8 <__multadd>
 8008bea:	4681      	mov	r9, r0
 8008bec:	e7ea      	b.n	8008bc4 <_dtoa_r+0xb5c>
 8008bee:	bf00      	nop
 8008bf0:	0800afc0 	.word	0x0800afc0
 8008bf4:	0800af44 	.word	0x0800af44

08008bf8 <_free_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d040      	beq.n	8008c82 <_free_r+0x8a>
 8008c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c04:	1f0c      	subs	r4, r1, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfb8      	it	lt
 8008c0a:	18e4      	addlt	r4, r4, r3
 8008c0c:	f000 f8e6 	bl	8008ddc <__malloc_lock>
 8008c10:	4a1c      	ldr	r2, [pc, #112]	@ (8008c84 <_free_r+0x8c>)
 8008c12:	6813      	ldr	r3, [r2, #0]
 8008c14:	b933      	cbnz	r3, 8008c24 <_free_r+0x2c>
 8008c16:	6063      	str	r3, [r4, #4]
 8008c18:	6014      	str	r4, [r2, #0]
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c20:	f000 b8e2 	b.w	8008de8 <__malloc_unlock>
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	d908      	bls.n	8008c3a <_free_r+0x42>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	1821      	adds	r1, r4, r0
 8008c2c:	428b      	cmp	r3, r1
 8008c2e:	bf01      	itttt	eq
 8008c30:	6819      	ldreq	r1, [r3, #0]
 8008c32:	685b      	ldreq	r3, [r3, #4]
 8008c34:	1809      	addeq	r1, r1, r0
 8008c36:	6021      	streq	r1, [r4, #0]
 8008c38:	e7ed      	b.n	8008c16 <_free_r+0x1e>
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	b10b      	cbz	r3, 8008c44 <_free_r+0x4c>
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	d9fa      	bls.n	8008c3a <_free_r+0x42>
 8008c44:	6811      	ldr	r1, [r2, #0]
 8008c46:	1850      	adds	r0, r2, r1
 8008c48:	42a0      	cmp	r0, r4
 8008c4a:	d10b      	bne.n	8008c64 <_free_r+0x6c>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	4401      	add	r1, r0
 8008c50:	1850      	adds	r0, r2, r1
 8008c52:	4283      	cmp	r3, r0
 8008c54:	6011      	str	r1, [r2, #0]
 8008c56:	d1e0      	bne.n	8008c1a <_free_r+0x22>
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	4408      	add	r0, r1
 8008c5e:	6010      	str	r0, [r2, #0]
 8008c60:	6053      	str	r3, [r2, #4]
 8008c62:	e7da      	b.n	8008c1a <_free_r+0x22>
 8008c64:	d902      	bls.n	8008c6c <_free_r+0x74>
 8008c66:	230c      	movs	r3, #12
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	e7d6      	b.n	8008c1a <_free_r+0x22>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	1821      	adds	r1, r4, r0
 8008c70:	428b      	cmp	r3, r1
 8008c72:	bf01      	itttt	eq
 8008c74:	6819      	ldreq	r1, [r3, #0]
 8008c76:	685b      	ldreq	r3, [r3, #4]
 8008c78:	1809      	addeq	r1, r1, r0
 8008c7a:	6021      	streq	r1, [r4, #0]
 8008c7c:	6063      	str	r3, [r4, #4]
 8008c7e:	6054      	str	r4, [r2, #4]
 8008c80:	e7cb      	b.n	8008c1a <_free_r+0x22>
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20002414 	.word	0x20002414

08008c88 <malloc>:
 8008c88:	4b02      	ldr	r3, [pc, #8]	@ (8008c94 <malloc+0xc>)
 8008c8a:	4601      	mov	r1, r0
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	f000 b825 	b.w	8008cdc <_malloc_r>
 8008c92:	bf00      	nop
 8008c94:	20000024 	.word	0x20000024

08008c98 <sbrk_aligned>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	4e0f      	ldr	r6, [pc, #60]	@ (8008cd8 <sbrk_aligned+0x40>)
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	6831      	ldr	r1, [r6, #0]
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	b911      	cbnz	r1, 8008caa <sbrk_aligned+0x12>
 8008ca4:	f000 fe40 	bl	8009928 <_sbrk_r>
 8008ca8:	6030      	str	r0, [r6, #0]
 8008caa:	4621      	mov	r1, r4
 8008cac:	4628      	mov	r0, r5
 8008cae:	f000 fe3b 	bl	8009928 <_sbrk_r>
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	d103      	bne.n	8008cbe <sbrk_aligned+0x26>
 8008cb6:	f04f 34ff 	mov.w	r4, #4294967295
 8008cba:	4620      	mov	r0, r4
 8008cbc:	bd70      	pop	{r4, r5, r6, pc}
 8008cbe:	1cc4      	adds	r4, r0, #3
 8008cc0:	f024 0403 	bic.w	r4, r4, #3
 8008cc4:	42a0      	cmp	r0, r4
 8008cc6:	d0f8      	beq.n	8008cba <sbrk_aligned+0x22>
 8008cc8:	1a21      	subs	r1, r4, r0
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 fe2c 	bl	8009928 <_sbrk_r>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d1f2      	bne.n	8008cba <sbrk_aligned+0x22>
 8008cd4:	e7ef      	b.n	8008cb6 <sbrk_aligned+0x1e>
 8008cd6:	bf00      	nop
 8008cd8:	20002410 	.word	0x20002410

08008cdc <_malloc_r>:
 8008cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce0:	1ccd      	adds	r5, r1, #3
 8008ce2:	f025 0503 	bic.w	r5, r5, #3
 8008ce6:	3508      	adds	r5, #8
 8008ce8:	2d0c      	cmp	r5, #12
 8008cea:	bf38      	it	cc
 8008cec:	250c      	movcc	r5, #12
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	db01      	blt.n	8008cf8 <_malloc_r+0x1c>
 8008cf4:	42a9      	cmp	r1, r5
 8008cf6:	d904      	bls.n	8008d02 <_malloc_r+0x26>
 8008cf8:	230c      	movs	r3, #12
 8008cfa:	6033      	str	r3, [r6, #0]
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dd8 <_malloc_r+0xfc>
 8008d06:	f000 f869 	bl	8008ddc <__malloc_lock>
 8008d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d0e:	461c      	mov	r4, r3
 8008d10:	bb44      	cbnz	r4, 8008d64 <_malloc_r+0x88>
 8008d12:	4629      	mov	r1, r5
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7ff ffbf 	bl	8008c98 <sbrk_aligned>
 8008d1a:	1c43      	adds	r3, r0, #1
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	d158      	bne.n	8008dd2 <_malloc_r+0xf6>
 8008d20:	f8d8 4000 	ldr.w	r4, [r8]
 8008d24:	4627      	mov	r7, r4
 8008d26:	2f00      	cmp	r7, #0
 8008d28:	d143      	bne.n	8008db2 <_malloc_r+0xd6>
 8008d2a:	2c00      	cmp	r4, #0
 8008d2c:	d04b      	beq.n	8008dc6 <_malloc_r+0xea>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	4639      	mov	r1, r7
 8008d32:	4630      	mov	r0, r6
 8008d34:	eb04 0903 	add.w	r9, r4, r3
 8008d38:	f000 fdf6 	bl	8009928 <_sbrk_r>
 8008d3c:	4581      	cmp	r9, r0
 8008d3e:	d142      	bne.n	8008dc6 <_malloc_r+0xea>
 8008d40:	6821      	ldr	r1, [r4, #0]
 8008d42:	4630      	mov	r0, r6
 8008d44:	1a6d      	subs	r5, r5, r1
 8008d46:	4629      	mov	r1, r5
 8008d48:	f7ff ffa6 	bl	8008c98 <sbrk_aligned>
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d03a      	beq.n	8008dc6 <_malloc_r+0xea>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	442b      	add	r3, r5
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	f8d8 3000 	ldr.w	r3, [r8]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	bb62      	cbnz	r2, 8008db8 <_malloc_r+0xdc>
 8008d5e:	f8c8 7000 	str.w	r7, [r8]
 8008d62:	e00f      	b.n	8008d84 <_malloc_r+0xa8>
 8008d64:	6822      	ldr	r2, [r4, #0]
 8008d66:	1b52      	subs	r2, r2, r5
 8008d68:	d420      	bmi.n	8008dac <_malloc_r+0xd0>
 8008d6a:	2a0b      	cmp	r2, #11
 8008d6c:	d917      	bls.n	8008d9e <_malloc_r+0xc2>
 8008d6e:	1961      	adds	r1, r4, r5
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	6025      	str	r5, [r4, #0]
 8008d74:	bf18      	it	ne
 8008d76:	6059      	strne	r1, [r3, #4]
 8008d78:	6863      	ldr	r3, [r4, #4]
 8008d7a:	bf08      	it	eq
 8008d7c:	f8c8 1000 	streq.w	r1, [r8]
 8008d80:	5162      	str	r2, [r4, r5]
 8008d82:	604b      	str	r3, [r1, #4]
 8008d84:	4630      	mov	r0, r6
 8008d86:	f000 f82f 	bl	8008de8 <__malloc_unlock>
 8008d8a:	f104 000b 	add.w	r0, r4, #11
 8008d8e:	1d23      	adds	r3, r4, #4
 8008d90:	f020 0007 	bic.w	r0, r0, #7
 8008d94:	1ac2      	subs	r2, r0, r3
 8008d96:	bf1c      	itt	ne
 8008d98:	1a1b      	subne	r3, r3, r0
 8008d9a:	50a3      	strne	r3, [r4, r2]
 8008d9c:	e7af      	b.n	8008cfe <_malloc_r+0x22>
 8008d9e:	6862      	ldr	r2, [r4, #4]
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	bf0c      	ite	eq
 8008da4:	f8c8 2000 	streq.w	r2, [r8]
 8008da8:	605a      	strne	r2, [r3, #4]
 8008daa:	e7eb      	b.n	8008d84 <_malloc_r+0xa8>
 8008dac:	4623      	mov	r3, r4
 8008dae:	6864      	ldr	r4, [r4, #4]
 8008db0:	e7ae      	b.n	8008d10 <_malloc_r+0x34>
 8008db2:	463c      	mov	r4, r7
 8008db4:	687f      	ldr	r7, [r7, #4]
 8008db6:	e7b6      	b.n	8008d26 <_malloc_r+0x4a>
 8008db8:	461a      	mov	r2, r3
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	42a3      	cmp	r3, r4
 8008dbe:	d1fb      	bne.n	8008db8 <_malloc_r+0xdc>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	6053      	str	r3, [r2, #4]
 8008dc4:	e7de      	b.n	8008d84 <_malloc_r+0xa8>
 8008dc6:	230c      	movs	r3, #12
 8008dc8:	4630      	mov	r0, r6
 8008dca:	6033      	str	r3, [r6, #0]
 8008dcc:	f000 f80c 	bl	8008de8 <__malloc_unlock>
 8008dd0:	e794      	b.n	8008cfc <_malloc_r+0x20>
 8008dd2:	6005      	str	r5, [r0, #0]
 8008dd4:	e7d6      	b.n	8008d84 <_malloc_r+0xa8>
 8008dd6:	bf00      	nop
 8008dd8:	20002414 	.word	0x20002414

08008ddc <__malloc_lock>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	@ (8008de4 <__malloc_lock+0x8>)
 8008dde:	f7ff b89c 	b.w	8007f1a <__retarget_lock_acquire_recursive>
 8008de2:	bf00      	nop
 8008de4:	2000240c 	.word	0x2000240c

08008de8 <__malloc_unlock>:
 8008de8:	4801      	ldr	r0, [pc, #4]	@ (8008df0 <__malloc_unlock+0x8>)
 8008dea:	f7ff b897 	b.w	8007f1c <__retarget_lock_release_recursive>
 8008dee:	bf00      	nop
 8008df0:	2000240c 	.word	0x2000240c

08008df4 <_Balloc>:
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	69c6      	ldr	r6, [r0, #28]
 8008df8:	4604      	mov	r4, r0
 8008dfa:	460d      	mov	r5, r1
 8008dfc:	b976      	cbnz	r6, 8008e1c <_Balloc+0x28>
 8008dfe:	2010      	movs	r0, #16
 8008e00:	f7ff ff42 	bl	8008c88 <malloc>
 8008e04:	4602      	mov	r2, r0
 8008e06:	61e0      	str	r0, [r4, #28]
 8008e08:	b920      	cbnz	r0, 8008e14 <_Balloc+0x20>
 8008e0a:	216b      	movs	r1, #107	@ 0x6b
 8008e0c:	4b17      	ldr	r3, [pc, #92]	@ (8008e6c <_Balloc+0x78>)
 8008e0e:	4818      	ldr	r0, [pc, #96]	@ (8008e70 <_Balloc+0x7c>)
 8008e10:	f000 fd9a 	bl	8009948 <__assert_func>
 8008e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e18:	6006      	str	r6, [r0, #0]
 8008e1a:	60c6      	str	r6, [r0, #12]
 8008e1c:	69e6      	ldr	r6, [r4, #28]
 8008e1e:	68f3      	ldr	r3, [r6, #12]
 8008e20:	b183      	cbz	r3, 8008e44 <_Balloc+0x50>
 8008e22:	69e3      	ldr	r3, [r4, #28]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e2a:	b9b8      	cbnz	r0, 8008e5c <_Balloc+0x68>
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	fa01 f605 	lsl.w	r6, r1, r5
 8008e32:	1d72      	adds	r2, r6, #5
 8008e34:	4620      	mov	r0, r4
 8008e36:	0092      	lsls	r2, r2, #2
 8008e38:	f000 fda4 	bl	8009984 <_calloc_r>
 8008e3c:	b160      	cbz	r0, 8008e58 <_Balloc+0x64>
 8008e3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e42:	e00e      	b.n	8008e62 <_Balloc+0x6e>
 8008e44:	2221      	movs	r2, #33	@ 0x21
 8008e46:	2104      	movs	r1, #4
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fd9b 	bl	8009984 <_calloc_r>
 8008e4e:	69e3      	ldr	r3, [r4, #28]
 8008e50:	60f0      	str	r0, [r6, #12]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e4      	bne.n	8008e22 <_Balloc+0x2e>
 8008e58:	2000      	movs	r0, #0
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	6802      	ldr	r2, [r0, #0]
 8008e5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e62:	2300      	movs	r3, #0
 8008e64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e68:	e7f7      	b.n	8008e5a <_Balloc+0x66>
 8008e6a:	bf00      	nop
 8008e6c:	0800af51 	.word	0x0800af51
 8008e70:	0800afd1 	.word	0x0800afd1

08008e74 <_Bfree>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	69c6      	ldr	r6, [r0, #28]
 8008e78:	4605      	mov	r5, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	b976      	cbnz	r6, 8008e9c <_Bfree+0x28>
 8008e7e:	2010      	movs	r0, #16
 8008e80:	f7ff ff02 	bl	8008c88 <malloc>
 8008e84:	4602      	mov	r2, r0
 8008e86:	61e8      	str	r0, [r5, #28]
 8008e88:	b920      	cbnz	r0, 8008e94 <_Bfree+0x20>
 8008e8a:	218f      	movs	r1, #143	@ 0x8f
 8008e8c:	4b08      	ldr	r3, [pc, #32]	@ (8008eb0 <_Bfree+0x3c>)
 8008e8e:	4809      	ldr	r0, [pc, #36]	@ (8008eb4 <_Bfree+0x40>)
 8008e90:	f000 fd5a 	bl	8009948 <__assert_func>
 8008e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e98:	6006      	str	r6, [r0, #0]
 8008e9a:	60c6      	str	r6, [r0, #12]
 8008e9c:	b13c      	cbz	r4, 8008eae <_Bfree+0x3a>
 8008e9e:	69eb      	ldr	r3, [r5, #28]
 8008ea0:	6862      	ldr	r2, [r4, #4]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ea8:	6021      	str	r1, [r4, #0]
 8008eaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	0800af51 	.word	0x0800af51
 8008eb4:	0800afd1 	.word	0x0800afd1

08008eb8 <__multadd>:
 8008eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	461e      	mov	r6, r3
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	690d      	ldr	r5, [r1, #16]
 8008ec6:	f101 0c14 	add.w	ip, r1, #20
 8008eca:	f8dc 3000 	ldr.w	r3, [ip]
 8008ece:	3001      	adds	r0, #1
 8008ed0:	b299      	uxth	r1, r3
 8008ed2:	fb02 6101 	mla	r1, r2, r1, r6
 8008ed6:	0c1e      	lsrs	r6, r3, #16
 8008ed8:	0c0b      	lsrs	r3, r1, #16
 8008eda:	fb02 3306 	mla	r3, r2, r6, r3
 8008ede:	b289      	uxth	r1, r1
 8008ee0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ee4:	4285      	cmp	r5, r0
 8008ee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008eea:	f84c 1b04 	str.w	r1, [ip], #4
 8008eee:	dcec      	bgt.n	8008eca <__multadd+0x12>
 8008ef0:	b30e      	cbz	r6, 8008f36 <__multadd+0x7e>
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dc19      	bgt.n	8008f2c <__multadd+0x74>
 8008ef8:	6861      	ldr	r1, [r4, #4]
 8008efa:	4638      	mov	r0, r7
 8008efc:	3101      	adds	r1, #1
 8008efe:	f7ff ff79 	bl	8008df4 <_Balloc>
 8008f02:	4680      	mov	r8, r0
 8008f04:	b928      	cbnz	r0, 8008f12 <__multadd+0x5a>
 8008f06:	4602      	mov	r2, r0
 8008f08:	21ba      	movs	r1, #186	@ 0xba
 8008f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f3c <__multadd+0x84>)
 8008f0c:	480c      	ldr	r0, [pc, #48]	@ (8008f40 <__multadd+0x88>)
 8008f0e:	f000 fd1b 	bl	8009948 <__assert_func>
 8008f12:	6922      	ldr	r2, [r4, #16]
 8008f14:	f104 010c 	add.w	r1, r4, #12
 8008f18:	3202      	adds	r2, #2
 8008f1a:	0092      	lsls	r2, r2, #2
 8008f1c:	300c      	adds	r0, #12
 8008f1e:	f7ff f80c 	bl	8007f3a <memcpy>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff ffa5 	bl	8008e74 <_Bfree>
 8008f2a:	4644      	mov	r4, r8
 8008f2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f30:	3501      	adds	r5, #1
 8008f32:	615e      	str	r6, [r3, #20]
 8008f34:	6125      	str	r5, [r4, #16]
 8008f36:	4620      	mov	r0, r4
 8008f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3c:	0800afc0 	.word	0x0800afc0
 8008f40:	0800afd1 	.word	0x0800afd1

08008f44 <__hi0bits>:
 8008f44:	4603      	mov	r3, r0
 8008f46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f4a:	bf3a      	itte	cc
 8008f4c:	0403      	lslcc	r3, r0, #16
 8008f4e:	2010      	movcc	r0, #16
 8008f50:	2000      	movcs	r0, #0
 8008f52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f56:	bf3c      	itt	cc
 8008f58:	021b      	lslcc	r3, r3, #8
 8008f5a:	3008      	addcc	r0, #8
 8008f5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f60:	bf3c      	itt	cc
 8008f62:	011b      	lslcc	r3, r3, #4
 8008f64:	3004      	addcc	r0, #4
 8008f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f6a:	bf3c      	itt	cc
 8008f6c:	009b      	lslcc	r3, r3, #2
 8008f6e:	3002      	addcc	r0, #2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	db05      	blt.n	8008f80 <__hi0bits+0x3c>
 8008f74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f78:	f100 0001 	add.w	r0, r0, #1
 8008f7c:	bf08      	it	eq
 8008f7e:	2020      	moveq	r0, #32
 8008f80:	4770      	bx	lr

08008f82 <__lo0bits>:
 8008f82:	6803      	ldr	r3, [r0, #0]
 8008f84:	4602      	mov	r2, r0
 8008f86:	f013 0007 	ands.w	r0, r3, #7
 8008f8a:	d00b      	beq.n	8008fa4 <__lo0bits+0x22>
 8008f8c:	07d9      	lsls	r1, r3, #31
 8008f8e:	d421      	bmi.n	8008fd4 <__lo0bits+0x52>
 8008f90:	0798      	lsls	r0, r3, #30
 8008f92:	bf49      	itett	mi
 8008f94:	085b      	lsrmi	r3, r3, #1
 8008f96:	089b      	lsrpl	r3, r3, #2
 8008f98:	2001      	movmi	r0, #1
 8008f9a:	6013      	strmi	r3, [r2, #0]
 8008f9c:	bf5c      	itt	pl
 8008f9e:	2002      	movpl	r0, #2
 8008fa0:	6013      	strpl	r3, [r2, #0]
 8008fa2:	4770      	bx	lr
 8008fa4:	b299      	uxth	r1, r3
 8008fa6:	b909      	cbnz	r1, 8008fac <__lo0bits+0x2a>
 8008fa8:	2010      	movs	r0, #16
 8008faa:	0c1b      	lsrs	r3, r3, #16
 8008fac:	b2d9      	uxtb	r1, r3
 8008fae:	b909      	cbnz	r1, 8008fb4 <__lo0bits+0x32>
 8008fb0:	3008      	adds	r0, #8
 8008fb2:	0a1b      	lsrs	r3, r3, #8
 8008fb4:	0719      	lsls	r1, r3, #28
 8008fb6:	bf04      	itt	eq
 8008fb8:	091b      	lsreq	r3, r3, #4
 8008fba:	3004      	addeq	r0, #4
 8008fbc:	0799      	lsls	r1, r3, #30
 8008fbe:	bf04      	itt	eq
 8008fc0:	089b      	lsreq	r3, r3, #2
 8008fc2:	3002      	addeq	r0, #2
 8008fc4:	07d9      	lsls	r1, r3, #31
 8008fc6:	d403      	bmi.n	8008fd0 <__lo0bits+0x4e>
 8008fc8:	085b      	lsrs	r3, r3, #1
 8008fca:	f100 0001 	add.w	r0, r0, #1
 8008fce:	d003      	beq.n	8008fd8 <__lo0bits+0x56>
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	4770      	bx	lr
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	4770      	bx	lr
 8008fd8:	2020      	movs	r0, #32
 8008fda:	4770      	bx	lr

08008fdc <__i2b>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	460c      	mov	r4, r1
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	f7ff ff07 	bl	8008df4 <_Balloc>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	b928      	cbnz	r0, 8008ff6 <__i2b+0x1a>
 8008fea:	f240 1145 	movw	r1, #325	@ 0x145
 8008fee:	4b04      	ldr	r3, [pc, #16]	@ (8009000 <__i2b+0x24>)
 8008ff0:	4804      	ldr	r0, [pc, #16]	@ (8009004 <__i2b+0x28>)
 8008ff2:	f000 fca9 	bl	8009948 <__assert_func>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	6144      	str	r4, [r0, #20]
 8008ffa:	6103      	str	r3, [r0, #16]
 8008ffc:	bd10      	pop	{r4, pc}
 8008ffe:	bf00      	nop
 8009000:	0800afc0 	.word	0x0800afc0
 8009004:	0800afd1 	.word	0x0800afd1

08009008 <__multiply>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	4614      	mov	r4, r2
 800900e:	690a      	ldr	r2, [r1, #16]
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	460f      	mov	r7, r1
 8009014:	429a      	cmp	r2, r3
 8009016:	bfa2      	ittt	ge
 8009018:	4623      	movge	r3, r4
 800901a:	460c      	movge	r4, r1
 800901c:	461f      	movge	r7, r3
 800901e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009022:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009026:	68a3      	ldr	r3, [r4, #8]
 8009028:	6861      	ldr	r1, [r4, #4]
 800902a:	eb0a 0609 	add.w	r6, sl, r9
 800902e:	42b3      	cmp	r3, r6
 8009030:	b085      	sub	sp, #20
 8009032:	bfb8      	it	lt
 8009034:	3101      	addlt	r1, #1
 8009036:	f7ff fedd 	bl	8008df4 <_Balloc>
 800903a:	b930      	cbnz	r0, 800904a <__multiply+0x42>
 800903c:	4602      	mov	r2, r0
 800903e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009042:	4b43      	ldr	r3, [pc, #268]	@ (8009150 <__multiply+0x148>)
 8009044:	4843      	ldr	r0, [pc, #268]	@ (8009154 <__multiply+0x14c>)
 8009046:	f000 fc7f 	bl	8009948 <__assert_func>
 800904a:	f100 0514 	add.w	r5, r0, #20
 800904e:	462b      	mov	r3, r5
 8009050:	2200      	movs	r2, #0
 8009052:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009056:	4543      	cmp	r3, r8
 8009058:	d321      	bcc.n	800909e <__multiply+0x96>
 800905a:	f107 0114 	add.w	r1, r7, #20
 800905e:	f104 0214 	add.w	r2, r4, #20
 8009062:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009066:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800906a:	9302      	str	r3, [sp, #8]
 800906c:	1b13      	subs	r3, r2, r4
 800906e:	3b15      	subs	r3, #21
 8009070:	f023 0303 	bic.w	r3, r3, #3
 8009074:	3304      	adds	r3, #4
 8009076:	f104 0715 	add.w	r7, r4, #21
 800907a:	42ba      	cmp	r2, r7
 800907c:	bf38      	it	cc
 800907e:	2304      	movcc	r3, #4
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	9b02      	ldr	r3, [sp, #8]
 8009084:	9103      	str	r1, [sp, #12]
 8009086:	428b      	cmp	r3, r1
 8009088:	d80c      	bhi.n	80090a4 <__multiply+0x9c>
 800908a:	2e00      	cmp	r6, #0
 800908c:	dd03      	ble.n	8009096 <__multiply+0x8e>
 800908e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009092:	2b00      	cmp	r3, #0
 8009094:	d05a      	beq.n	800914c <__multiply+0x144>
 8009096:	6106      	str	r6, [r0, #16]
 8009098:	b005      	add	sp, #20
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	f843 2b04 	str.w	r2, [r3], #4
 80090a2:	e7d8      	b.n	8009056 <__multiply+0x4e>
 80090a4:	f8b1 a000 	ldrh.w	sl, [r1]
 80090a8:	f1ba 0f00 	cmp.w	sl, #0
 80090ac:	d023      	beq.n	80090f6 <__multiply+0xee>
 80090ae:	46a9      	mov	r9, r5
 80090b0:	f04f 0c00 	mov.w	ip, #0
 80090b4:	f104 0e14 	add.w	lr, r4, #20
 80090b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090bc:	f8d9 3000 	ldr.w	r3, [r9]
 80090c0:	fa1f fb87 	uxth.w	fp, r7
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	fb0a 330b 	mla	r3, sl, fp, r3
 80090ca:	4463      	add	r3, ip
 80090cc:	f8d9 c000 	ldr.w	ip, [r9]
 80090d0:	0c3f      	lsrs	r7, r7, #16
 80090d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80090d6:	fb0a c707 	mla	r7, sl, r7, ip
 80090da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80090de:	b29b      	uxth	r3, r3
 80090e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80090e4:	4572      	cmp	r2, lr
 80090e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80090ea:	f849 3b04 	str.w	r3, [r9], #4
 80090ee:	d8e3      	bhi.n	80090b8 <__multiply+0xb0>
 80090f0:	9b01      	ldr	r3, [sp, #4]
 80090f2:	f845 c003 	str.w	ip, [r5, r3]
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	3104      	adds	r1, #4
 80090fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090fe:	f1b9 0f00 	cmp.w	r9, #0
 8009102:	d021      	beq.n	8009148 <__multiply+0x140>
 8009104:	46ae      	mov	lr, r5
 8009106:	f04f 0a00 	mov.w	sl, #0
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	f104 0c14 	add.w	ip, r4, #20
 8009110:	f8bc b000 	ldrh.w	fp, [ip]
 8009114:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009118:	b29b      	uxth	r3, r3
 800911a:	fb09 770b 	mla	r7, r9, fp, r7
 800911e:	4457      	add	r7, sl
 8009120:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009124:	f84e 3b04 	str.w	r3, [lr], #4
 8009128:	f85c 3b04 	ldr.w	r3, [ip], #4
 800912c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009130:	f8be 3000 	ldrh.w	r3, [lr]
 8009134:	4562      	cmp	r2, ip
 8009136:	fb09 330a 	mla	r3, r9, sl, r3
 800913a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800913e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009142:	d8e5      	bhi.n	8009110 <__multiply+0x108>
 8009144:	9f01      	ldr	r7, [sp, #4]
 8009146:	51eb      	str	r3, [r5, r7]
 8009148:	3504      	adds	r5, #4
 800914a:	e79a      	b.n	8009082 <__multiply+0x7a>
 800914c:	3e01      	subs	r6, #1
 800914e:	e79c      	b.n	800908a <__multiply+0x82>
 8009150:	0800afc0 	.word	0x0800afc0
 8009154:	0800afd1 	.word	0x0800afd1

08009158 <__pow5mult>:
 8009158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800915c:	4615      	mov	r5, r2
 800915e:	f012 0203 	ands.w	r2, r2, #3
 8009162:	4607      	mov	r7, r0
 8009164:	460e      	mov	r6, r1
 8009166:	d007      	beq.n	8009178 <__pow5mult+0x20>
 8009168:	4c25      	ldr	r4, [pc, #148]	@ (8009200 <__pow5mult+0xa8>)
 800916a:	3a01      	subs	r2, #1
 800916c:	2300      	movs	r3, #0
 800916e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009172:	f7ff fea1 	bl	8008eb8 <__multadd>
 8009176:	4606      	mov	r6, r0
 8009178:	10ad      	asrs	r5, r5, #2
 800917a:	d03d      	beq.n	80091f8 <__pow5mult+0xa0>
 800917c:	69fc      	ldr	r4, [r7, #28]
 800917e:	b97c      	cbnz	r4, 80091a0 <__pow5mult+0x48>
 8009180:	2010      	movs	r0, #16
 8009182:	f7ff fd81 	bl	8008c88 <malloc>
 8009186:	4602      	mov	r2, r0
 8009188:	61f8      	str	r0, [r7, #28]
 800918a:	b928      	cbnz	r0, 8009198 <__pow5mult+0x40>
 800918c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009190:	4b1c      	ldr	r3, [pc, #112]	@ (8009204 <__pow5mult+0xac>)
 8009192:	481d      	ldr	r0, [pc, #116]	@ (8009208 <__pow5mult+0xb0>)
 8009194:	f000 fbd8 	bl	8009948 <__assert_func>
 8009198:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800919c:	6004      	str	r4, [r0, #0]
 800919e:	60c4      	str	r4, [r0, #12]
 80091a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80091a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091a8:	b94c      	cbnz	r4, 80091be <__pow5mult+0x66>
 80091aa:	f240 2171 	movw	r1, #625	@ 0x271
 80091ae:	4638      	mov	r0, r7
 80091b0:	f7ff ff14 	bl	8008fdc <__i2b>
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80091bc:	6003      	str	r3, [r0, #0]
 80091be:	f04f 0900 	mov.w	r9, #0
 80091c2:	07eb      	lsls	r3, r5, #31
 80091c4:	d50a      	bpl.n	80091dc <__pow5mult+0x84>
 80091c6:	4631      	mov	r1, r6
 80091c8:	4622      	mov	r2, r4
 80091ca:	4638      	mov	r0, r7
 80091cc:	f7ff ff1c 	bl	8009008 <__multiply>
 80091d0:	4680      	mov	r8, r0
 80091d2:	4631      	mov	r1, r6
 80091d4:	4638      	mov	r0, r7
 80091d6:	f7ff fe4d 	bl	8008e74 <_Bfree>
 80091da:	4646      	mov	r6, r8
 80091dc:	106d      	asrs	r5, r5, #1
 80091de:	d00b      	beq.n	80091f8 <__pow5mult+0xa0>
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	b938      	cbnz	r0, 80091f4 <__pow5mult+0x9c>
 80091e4:	4622      	mov	r2, r4
 80091e6:	4621      	mov	r1, r4
 80091e8:	4638      	mov	r0, r7
 80091ea:	f7ff ff0d 	bl	8009008 <__multiply>
 80091ee:	6020      	str	r0, [r4, #0]
 80091f0:	f8c0 9000 	str.w	r9, [r0]
 80091f4:	4604      	mov	r4, r0
 80091f6:	e7e4      	b.n	80091c2 <__pow5mult+0x6a>
 80091f8:	4630      	mov	r0, r6
 80091fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091fe:	bf00      	nop
 8009200:	0800b02c 	.word	0x0800b02c
 8009204:	0800af51 	.word	0x0800af51
 8009208:	0800afd1 	.word	0x0800afd1

0800920c <__lshift>:
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	460c      	mov	r4, r1
 8009212:	4607      	mov	r7, r0
 8009214:	4691      	mov	r9, r2
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	6849      	ldr	r1, [r1, #4]
 800921a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009224:	f108 0601 	add.w	r6, r8, #1
 8009228:	42b3      	cmp	r3, r6
 800922a:	db0b      	blt.n	8009244 <__lshift+0x38>
 800922c:	4638      	mov	r0, r7
 800922e:	f7ff fde1 	bl	8008df4 <_Balloc>
 8009232:	4605      	mov	r5, r0
 8009234:	b948      	cbnz	r0, 800924a <__lshift+0x3e>
 8009236:	4602      	mov	r2, r0
 8009238:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800923c:	4b27      	ldr	r3, [pc, #156]	@ (80092dc <__lshift+0xd0>)
 800923e:	4828      	ldr	r0, [pc, #160]	@ (80092e0 <__lshift+0xd4>)
 8009240:	f000 fb82 	bl	8009948 <__assert_func>
 8009244:	3101      	adds	r1, #1
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	e7ee      	b.n	8009228 <__lshift+0x1c>
 800924a:	2300      	movs	r3, #0
 800924c:	f100 0114 	add.w	r1, r0, #20
 8009250:	f100 0210 	add.w	r2, r0, #16
 8009254:	4618      	mov	r0, r3
 8009256:	4553      	cmp	r3, sl
 8009258:	db33      	blt.n	80092c2 <__lshift+0xb6>
 800925a:	6920      	ldr	r0, [r4, #16]
 800925c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009260:	f104 0314 	add.w	r3, r4, #20
 8009264:	f019 091f 	ands.w	r9, r9, #31
 8009268:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800926c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009270:	d02b      	beq.n	80092ca <__lshift+0xbe>
 8009272:	468a      	mov	sl, r1
 8009274:	2200      	movs	r2, #0
 8009276:	f1c9 0e20 	rsb	lr, r9, #32
 800927a:	6818      	ldr	r0, [r3, #0]
 800927c:	fa00 f009 	lsl.w	r0, r0, r9
 8009280:	4310      	orrs	r0, r2
 8009282:	f84a 0b04 	str.w	r0, [sl], #4
 8009286:	f853 2b04 	ldr.w	r2, [r3], #4
 800928a:	459c      	cmp	ip, r3
 800928c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009290:	d8f3      	bhi.n	800927a <__lshift+0x6e>
 8009292:	ebac 0304 	sub.w	r3, ip, r4
 8009296:	3b15      	subs	r3, #21
 8009298:	f023 0303 	bic.w	r3, r3, #3
 800929c:	3304      	adds	r3, #4
 800929e:	f104 0015 	add.w	r0, r4, #21
 80092a2:	4584      	cmp	ip, r0
 80092a4:	bf38      	it	cc
 80092a6:	2304      	movcc	r3, #4
 80092a8:	50ca      	str	r2, [r1, r3]
 80092aa:	b10a      	cbz	r2, 80092b0 <__lshift+0xa4>
 80092ac:	f108 0602 	add.w	r6, r8, #2
 80092b0:	3e01      	subs	r6, #1
 80092b2:	4638      	mov	r0, r7
 80092b4:	4621      	mov	r1, r4
 80092b6:	612e      	str	r6, [r5, #16]
 80092b8:	f7ff fddc 	bl	8008e74 <_Bfree>
 80092bc:	4628      	mov	r0, r5
 80092be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80092c6:	3301      	adds	r3, #1
 80092c8:	e7c5      	b.n	8009256 <__lshift+0x4a>
 80092ca:	3904      	subs	r1, #4
 80092cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092d0:	459c      	cmp	ip, r3
 80092d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80092d6:	d8f9      	bhi.n	80092cc <__lshift+0xc0>
 80092d8:	e7ea      	b.n	80092b0 <__lshift+0xa4>
 80092da:	bf00      	nop
 80092dc:	0800afc0 	.word	0x0800afc0
 80092e0:	0800afd1 	.word	0x0800afd1

080092e4 <__mcmp>:
 80092e4:	4603      	mov	r3, r0
 80092e6:	690a      	ldr	r2, [r1, #16]
 80092e8:	6900      	ldr	r0, [r0, #16]
 80092ea:	b530      	push	{r4, r5, lr}
 80092ec:	1a80      	subs	r0, r0, r2
 80092ee:	d10e      	bne.n	800930e <__mcmp+0x2a>
 80092f0:	3314      	adds	r3, #20
 80092f2:	3114      	adds	r1, #20
 80092f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009300:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009304:	4295      	cmp	r5, r2
 8009306:	d003      	beq.n	8009310 <__mcmp+0x2c>
 8009308:	d205      	bcs.n	8009316 <__mcmp+0x32>
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	bd30      	pop	{r4, r5, pc}
 8009310:	42a3      	cmp	r3, r4
 8009312:	d3f3      	bcc.n	80092fc <__mcmp+0x18>
 8009314:	e7fb      	b.n	800930e <__mcmp+0x2a>
 8009316:	2001      	movs	r0, #1
 8009318:	e7f9      	b.n	800930e <__mcmp+0x2a>
	...

0800931c <__mdiff>:
 800931c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	4689      	mov	r9, r1
 8009322:	4606      	mov	r6, r0
 8009324:	4611      	mov	r1, r2
 8009326:	4648      	mov	r0, r9
 8009328:	4614      	mov	r4, r2
 800932a:	f7ff ffdb 	bl	80092e4 <__mcmp>
 800932e:	1e05      	subs	r5, r0, #0
 8009330:	d112      	bne.n	8009358 <__mdiff+0x3c>
 8009332:	4629      	mov	r1, r5
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff fd5d 	bl	8008df4 <_Balloc>
 800933a:	4602      	mov	r2, r0
 800933c:	b928      	cbnz	r0, 800934a <__mdiff+0x2e>
 800933e:	f240 2137 	movw	r1, #567	@ 0x237
 8009342:	4b3e      	ldr	r3, [pc, #248]	@ (800943c <__mdiff+0x120>)
 8009344:	483e      	ldr	r0, [pc, #248]	@ (8009440 <__mdiff+0x124>)
 8009346:	f000 faff 	bl	8009948 <__assert_func>
 800934a:	2301      	movs	r3, #1
 800934c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009350:	4610      	mov	r0, r2
 8009352:	b003      	add	sp, #12
 8009354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009358:	bfbc      	itt	lt
 800935a:	464b      	movlt	r3, r9
 800935c:	46a1      	movlt	r9, r4
 800935e:	4630      	mov	r0, r6
 8009360:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009364:	bfba      	itte	lt
 8009366:	461c      	movlt	r4, r3
 8009368:	2501      	movlt	r5, #1
 800936a:	2500      	movge	r5, #0
 800936c:	f7ff fd42 	bl	8008df4 <_Balloc>
 8009370:	4602      	mov	r2, r0
 8009372:	b918      	cbnz	r0, 800937c <__mdiff+0x60>
 8009374:	f240 2145 	movw	r1, #581	@ 0x245
 8009378:	4b30      	ldr	r3, [pc, #192]	@ (800943c <__mdiff+0x120>)
 800937a:	e7e3      	b.n	8009344 <__mdiff+0x28>
 800937c:	f100 0b14 	add.w	fp, r0, #20
 8009380:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009384:	f109 0310 	add.w	r3, r9, #16
 8009388:	60c5      	str	r5, [r0, #12]
 800938a:	f04f 0c00 	mov.w	ip, #0
 800938e:	f109 0514 	add.w	r5, r9, #20
 8009392:	46d9      	mov	r9, fp
 8009394:	6926      	ldr	r6, [r4, #16]
 8009396:	f104 0e14 	add.w	lr, r4, #20
 800939a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800939e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	9b01      	ldr	r3, [sp, #4]
 80093a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80093aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80093ae:	b281      	uxth	r1, r0
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	fa1f f38a 	uxth.w	r3, sl
 80093b6:	1a5b      	subs	r3, r3, r1
 80093b8:	0c00      	lsrs	r0, r0, #16
 80093ba:	4463      	add	r3, ip
 80093bc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80093c0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80093ca:	4576      	cmp	r6, lr
 80093cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093d0:	f849 3b04 	str.w	r3, [r9], #4
 80093d4:	d8e6      	bhi.n	80093a4 <__mdiff+0x88>
 80093d6:	1b33      	subs	r3, r6, r4
 80093d8:	3b15      	subs	r3, #21
 80093da:	f023 0303 	bic.w	r3, r3, #3
 80093de:	3415      	adds	r4, #21
 80093e0:	3304      	adds	r3, #4
 80093e2:	42a6      	cmp	r6, r4
 80093e4:	bf38      	it	cc
 80093e6:	2304      	movcc	r3, #4
 80093e8:	441d      	add	r5, r3
 80093ea:	445b      	add	r3, fp
 80093ec:	461e      	mov	r6, r3
 80093ee:	462c      	mov	r4, r5
 80093f0:	4544      	cmp	r4, r8
 80093f2:	d30e      	bcc.n	8009412 <__mdiff+0xf6>
 80093f4:	f108 0103 	add.w	r1, r8, #3
 80093f8:	1b49      	subs	r1, r1, r5
 80093fa:	f021 0103 	bic.w	r1, r1, #3
 80093fe:	3d03      	subs	r5, #3
 8009400:	45a8      	cmp	r8, r5
 8009402:	bf38      	it	cc
 8009404:	2100      	movcc	r1, #0
 8009406:	440b      	add	r3, r1
 8009408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800940c:	b199      	cbz	r1, 8009436 <__mdiff+0x11a>
 800940e:	6117      	str	r7, [r2, #16]
 8009410:	e79e      	b.n	8009350 <__mdiff+0x34>
 8009412:	46e6      	mov	lr, ip
 8009414:	f854 1b04 	ldr.w	r1, [r4], #4
 8009418:	fa1f fc81 	uxth.w	ip, r1
 800941c:	44f4      	add	ip, lr
 800941e:	0c08      	lsrs	r0, r1, #16
 8009420:	4471      	add	r1, lr
 8009422:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009426:	b289      	uxth	r1, r1
 8009428:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800942c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009430:	f846 1b04 	str.w	r1, [r6], #4
 8009434:	e7dc      	b.n	80093f0 <__mdiff+0xd4>
 8009436:	3f01      	subs	r7, #1
 8009438:	e7e6      	b.n	8009408 <__mdiff+0xec>
 800943a:	bf00      	nop
 800943c:	0800afc0 	.word	0x0800afc0
 8009440:	0800afd1 	.word	0x0800afd1

08009444 <__d2b>:
 8009444:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009448:	2101      	movs	r1, #1
 800944a:	4690      	mov	r8, r2
 800944c:	4699      	mov	r9, r3
 800944e:	9e08      	ldr	r6, [sp, #32]
 8009450:	f7ff fcd0 	bl	8008df4 <_Balloc>
 8009454:	4604      	mov	r4, r0
 8009456:	b930      	cbnz	r0, 8009466 <__d2b+0x22>
 8009458:	4602      	mov	r2, r0
 800945a:	f240 310f 	movw	r1, #783	@ 0x30f
 800945e:	4b23      	ldr	r3, [pc, #140]	@ (80094ec <__d2b+0xa8>)
 8009460:	4823      	ldr	r0, [pc, #140]	@ (80094f0 <__d2b+0xac>)
 8009462:	f000 fa71 	bl	8009948 <__assert_func>
 8009466:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800946a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800946e:	b10d      	cbz	r5, 8009474 <__d2b+0x30>
 8009470:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	f1b8 0300 	subs.w	r3, r8, #0
 800947a:	d024      	beq.n	80094c6 <__d2b+0x82>
 800947c:	4668      	mov	r0, sp
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	f7ff fd7f 	bl	8008f82 <__lo0bits>
 8009484:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009488:	b1d8      	cbz	r0, 80094c2 <__d2b+0x7e>
 800948a:	f1c0 0320 	rsb	r3, r0, #32
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	430b      	orrs	r3, r1
 8009494:	40c2      	lsrs	r2, r0
 8009496:	6163      	str	r3, [r4, #20]
 8009498:	9201      	str	r2, [sp, #4]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf0c      	ite	eq
 80094a0:	2201      	moveq	r2, #1
 80094a2:	2202      	movne	r2, #2
 80094a4:	61a3      	str	r3, [r4, #24]
 80094a6:	6122      	str	r2, [r4, #16]
 80094a8:	b1ad      	cbz	r5, 80094d6 <__d2b+0x92>
 80094aa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094ae:	4405      	add	r5, r0
 80094b0:	6035      	str	r5, [r6, #0]
 80094b2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b8:	6018      	str	r0, [r3, #0]
 80094ba:	4620      	mov	r0, r4
 80094bc:	b002      	add	sp, #8
 80094be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80094c2:	6161      	str	r1, [r4, #20]
 80094c4:	e7e9      	b.n	800949a <__d2b+0x56>
 80094c6:	a801      	add	r0, sp, #4
 80094c8:	f7ff fd5b 	bl	8008f82 <__lo0bits>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	6163      	str	r3, [r4, #20]
 80094d2:	3020      	adds	r0, #32
 80094d4:	e7e7      	b.n	80094a6 <__d2b+0x62>
 80094d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094de:	6030      	str	r0, [r6, #0]
 80094e0:	6918      	ldr	r0, [r3, #16]
 80094e2:	f7ff fd2f 	bl	8008f44 <__hi0bits>
 80094e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094ea:	e7e4      	b.n	80094b6 <__d2b+0x72>
 80094ec:	0800afc0 	.word	0x0800afc0
 80094f0:	0800afd1 	.word	0x0800afd1

080094f4 <__ssputs_r>:
 80094f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	461f      	mov	r7, r3
 80094fa:	688e      	ldr	r6, [r1, #8]
 80094fc:	4682      	mov	sl, r0
 80094fe:	42be      	cmp	r6, r7
 8009500:	460c      	mov	r4, r1
 8009502:	4690      	mov	r8, r2
 8009504:	680b      	ldr	r3, [r1, #0]
 8009506:	d82d      	bhi.n	8009564 <__ssputs_r+0x70>
 8009508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800950c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009510:	d026      	beq.n	8009560 <__ssputs_r+0x6c>
 8009512:	6965      	ldr	r5, [r4, #20]
 8009514:	6909      	ldr	r1, [r1, #16]
 8009516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800951a:	eba3 0901 	sub.w	r9, r3, r1
 800951e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009522:	1c7b      	adds	r3, r7, #1
 8009524:	444b      	add	r3, r9
 8009526:	106d      	asrs	r5, r5, #1
 8009528:	429d      	cmp	r5, r3
 800952a:	bf38      	it	cc
 800952c:	461d      	movcc	r5, r3
 800952e:	0553      	lsls	r3, r2, #21
 8009530:	d527      	bpl.n	8009582 <__ssputs_r+0x8e>
 8009532:	4629      	mov	r1, r5
 8009534:	f7ff fbd2 	bl	8008cdc <_malloc_r>
 8009538:	4606      	mov	r6, r0
 800953a:	b360      	cbz	r0, 8009596 <__ssputs_r+0xa2>
 800953c:	464a      	mov	r2, r9
 800953e:	6921      	ldr	r1, [r4, #16]
 8009540:	f7fe fcfb 	bl	8007f3a <memcpy>
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800954a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800954e:	81a3      	strh	r3, [r4, #12]
 8009550:	6126      	str	r6, [r4, #16]
 8009552:	444e      	add	r6, r9
 8009554:	6026      	str	r6, [r4, #0]
 8009556:	463e      	mov	r6, r7
 8009558:	6165      	str	r5, [r4, #20]
 800955a:	eba5 0509 	sub.w	r5, r5, r9
 800955e:	60a5      	str	r5, [r4, #8]
 8009560:	42be      	cmp	r6, r7
 8009562:	d900      	bls.n	8009566 <__ssputs_r+0x72>
 8009564:	463e      	mov	r6, r7
 8009566:	4632      	mov	r2, r6
 8009568:	4641      	mov	r1, r8
 800956a:	6820      	ldr	r0, [r4, #0]
 800956c:	f000 f9c2 	bl	80098f4 <memmove>
 8009570:	2000      	movs	r0, #0
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	1b9b      	subs	r3, r3, r6
 8009576:	60a3      	str	r3, [r4, #8]
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	4433      	add	r3, r6
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009582:	462a      	mov	r2, r5
 8009584:	f000 fa24 	bl	80099d0 <_realloc_r>
 8009588:	4606      	mov	r6, r0
 800958a:	2800      	cmp	r0, #0
 800958c:	d1e0      	bne.n	8009550 <__ssputs_r+0x5c>
 800958e:	4650      	mov	r0, sl
 8009590:	6921      	ldr	r1, [r4, #16]
 8009592:	f7ff fb31 	bl	8008bf8 <_free_r>
 8009596:	230c      	movs	r3, #12
 8009598:	f8ca 3000 	str.w	r3, [sl]
 800959c:	89a3      	ldrh	r3, [r4, #12]
 800959e:	f04f 30ff 	mov.w	r0, #4294967295
 80095a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095a6:	81a3      	strh	r3, [r4, #12]
 80095a8:	e7e9      	b.n	800957e <__ssputs_r+0x8a>
	...

080095ac <_svfiprintf_r>:
 80095ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b0:	4698      	mov	r8, r3
 80095b2:	898b      	ldrh	r3, [r1, #12]
 80095b4:	4607      	mov	r7, r0
 80095b6:	061b      	lsls	r3, r3, #24
 80095b8:	460d      	mov	r5, r1
 80095ba:	4614      	mov	r4, r2
 80095bc:	b09d      	sub	sp, #116	@ 0x74
 80095be:	d510      	bpl.n	80095e2 <_svfiprintf_r+0x36>
 80095c0:	690b      	ldr	r3, [r1, #16]
 80095c2:	b973      	cbnz	r3, 80095e2 <_svfiprintf_r+0x36>
 80095c4:	2140      	movs	r1, #64	@ 0x40
 80095c6:	f7ff fb89 	bl	8008cdc <_malloc_r>
 80095ca:	6028      	str	r0, [r5, #0]
 80095cc:	6128      	str	r0, [r5, #16]
 80095ce:	b930      	cbnz	r0, 80095de <_svfiprintf_r+0x32>
 80095d0:	230c      	movs	r3, #12
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	b01d      	add	sp, #116	@ 0x74
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095de:	2340      	movs	r3, #64	@ 0x40
 80095e0:	616b      	str	r3, [r5, #20]
 80095e2:	2300      	movs	r3, #0
 80095e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e6:	2320      	movs	r3, #32
 80095e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095ec:	2330      	movs	r3, #48	@ 0x30
 80095ee:	f04f 0901 	mov.w	r9, #1
 80095f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009790 <_svfiprintf_r+0x1e4>
 80095fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095fe:	4623      	mov	r3, r4
 8009600:	469a      	mov	sl, r3
 8009602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009606:	b10a      	cbz	r2, 800960c <_svfiprintf_r+0x60>
 8009608:	2a25      	cmp	r2, #37	@ 0x25
 800960a:	d1f9      	bne.n	8009600 <_svfiprintf_r+0x54>
 800960c:	ebba 0b04 	subs.w	fp, sl, r4
 8009610:	d00b      	beq.n	800962a <_svfiprintf_r+0x7e>
 8009612:	465b      	mov	r3, fp
 8009614:	4622      	mov	r2, r4
 8009616:	4629      	mov	r1, r5
 8009618:	4638      	mov	r0, r7
 800961a:	f7ff ff6b 	bl	80094f4 <__ssputs_r>
 800961e:	3001      	adds	r0, #1
 8009620:	f000 80a7 	beq.w	8009772 <_svfiprintf_r+0x1c6>
 8009624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009626:	445a      	add	r2, fp
 8009628:	9209      	str	r2, [sp, #36]	@ 0x24
 800962a:	f89a 3000 	ldrb.w	r3, [sl]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 809f 	beq.w	8009772 <_svfiprintf_r+0x1c6>
 8009634:	2300      	movs	r3, #0
 8009636:	f04f 32ff 	mov.w	r2, #4294967295
 800963a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800963e:	f10a 0a01 	add.w	sl, sl, #1
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	9307      	str	r3, [sp, #28]
 8009646:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800964a:	931a      	str	r3, [sp, #104]	@ 0x68
 800964c:	4654      	mov	r4, sl
 800964e:	2205      	movs	r2, #5
 8009650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009654:	484e      	ldr	r0, [pc, #312]	@ (8009790 <_svfiprintf_r+0x1e4>)
 8009656:	f7fe fc62 	bl	8007f1e <memchr>
 800965a:	9a04      	ldr	r2, [sp, #16]
 800965c:	b9d8      	cbnz	r0, 8009696 <_svfiprintf_r+0xea>
 800965e:	06d0      	lsls	r0, r2, #27
 8009660:	bf44      	itt	mi
 8009662:	2320      	movmi	r3, #32
 8009664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009668:	0711      	lsls	r1, r2, #28
 800966a:	bf44      	itt	mi
 800966c:	232b      	movmi	r3, #43	@ 0x2b
 800966e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009672:	f89a 3000 	ldrb.w	r3, [sl]
 8009676:	2b2a      	cmp	r3, #42	@ 0x2a
 8009678:	d015      	beq.n	80096a6 <_svfiprintf_r+0xfa>
 800967a:	4654      	mov	r4, sl
 800967c:	2000      	movs	r0, #0
 800967e:	f04f 0c0a 	mov.w	ip, #10
 8009682:	9a07      	ldr	r2, [sp, #28]
 8009684:	4621      	mov	r1, r4
 8009686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800968a:	3b30      	subs	r3, #48	@ 0x30
 800968c:	2b09      	cmp	r3, #9
 800968e:	d94b      	bls.n	8009728 <_svfiprintf_r+0x17c>
 8009690:	b1b0      	cbz	r0, 80096c0 <_svfiprintf_r+0x114>
 8009692:	9207      	str	r2, [sp, #28]
 8009694:	e014      	b.n	80096c0 <_svfiprintf_r+0x114>
 8009696:	eba0 0308 	sub.w	r3, r0, r8
 800969a:	fa09 f303 	lsl.w	r3, r9, r3
 800969e:	4313      	orrs	r3, r2
 80096a0:	46a2      	mov	sl, r4
 80096a2:	9304      	str	r3, [sp, #16]
 80096a4:	e7d2      	b.n	800964c <_svfiprintf_r+0xa0>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	1d19      	adds	r1, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9103      	str	r1, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfbb      	ittet	lt
 80096b2:	425b      	neglt	r3, r3
 80096b4:	f042 0202 	orrlt.w	r2, r2, #2
 80096b8:	9307      	strge	r3, [sp, #28]
 80096ba:	9307      	strlt	r3, [sp, #28]
 80096bc:	bfb8      	it	lt
 80096be:	9204      	strlt	r2, [sp, #16]
 80096c0:	7823      	ldrb	r3, [r4, #0]
 80096c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80096c4:	d10a      	bne.n	80096dc <_svfiprintf_r+0x130>
 80096c6:	7863      	ldrb	r3, [r4, #1]
 80096c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80096ca:	d132      	bne.n	8009732 <_svfiprintf_r+0x186>
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	3402      	adds	r4, #2
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	9203      	str	r2, [sp, #12]
 80096d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009794 <_svfiprintf_r+0x1e8>
 80096e0:	2203      	movs	r2, #3
 80096e2:	4650      	mov	r0, sl
 80096e4:	7821      	ldrb	r1, [r4, #0]
 80096e6:	f7fe fc1a 	bl	8007f1e <memchr>
 80096ea:	b138      	cbz	r0, 80096fc <_svfiprintf_r+0x150>
 80096ec:	2240      	movs	r2, #64	@ 0x40
 80096ee:	9b04      	ldr	r3, [sp, #16]
 80096f0:	eba0 000a 	sub.w	r0, r0, sl
 80096f4:	4082      	lsls	r2, r0
 80096f6:	4313      	orrs	r3, r2
 80096f8:	3401      	adds	r4, #1
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009700:	2206      	movs	r2, #6
 8009702:	4825      	ldr	r0, [pc, #148]	@ (8009798 <_svfiprintf_r+0x1ec>)
 8009704:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009708:	f7fe fc09 	bl	8007f1e <memchr>
 800970c:	2800      	cmp	r0, #0
 800970e:	d036      	beq.n	800977e <_svfiprintf_r+0x1d2>
 8009710:	4b22      	ldr	r3, [pc, #136]	@ (800979c <_svfiprintf_r+0x1f0>)
 8009712:	bb1b      	cbnz	r3, 800975c <_svfiprintf_r+0x1b0>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	3307      	adds	r3, #7
 8009718:	f023 0307 	bic.w	r3, r3, #7
 800971c:	3308      	adds	r3, #8
 800971e:	9303      	str	r3, [sp, #12]
 8009720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009722:	4433      	add	r3, r6
 8009724:	9309      	str	r3, [sp, #36]	@ 0x24
 8009726:	e76a      	b.n	80095fe <_svfiprintf_r+0x52>
 8009728:	460c      	mov	r4, r1
 800972a:	2001      	movs	r0, #1
 800972c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009730:	e7a8      	b.n	8009684 <_svfiprintf_r+0xd8>
 8009732:	2300      	movs	r3, #0
 8009734:	f04f 0c0a 	mov.w	ip, #10
 8009738:	4619      	mov	r1, r3
 800973a:	3401      	adds	r4, #1
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	4620      	mov	r0, r4
 8009740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009744:	3a30      	subs	r2, #48	@ 0x30
 8009746:	2a09      	cmp	r2, #9
 8009748:	d903      	bls.n	8009752 <_svfiprintf_r+0x1a6>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0c6      	beq.n	80096dc <_svfiprintf_r+0x130>
 800974e:	9105      	str	r1, [sp, #20]
 8009750:	e7c4      	b.n	80096dc <_svfiprintf_r+0x130>
 8009752:	4604      	mov	r4, r0
 8009754:	2301      	movs	r3, #1
 8009756:	fb0c 2101 	mla	r1, ip, r1, r2
 800975a:	e7f0      	b.n	800973e <_svfiprintf_r+0x192>
 800975c:	ab03      	add	r3, sp, #12
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	462a      	mov	r2, r5
 8009762:	4638      	mov	r0, r7
 8009764:	4b0e      	ldr	r3, [pc, #56]	@ (80097a0 <_svfiprintf_r+0x1f4>)
 8009766:	a904      	add	r1, sp, #16
 8009768:	f7fd fe76 	bl	8007458 <_printf_float>
 800976c:	1c42      	adds	r2, r0, #1
 800976e:	4606      	mov	r6, r0
 8009770:	d1d6      	bne.n	8009720 <_svfiprintf_r+0x174>
 8009772:	89ab      	ldrh	r3, [r5, #12]
 8009774:	065b      	lsls	r3, r3, #25
 8009776:	f53f af2d 	bmi.w	80095d4 <_svfiprintf_r+0x28>
 800977a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800977c:	e72c      	b.n	80095d8 <_svfiprintf_r+0x2c>
 800977e:	ab03      	add	r3, sp, #12
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	462a      	mov	r2, r5
 8009784:	4638      	mov	r0, r7
 8009786:	4b06      	ldr	r3, [pc, #24]	@ (80097a0 <_svfiprintf_r+0x1f4>)
 8009788:	a904      	add	r1, sp, #16
 800978a:	f7fe f903 	bl	8007994 <_printf_i>
 800978e:	e7ed      	b.n	800976c <_svfiprintf_r+0x1c0>
 8009790:	0800b128 	.word	0x0800b128
 8009794:	0800b12e 	.word	0x0800b12e
 8009798:	0800b132 	.word	0x0800b132
 800979c:	08007459 	.word	0x08007459
 80097a0:	080094f5 	.word	0x080094f5

080097a4 <__sflush_r>:
 80097a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	0716      	lsls	r6, r2, #28
 80097ac:	4605      	mov	r5, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	d454      	bmi.n	800985c <__sflush_r+0xb8>
 80097b2:	684b      	ldr	r3, [r1, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	dc02      	bgt.n	80097be <__sflush_r+0x1a>
 80097b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	dd48      	ble.n	8009850 <__sflush_r+0xac>
 80097be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097c0:	2e00      	cmp	r6, #0
 80097c2:	d045      	beq.n	8009850 <__sflush_r+0xac>
 80097c4:	2300      	movs	r3, #0
 80097c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097ca:	682f      	ldr	r7, [r5, #0]
 80097cc:	6a21      	ldr	r1, [r4, #32]
 80097ce:	602b      	str	r3, [r5, #0]
 80097d0:	d030      	beq.n	8009834 <__sflush_r+0x90>
 80097d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	0759      	lsls	r1, r3, #29
 80097d8:	d505      	bpl.n	80097e6 <__sflush_r+0x42>
 80097da:	6863      	ldr	r3, [r4, #4]
 80097dc:	1ad2      	subs	r2, r2, r3
 80097de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097e0:	b10b      	cbz	r3, 80097e6 <__sflush_r+0x42>
 80097e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097e4:	1ad2      	subs	r2, r2, r3
 80097e6:	2300      	movs	r3, #0
 80097e8:	4628      	mov	r0, r5
 80097ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097ec:	6a21      	ldr	r1, [r4, #32]
 80097ee:	47b0      	blx	r6
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	d106      	bne.n	8009804 <__sflush_r+0x60>
 80097f6:	6829      	ldr	r1, [r5, #0]
 80097f8:	291d      	cmp	r1, #29
 80097fa:	d82b      	bhi.n	8009854 <__sflush_r+0xb0>
 80097fc:	4a28      	ldr	r2, [pc, #160]	@ (80098a0 <__sflush_r+0xfc>)
 80097fe:	410a      	asrs	r2, r1
 8009800:	07d6      	lsls	r6, r2, #31
 8009802:	d427      	bmi.n	8009854 <__sflush_r+0xb0>
 8009804:	2200      	movs	r2, #0
 8009806:	6062      	str	r2, [r4, #4]
 8009808:	6922      	ldr	r2, [r4, #16]
 800980a:	04d9      	lsls	r1, r3, #19
 800980c:	6022      	str	r2, [r4, #0]
 800980e:	d504      	bpl.n	800981a <__sflush_r+0x76>
 8009810:	1c42      	adds	r2, r0, #1
 8009812:	d101      	bne.n	8009818 <__sflush_r+0x74>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b903      	cbnz	r3, 800981a <__sflush_r+0x76>
 8009818:	6560      	str	r0, [r4, #84]	@ 0x54
 800981a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800981c:	602f      	str	r7, [r5, #0]
 800981e:	b1b9      	cbz	r1, 8009850 <__sflush_r+0xac>
 8009820:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009824:	4299      	cmp	r1, r3
 8009826:	d002      	beq.n	800982e <__sflush_r+0x8a>
 8009828:	4628      	mov	r0, r5
 800982a:	f7ff f9e5 	bl	8008bf8 <_free_r>
 800982e:	2300      	movs	r3, #0
 8009830:	6363      	str	r3, [r4, #52]	@ 0x34
 8009832:	e00d      	b.n	8009850 <__sflush_r+0xac>
 8009834:	2301      	movs	r3, #1
 8009836:	4628      	mov	r0, r5
 8009838:	47b0      	blx	r6
 800983a:	4602      	mov	r2, r0
 800983c:	1c50      	adds	r0, r2, #1
 800983e:	d1c9      	bne.n	80097d4 <__sflush_r+0x30>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0c6      	beq.n	80097d4 <__sflush_r+0x30>
 8009846:	2b1d      	cmp	r3, #29
 8009848:	d001      	beq.n	800984e <__sflush_r+0xaa>
 800984a:	2b16      	cmp	r3, #22
 800984c:	d11d      	bne.n	800988a <__sflush_r+0xe6>
 800984e:	602f      	str	r7, [r5, #0]
 8009850:	2000      	movs	r0, #0
 8009852:	e021      	b.n	8009898 <__sflush_r+0xf4>
 8009854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009858:	b21b      	sxth	r3, r3
 800985a:	e01a      	b.n	8009892 <__sflush_r+0xee>
 800985c:	690f      	ldr	r7, [r1, #16]
 800985e:	2f00      	cmp	r7, #0
 8009860:	d0f6      	beq.n	8009850 <__sflush_r+0xac>
 8009862:	0793      	lsls	r3, r2, #30
 8009864:	bf18      	it	ne
 8009866:	2300      	movne	r3, #0
 8009868:	680e      	ldr	r6, [r1, #0]
 800986a:	bf08      	it	eq
 800986c:	694b      	ldreq	r3, [r1, #20]
 800986e:	1bf6      	subs	r6, r6, r7
 8009870:	600f      	str	r7, [r1, #0]
 8009872:	608b      	str	r3, [r1, #8]
 8009874:	2e00      	cmp	r6, #0
 8009876:	ddeb      	ble.n	8009850 <__sflush_r+0xac>
 8009878:	4633      	mov	r3, r6
 800987a:	463a      	mov	r2, r7
 800987c:	4628      	mov	r0, r5
 800987e:	6a21      	ldr	r1, [r4, #32]
 8009880:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009884:	47e0      	blx	ip
 8009886:	2800      	cmp	r0, #0
 8009888:	dc07      	bgt.n	800989a <__sflush_r+0xf6>
 800988a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800988e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009892:	f04f 30ff 	mov.w	r0, #4294967295
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800989a:	4407      	add	r7, r0
 800989c:	1a36      	subs	r6, r6, r0
 800989e:	e7e9      	b.n	8009874 <__sflush_r+0xd0>
 80098a0:	dfbffffe 	.word	0xdfbffffe

080098a4 <_fflush_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	690b      	ldr	r3, [r1, #16]
 80098a8:	4605      	mov	r5, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	b913      	cbnz	r3, 80098b4 <_fflush_r+0x10>
 80098ae:	2500      	movs	r5, #0
 80098b0:	4628      	mov	r0, r5
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	b118      	cbz	r0, 80098be <_fflush_r+0x1a>
 80098b6:	6a03      	ldr	r3, [r0, #32]
 80098b8:	b90b      	cbnz	r3, 80098be <_fflush_r+0x1a>
 80098ba:	f7fe fa17 	bl	8007cec <__sinit>
 80098be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0f3      	beq.n	80098ae <_fflush_r+0xa>
 80098c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098c8:	07d0      	lsls	r0, r2, #31
 80098ca:	d404      	bmi.n	80098d6 <_fflush_r+0x32>
 80098cc:	0599      	lsls	r1, r3, #22
 80098ce:	d402      	bmi.n	80098d6 <_fflush_r+0x32>
 80098d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098d2:	f7fe fb22 	bl	8007f1a <__retarget_lock_acquire_recursive>
 80098d6:	4628      	mov	r0, r5
 80098d8:	4621      	mov	r1, r4
 80098da:	f7ff ff63 	bl	80097a4 <__sflush_r>
 80098de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098e0:	4605      	mov	r5, r0
 80098e2:	07da      	lsls	r2, r3, #31
 80098e4:	d4e4      	bmi.n	80098b0 <_fflush_r+0xc>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	059b      	lsls	r3, r3, #22
 80098ea:	d4e1      	bmi.n	80098b0 <_fflush_r+0xc>
 80098ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ee:	f7fe fb15 	bl	8007f1c <__retarget_lock_release_recursive>
 80098f2:	e7dd      	b.n	80098b0 <_fflush_r+0xc>

080098f4 <memmove>:
 80098f4:	4288      	cmp	r0, r1
 80098f6:	b510      	push	{r4, lr}
 80098f8:	eb01 0402 	add.w	r4, r1, r2
 80098fc:	d902      	bls.n	8009904 <memmove+0x10>
 80098fe:	4284      	cmp	r4, r0
 8009900:	4623      	mov	r3, r4
 8009902:	d807      	bhi.n	8009914 <memmove+0x20>
 8009904:	1e43      	subs	r3, r0, #1
 8009906:	42a1      	cmp	r1, r4
 8009908:	d008      	beq.n	800991c <memmove+0x28>
 800990a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800990e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009912:	e7f8      	b.n	8009906 <memmove+0x12>
 8009914:	4601      	mov	r1, r0
 8009916:	4402      	add	r2, r0
 8009918:	428a      	cmp	r2, r1
 800991a:	d100      	bne.n	800991e <memmove+0x2a>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009926:	e7f7      	b.n	8009918 <memmove+0x24>

08009928 <_sbrk_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	2300      	movs	r3, #0
 800992c:	4d05      	ldr	r5, [pc, #20]	@ (8009944 <_sbrk_r+0x1c>)
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	602b      	str	r3, [r5, #0]
 8009934:	f7f8 f85e 	bl	80019f4 <_sbrk>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_sbrk_r+0x1a>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_sbrk_r+0x1a>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	20002408 	.word	0x20002408

08009948 <__assert_func>:
 8009948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800994a:	4614      	mov	r4, r2
 800994c:	461a      	mov	r2, r3
 800994e:	4b09      	ldr	r3, [pc, #36]	@ (8009974 <__assert_func+0x2c>)
 8009950:	4605      	mov	r5, r0
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68d8      	ldr	r0, [r3, #12]
 8009956:	b954      	cbnz	r4, 800996e <__assert_func+0x26>
 8009958:	4b07      	ldr	r3, [pc, #28]	@ (8009978 <__assert_func+0x30>)
 800995a:	461c      	mov	r4, r3
 800995c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009960:	9100      	str	r1, [sp, #0]
 8009962:	462b      	mov	r3, r5
 8009964:	4905      	ldr	r1, [pc, #20]	@ (800997c <__assert_func+0x34>)
 8009966:	f000 f86f 	bl	8009a48 <fiprintf>
 800996a:	f000 f87f 	bl	8009a6c <abort>
 800996e:	4b04      	ldr	r3, [pc, #16]	@ (8009980 <__assert_func+0x38>)
 8009970:	e7f4      	b.n	800995c <__assert_func+0x14>
 8009972:	bf00      	nop
 8009974:	20000024 	.word	0x20000024
 8009978:	0800b17e 	.word	0x0800b17e
 800997c:	0800b150 	.word	0x0800b150
 8009980:	0800b143 	.word	0x0800b143

08009984 <_calloc_r>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	fba1 5402 	umull	r5, r4, r1, r2
 800998a:	b93c      	cbnz	r4, 800999c <_calloc_r+0x18>
 800998c:	4629      	mov	r1, r5
 800998e:	f7ff f9a5 	bl	8008cdc <_malloc_r>
 8009992:	4606      	mov	r6, r0
 8009994:	b928      	cbnz	r0, 80099a2 <_calloc_r+0x1e>
 8009996:	2600      	movs	r6, #0
 8009998:	4630      	mov	r0, r6
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	220c      	movs	r2, #12
 800999e:	6002      	str	r2, [r0, #0]
 80099a0:	e7f9      	b.n	8009996 <_calloc_r+0x12>
 80099a2:	462a      	mov	r2, r5
 80099a4:	4621      	mov	r1, r4
 80099a6:	f7fe fa3a 	bl	8007e1e <memset>
 80099aa:	e7f5      	b.n	8009998 <_calloc_r+0x14>

080099ac <__ascii_mbtowc>:
 80099ac:	b082      	sub	sp, #8
 80099ae:	b901      	cbnz	r1, 80099b2 <__ascii_mbtowc+0x6>
 80099b0:	a901      	add	r1, sp, #4
 80099b2:	b142      	cbz	r2, 80099c6 <__ascii_mbtowc+0x1a>
 80099b4:	b14b      	cbz	r3, 80099ca <__ascii_mbtowc+0x1e>
 80099b6:	7813      	ldrb	r3, [r2, #0]
 80099b8:	600b      	str	r3, [r1, #0]
 80099ba:	7812      	ldrb	r2, [r2, #0]
 80099bc:	1e10      	subs	r0, r2, #0
 80099be:	bf18      	it	ne
 80099c0:	2001      	movne	r0, #1
 80099c2:	b002      	add	sp, #8
 80099c4:	4770      	bx	lr
 80099c6:	4610      	mov	r0, r2
 80099c8:	e7fb      	b.n	80099c2 <__ascii_mbtowc+0x16>
 80099ca:	f06f 0001 	mvn.w	r0, #1
 80099ce:	e7f8      	b.n	80099c2 <__ascii_mbtowc+0x16>

080099d0 <_realloc_r>:
 80099d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	4680      	mov	r8, r0
 80099d6:	4615      	mov	r5, r2
 80099d8:	460c      	mov	r4, r1
 80099da:	b921      	cbnz	r1, 80099e6 <_realloc_r+0x16>
 80099dc:	4611      	mov	r1, r2
 80099de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	f7ff b97b 	b.w	8008cdc <_malloc_r>
 80099e6:	b92a      	cbnz	r2, 80099f4 <_realloc_r+0x24>
 80099e8:	f7ff f906 	bl	8008bf8 <_free_r>
 80099ec:	2400      	movs	r4, #0
 80099ee:	4620      	mov	r0, r4
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	f000 f841 	bl	8009a7a <_malloc_usable_size_r>
 80099f8:	4285      	cmp	r5, r0
 80099fa:	4606      	mov	r6, r0
 80099fc:	d802      	bhi.n	8009a04 <_realloc_r+0x34>
 80099fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a02:	d8f4      	bhi.n	80099ee <_realloc_r+0x1e>
 8009a04:	4629      	mov	r1, r5
 8009a06:	4640      	mov	r0, r8
 8009a08:	f7ff f968 	bl	8008cdc <_malloc_r>
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d0ec      	beq.n	80099ec <_realloc_r+0x1c>
 8009a12:	42b5      	cmp	r5, r6
 8009a14:	462a      	mov	r2, r5
 8009a16:	4621      	mov	r1, r4
 8009a18:	bf28      	it	cs
 8009a1a:	4632      	movcs	r2, r6
 8009a1c:	f7fe fa8d 	bl	8007f3a <memcpy>
 8009a20:	4621      	mov	r1, r4
 8009a22:	4640      	mov	r0, r8
 8009a24:	f7ff f8e8 	bl	8008bf8 <_free_r>
 8009a28:	463c      	mov	r4, r7
 8009a2a:	e7e0      	b.n	80099ee <_realloc_r+0x1e>

08009a2c <__ascii_wctomb>:
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	4608      	mov	r0, r1
 8009a30:	b141      	cbz	r1, 8009a44 <__ascii_wctomb+0x18>
 8009a32:	2aff      	cmp	r2, #255	@ 0xff
 8009a34:	d904      	bls.n	8009a40 <__ascii_wctomb+0x14>
 8009a36:	228a      	movs	r2, #138	@ 0x8a
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	4770      	bx	lr
 8009a40:	2001      	movs	r0, #1
 8009a42:	700a      	strb	r2, [r1, #0]
 8009a44:	4770      	bx	lr
	...

08009a48 <fiprintf>:
 8009a48:	b40e      	push	{r1, r2, r3}
 8009a4a:	b503      	push	{r0, r1, lr}
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	ab03      	add	r3, sp, #12
 8009a50:	4805      	ldr	r0, [pc, #20]	@ (8009a68 <fiprintf+0x20>)
 8009a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a56:	6800      	ldr	r0, [r0, #0]
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	f000 f83d 	bl	8009ad8 <_vfiprintf_r>
 8009a5e:	b002      	add	sp, #8
 8009a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a64:	b003      	add	sp, #12
 8009a66:	4770      	bx	lr
 8009a68:	20000024 	.word	0x20000024

08009a6c <abort>:
 8009a6c:	2006      	movs	r0, #6
 8009a6e:	b508      	push	{r3, lr}
 8009a70:	f000 fa06 	bl	8009e80 <raise>
 8009a74:	2001      	movs	r0, #1
 8009a76:	f7f7 ff48 	bl	800190a <_exit>

08009a7a <_malloc_usable_size_r>:
 8009a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a7e:	1f18      	subs	r0, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	bfbc      	itt	lt
 8009a84:	580b      	ldrlt	r3, [r1, r0]
 8009a86:	18c0      	addlt	r0, r0, r3
 8009a88:	4770      	bx	lr

08009a8a <__sfputc_r>:
 8009a8a:	6893      	ldr	r3, [r2, #8]
 8009a8c:	b410      	push	{r4}
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	6093      	str	r3, [r2, #8]
 8009a94:	da07      	bge.n	8009aa6 <__sfputc_r+0x1c>
 8009a96:	6994      	ldr	r4, [r2, #24]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	db01      	blt.n	8009aa0 <__sfputc_r+0x16>
 8009a9c:	290a      	cmp	r1, #10
 8009a9e:	d102      	bne.n	8009aa6 <__sfputc_r+0x1c>
 8009aa0:	bc10      	pop	{r4}
 8009aa2:	f000 b931 	b.w	8009d08 <__swbuf_r>
 8009aa6:	6813      	ldr	r3, [r2, #0]
 8009aa8:	1c58      	adds	r0, r3, #1
 8009aaa:	6010      	str	r0, [r2, #0]
 8009aac:	7019      	strb	r1, [r3, #0]
 8009aae:	4608      	mov	r0, r1
 8009ab0:	bc10      	pop	{r4}
 8009ab2:	4770      	bx	lr

08009ab4 <__sfputs_r>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	4614      	mov	r4, r2
 8009abc:	18d5      	adds	r5, r2, r3
 8009abe:	42ac      	cmp	r4, r5
 8009ac0:	d101      	bne.n	8009ac6 <__sfputs_r+0x12>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e007      	b.n	8009ad6 <__sfputs_r+0x22>
 8009ac6:	463a      	mov	r2, r7
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ace:	f7ff ffdc 	bl	8009a8a <__sfputc_r>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	d1f3      	bne.n	8009abe <__sfputs_r+0xa>
 8009ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ad8 <_vfiprintf_r>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	460d      	mov	r5, r1
 8009ade:	4614      	mov	r4, r2
 8009ae0:	4698      	mov	r8, r3
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	b09d      	sub	sp, #116	@ 0x74
 8009ae6:	b118      	cbz	r0, 8009af0 <_vfiprintf_r+0x18>
 8009ae8:	6a03      	ldr	r3, [r0, #32]
 8009aea:	b90b      	cbnz	r3, 8009af0 <_vfiprintf_r+0x18>
 8009aec:	f7fe f8fe 	bl	8007cec <__sinit>
 8009af0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009af2:	07d9      	lsls	r1, r3, #31
 8009af4:	d405      	bmi.n	8009b02 <_vfiprintf_r+0x2a>
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	059a      	lsls	r2, r3, #22
 8009afa:	d402      	bmi.n	8009b02 <_vfiprintf_r+0x2a>
 8009afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009afe:	f7fe fa0c 	bl	8007f1a <__retarget_lock_acquire_recursive>
 8009b02:	89ab      	ldrh	r3, [r5, #12]
 8009b04:	071b      	lsls	r3, r3, #28
 8009b06:	d501      	bpl.n	8009b0c <_vfiprintf_r+0x34>
 8009b08:	692b      	ldr	r3, [r5, #16]
 8009b0a:	b99b      	cbnz	r3, 8009b34 <_vfiprintf_r+0x5c>
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f000 f938 	bl	8009d84 <__swsetup_r>
 8009b14:	b170      	cbz	r0, 8009b34 <_vfiprintf_r+0x5c>
 8009b16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b18:	07dc      	lsls	r4, r3, #31
 8009b1a:	d504      	bpl.n	8009b26 <_vfiprintf_r+0x4e>
 8009b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b20:	b01d      	add	sp, #116	@ 0x74
 8009b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	0598      	lsls	r0, r3, #22
 8009b2a:	d4f7      	bmi.n	8009b1c <_vfiprintf_r+0x44>
 8009b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b2e:	f7fe f9f5 	bl	8007f1c <__retarget_lock_release_recursive>
 8009b32:	e7f3      	b.n	8009b1c <_vfiprintf_r+0x44>
 8009b34:	2300      	movs	r3, #0
 8009b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b38:	2320      	movs	r3, #32
 8009b3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b3e:	2330      	movs	r3, #48	@ 0x30
 8009b40:	f04f 0901 	mov.w	r9, #1
 8009b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b48:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009cf4 <_vfiprintf_r+0x21c>
 8009b4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b50:	4623      	mov	r3, r4
 8009b52:	469a      	mov	sl, r3
 8009b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b58:	b10a      	cbz	r2, 8009b5e <_vfiprintf_r+0x86>
 8009b5a:	2a25      	cmp	r2, #37	@ 0x25
 8009b5c:	d1f9      	bne.n	8009b52 <_vfiprintf_r+0x7a>
 8009b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b62:	d00b      	beq.n	8009b7c <_vfiprintf_r+0xa4>
 8009b64:	465b      	mov	r3, fp
 8009b66:	4622      	mov	r2, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff ffa2 	bl	8009ab4 <__sfputs_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	f000 80a7 	beq.w	8009cc4 <_vfiprintf_r+0x1ec>
 8009b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b78:	445a      	add	r2, fp
 8009b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 809f 	beq.w	8009cc4 <_vfiprintf_r+0x1ec>
 8009b86:	2300      	movs	r3, #0
 8009b88:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b90:	f10a 0a01 	add.w	sl, sl, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	9307      	str	r3, [sp, #28]
 8009b98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b9e:	4654      	mov	r4, sl
 8009ba0:	2205      	movs	r2, #5
 8009ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba6:	4853      	ldr	r0, [pc, #332]	@ (8009cf4 <_vfiprintf_r+0x21c>)
 8009ba8:	f7fe f9b9 	bl	8007f1e <memchr>
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	b9d8      	cbnz	r0, 8009be8 <_vfiprintf_r+0x110>
 8009bb0:	06d1      	lsls	r1, r2, #27
 8009bb2:	bf44      	itt	mi
 8009bb4:	2320      	movmi	r3, #32
 8009bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bba:	0713      	lsls	r3, r2, #28
 8009bbc:	bf44      	itt	mi
 8009bbe:	232b      	movmi	r3, #43	@ 0x2b
 8009bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bca:	d015      	beq.n	8009bf8 <_vfiprintf_r+0x120>
 8009bcc:	4654      	mov	r4, sl
 8009bce:	2000      	movs	r0, #0
 8009bd0:	f04f 0c0a 	mov.w	ip, #10
 8009bd4:	9a07      	ldr	r2, [sp, #28]
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bdc:	3b30      	subs	r3, #48	@ 0x30
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	d94b      	bls.n	8009c7a <_vfiprintf_r+0x1a2>
 8009be2:	b1b0      	cbz	r0, 8009c12 <_vfiprintf_r+0x13a>
 8009be4:	9207      	str	r2, [sp, #28]
 8009be6:	e014      	b.n	8009c12 <_vfiprintf_r+0x13a>
 8009be8:	eba0 0308 	sub.w	r3, r0, r8
 8009bec:	fa09 f303 	lsl.w	r3, r9, r3
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	46a2      	mov	sl, r4
 8009bf4:	9304      	str	r3, [sp, #16]
 8009bf6:	e7d2      	b.n	8009b9e <_vfiprintf_r+0xc6>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	1d19      	adds	r1, r3, #4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	9103      	str	r1, [sp, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfbb      	ittet	lt
 8009c04:	425b      	neglt	r3, r3
 8009c06:	f042 0202 	orrlt.w	r2, r2, #2
 8009c0a:	9307      	strge	r3, [sp, #28]
 8009c0c:	9307      	strlt	r3, [sp, #28]
 8009c0e:	bfb8      	it	lt
 8009c10:	9204      	strlt	r2, [sp, #16]
 8009c12:	7823      	ldrb	r3, [r4, #0]
 8009c14:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c16:	d10a      	bne.n	8009c2e <_vfiprintf_r+0x156>
 8009c18:	7863      	ldrb	r3, [r4, #1]
 8009c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c1c:	d132      	bne.n	8009c84 <_vfiprintf_r+0x1ac>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	3402      	adds	r4, #2
 8009c22:	1d1a      	adds	r2, r3, #4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	9203      	str	r2, [sp, #12]
 8009c28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c2c:	9305      	str	r3, [sp, #20]
 8009c2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009cf8 <_vfiprintf_r+0x220>
 8009c32:	2203      	movs	r2, #3
 8009c34:	4650      	mov	r0, sl
 8009c36:	7821      	ldrb	r1, [r4, #0]
 8009c38:	f7fe f971 	bl	8007f1e <memchr>
 8009c3c:	b138      	cbz	r0, 8009c4e <_vfiprintf_r+0x176>
 8009c3e:	2240      	movs	r2, #64	@ 0x40
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	eba0 000a 	sub.w	r0, r0, sl
 8009c46:	4082      	lsls	r2, r0
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	3401      	adds	r4, #1
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c52:	2206      	movs	r2, #6
 8009c54:	4829      	ldr	r0, [pc, #164]	@ (8009cfc <_vfiprintf_r+0x224>)
 8009c56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c5a:	f7fe f960 	bl	8007f1e <memchr>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d03f      	beq.n	8009ce2 <_vfiprintf_r+0x20a>
 8009c62:	4b27      	ldr	r3, [pc, #156]	@ (8009d00 <_vfiprintf_r+0x228>)
 8009c64:	bb1b      	cbnz	r3, 8009cae <_vfiprintf_r+0x1d6>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	3307      	adds	r3, #7
 8009c6a:	f023 0307 	bic.w	r3, r3, #7
 8009c6e:	3308      	adds	r3, #8
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c74:	443b      	add	r3, r7
 8009c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c78:	e76a      	b.n	8009b50 <_vfiprintf_r+0x78>
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c82:	e7a8      	b.n	8009bd6 <_vfiprintf_r+0xfe>
 8009c84:	2300      	movs	r3, #0
 8009c86:	f04f 0c0a 	mov.w	ip, #10
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	3401      	adds	r4, #1
 8009c8e:	9305      	str	r3, [sp, #20]
 8009c90:	4620      	mov	r0, r4
 8009c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c96:	3a30      	subs	r2, #48	@ 0x30
 8009c98:	2a09      	cmp	r2, #9
 8009c9a:	d903      	bls.n	8009ca4 <_vfiprintf_r+0x1cc>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0c6      	beq.n	8009c2e <_vfiprintf_r+0x156>
 8009ca0:	9105      	str	r1, [sp, #20]
 8009ca2:	e7c4      	b.n	8009c2e <_vfiprintf_r+0x156>
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cac:	e7f0      	b.n	8009c90 <_vfiprintf_r+0x1b8>
 8009cae:	ab03      	add	r3, sp, #12
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	462a      	mov	r2, r5
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	4b13      	ldr	r3, [pc, #76]	@ (8009d04 <_vfiprintf_r+0x22c>)
 8009cb8:	a904      	add	r1, sp, #16
 8009cba:	f7fd fbcd 	bl	8007458 <_printf_float>
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	1c78      	adds	r0, r7, #1
 8009cc2:	d1d6      	bne.n	8009c72 <_vfiprintf_r+0x19a>
 8009cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cc6:	07d9      	lsls	r1, r3, #31
 8009cc8:	d405      	bmi.n	8009cd6 <_vfiprintf_r+0x1fe>
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	059a      	lsls	r2, r3, #22
 8009cce:	d402      	bmi.n	8009cd6 <_vfiprintf_r+0x1fe>
 8009cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cd2:	f7fe f923 	bl	8007f1c <__retarget_lock_release_recursive>
 8009cd6:	89ab      	ldrh	r3, [r5, #12]
 8009cd8:	065b      	lsls	r3, r3, #25
 8009cda:	f53f af1f 	bmi.w	8009b1c <_vfiprintf_r+0x44>
 8009cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ce0:	e71e      	b.n	8009b20 <_vfiprintf_r+0x48>
 8009ce2:	ab03      	add	r3, sp, #12
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	462a      	mov	r2, r5
 8009ce8:	4630      	mov	r0, r6
 8009cea:	4b06      	ldr	r3, [pc, #24]	@ (8009d04 <_vfiprintf_r+0x22c>)
 8009cec:	a904      	add	r1, sp, #16
 8009cee:	f7fd fe51 	bl	8007994 <_printf_i>
 8009cf2:	e7e4      	b.n	8009cbe <_vfiprintf_r+0x1e6>
 8009cf4:	0800b128 	.word	0x0800b128
 8009cf8:	0800b12e 	.word	0x0800b12e
 8009cfc:	0800b132 	.word	0x0800b132
 8009d00:	08007459 	.word	0x08007459
 8009d04:	08009ab5 	.word	0x08009ab5

08009d08 <__swbuf_r>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	460e      	mov	r6, r1
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	4605      	mov	r5, r0
 8009d10:	b118      	cbz	r0, 8009d1a <__swbuf_r+0x12>
 8009d12:	6a03      	ldr	r3, [r0, #32]
 8009d14:	b90b      	cbnz	r3, 8009d1a <__swbuf_r+0x12>
 8009d16:	f7fd ffe9 	bl	8007cec <__sinit>
 8009d1a:	69a3      	ldr	r3, [r4, #24]
 8009d1c:	60a3      	str	r3, [r4, #8]
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	071a      	lsls	r2, r3, #28
 8009d22:	d501      	bpl.n	8009d28 <__swbuf_r+0x20>
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	b943      	cbnz	r3, 8009d3a <__swbuf_r+0x32>
 8009d28:	4621      	mov	r1, r4
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 f82a 	bl	8009d84 <__swsetup_r>
 8009d30:	b118      	cbz	r0, 8009d3a <__swbuf_r+0x32>
 8009d32:	f04f 37ff 	mov.w	r7, #4294967295
 8009d36:	4638      	mov	r0, r7
 8009d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	6922      	ldr	r2, [r4, #16]
 8009d3e:	b2f6      	uxtb	r6, r6
 8009d40:	1a98      	subs	r0, r3, r2
 8009d42:	6963      	ldr	r3, [r4, #20]
 8009d44:	4637      	mov	r7, r6
 8009d46:	4283      	cmp	r3, r0
 8009d48:	dc05      	bgt.n	8009d56 <__swbuf_r+0x4e>
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f7ff fda9 	bl	80098a4 <_fflush_r>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d1ed      	bne.n	8009d32 <__swbuf_r+0x2a>
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	60a3      	str	r3, [r4, #8]
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	6022      	str	r2, [r4, #0]
 8009d62:	701e      	strb	r6, [r3, #0]
 8009d64:	6962      	ldr	r2, [r4, #20]
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d004      	beq.n	8009d76 <__swbuf_r+0x6e>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	07db      	lsls	r3, r3, #31
 8009d70:	d5e1      	bpl.n	8009d36 <__swbuf_r+0x2e>
 8009d72:	2e0a      	cmp	r6, #10
 8009d74:	d1df      	bne.n	8009d36 <__swbuf_r+0x2e>
 8009d76:	4621      	mov	r1, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f7ff fd93 	bl	80098a4 <_fflush_r>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d0d9      	beq.n	8009d36 <__swbuf_r+0x2e>
 8009d82:	e7d6      	b.n	8009d32 <__swbuf_r+0x2a>

08009d84 <__swsetup_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4b29      	ldr	r3, [pc, #164]	@ (8009e2c <__swsetup_r+0xa8>)
 8009d88:	4605      	mov	r5, r0
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	b118      	cbz	r0, 8009d98 <__swsetup_r+0x14>
 8009d90:	6a03      	ldr	r3, [r0, #32]
 8009d92:	b90b      	cbnz	r3, 8009d98 <__swsetup_r+0x14>
 8009d94:	f7fd ffaa 	bl	8007cec <__sinit>
 8009d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9c:	0719      	lsls	r1, r3, #28
 8009d9e:	d422      	bmi.n	8009de6 <__swsetup_r+0x62>
 8009da0:	06da      	lsls	r2, r3, #27
 8009da2:	d407      	bmi.n	8009db4 <__swsetup_r+0x30>
 8009da4:	2209      	movs	r2, #9
 8009da6:	602a      	str	r2, [r5, #0]
 8009da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	e033      	b.n	8009e1c <__swsetup_r+0x98>
 8009db4:	0758      	lsls	r0, r3, #29
 8009db6:	d512      	bpl.n	8009dde <__swsetup_r+0x5a>
 8009db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dba:	b141      	cbz	r1, 8009dce <__swsetup_r+0x4a>
 8009dbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dc0:	4299      	cmp	r1, r3
 8009dc2:	d002      	beq.n	8009dca <__swsetup_r+0x46>
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f7fe ff17 	bl	8008bf8 <_free_r>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6063      	str	r3, [r4, #4]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f043 0308 	orr.w	r3, r3, #8
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	6923      	ldr	r3, [r4, #16]
 8009de8:	b94b      	cbnz	r3, 8009dfe <__swsetup_r+0x7a>
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009df4:	d003      	beq.n	8009dfe <__swsetup_r+0x7a>
 8009df6:	4621      	mov	r1, r4
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 f882 	bl	8009f02 <__smakebuf_r>
 8009dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e02:	f013 0201 	ands.w	r2, r3, #1
 8009e06:	d00a      	beq.n	8009e1e <__swsetup_r+0x9a>
 8009e08:	2200      	movs	r2, #0
 8009e0a:	60a2      	str	r2, [r4, #8]
 8009e0c:	6962      	ldr	r2, [r4, #20]
 8009e0e:	4252      	negs	r2, r2
 8009e10:	61a2      	str	r2, [r4, #24]
 8009e12:	6922      	ldr	r2, [r4, #16]
 8009e14:	b942      	cbnz	r2, 8009e28 <__swsetup_r+0xa4>
 8009e16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e1a:	d1c5      	bne.n	8009da8 <__swsetup_r+0x24>
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}
 8009e1e:	0799      	lsls	r1, r3, #30
 8009e20:	bf58      	it	pl
 8009e22:	6962      	ldrpl	r2, [r4, #20]
 8009e24:	60a2      	str	r2, [r4, #8]
 8009e26:	e7f4      	b.n	8009e12 <__swsetup_r+0x8e>
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e7f7      	b.n	8009e1c <__swsetup_r+0x98>
 8009e2c:	20000024 	.word	0x20000024

08009e30 <_raise_r>:
 8009e30:	291f      	cmp	r1, #31
 8009e32:	b538      	push	{r3, r4, r5, lr}
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	d904      	bls.n	8009e44 <_raise_r+0x14>
 8009e3a:	2316      	movs	r3, #22
 8009e3c:	6003      	str	r3, [r0, #0]
 8009e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e46:	b112      	cbz	r2, 8009e4e <_raise_r+0x1e>
 8009e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e4c:	b94b      	cbnz	r3, 8009e62 <_raise_r+0x32>
 8009e4e:	4628      	mov	r0, r5
 8009e50:	f000 f830 	bl	8009eb4 <_getpid_r>
 8009e54:	4622      	mov	r2, r4
 8009e56:	4601      	mov	r1, r0
 8009e58:	4628      	mov	r0, r5
 8009e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e5e:	f000 b817 	b.w	8009e90 <_kill_r>
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d00a      	beq.n	8009e7c <_raise_r+0x4c>
 8009e66:	1c59      	adds	r1, r3, #1
 8009e68:	d103      	bne.n	8009e72 <_raise_r+0x42>
 8009e6a:	2316      	movs	r3, #22
 8009e6c:	6003      	str	r3, [r0, #0]
 8009e6e:	2001      	movs	r0, #1
 8009e70:	e7e7      	b.n	8009e42 <_raise_r+0x12>
 8009e72:	2100      	movs	r1, #0
 8009e74:	4620      	mov	r0, r4
 8009e76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e7a:	4798      	blx	r3
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e7e0      	b.n	8009e42 <_raise_r+0x12>

08009e80 <raise>:
 8009e80:	4b02      	ldr	r3, [pc, #8]	@ (8009e8c <raise+0xc>)
 8009e82:	4601      	mov	r1, r0
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	f7ff bfd3 	b.w	8009e30 <_raise_r>
 8009e8a:	bf00      	nop
 8009e8c:	20000024 	.word	0x20000024

08009e90 <_kill_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	2300      	movs	r3, #0
 8009e94:	4d06      	ldr	r5, [pc, #24]	@ (8009eb0 <_kill_r+0x20>)
 8009e96:	4604      	mov	r4, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	f7f7 fd24 	bl	80018ea <_kill>
 8009ea2:	1c43      	adds	r3, r0, #1
 8009ea4:	d102      	bne.n	8009eac <_kill_r+0x1c>
 8009ea6:	682b      	ldr	r3, [r5, #0]
 8009ea8:	b103      	cbz	r3, 8009eac <_kill_r+0x1c>
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	bd38      	pop	{r3, r4, r5, pc}
 8009eae:	bf00      	nop
 8009eb0:	20002408 	.word	0x20002408

08009eb4 <_getpid_r>:
 8009eb4:	f7f7 bd12 	b.w	80018dc <_getpid>

08009eb8 <__swhatbuf_r>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	460c      	mov	r4, r1
 8009ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec0:	4615      	mov	r5, r2
 8009ec2:	2900      	cmp	r1, #0
 8009ec4:	461e      	mov	r6, r3
 8009ec6:	b096      	sub	sp, #88	@ 0x58
 8009ec8:	da0c      	bge.n	8009ee4 <__swhatbuf_r+0x2c>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ed2:	bf14      	ite	ne
 8009ed4:	2340      	movne	r3, #64	@ 0x40
 8009ed6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009eda:	2000      	movs	r0, #0
 8009edc:	6031      	str	r1, [r6, #0]
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	b016      	add	sp, #88	@ 0x58
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	466a      	mov	r2, sp
 8009ee6:	f000 f849 	bl	8009f7c <_fstat_r>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	dbed      	blt.n	8009eca <__swhatbuf_r+0x12>
 8009eee:	9901      	ldr	r1, [sp, #4]
 8009ef0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ef4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ef8:	4259      	negs	r1, r3
 8009efa:	4159      	adcs	r1, r3
 8009efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f00:	e7eb      	b.n	8009eda <__swhatbuf_r+0x22>

08009f02 <__smakebuf_r>:
 8009f02:	898b      	ldrh	r3, [r1, #12]
 8009f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f06:	079d      	lsls	r5, r3, #30
 8009f08:	4606      	mov	r6, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	d507      	bpl.n	8009f1e <__smakebuf_r+0x1c>
 8009f0e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f12:	6023      	str	r3, [r4, #0]
 8009f14:	6123      	str	r3, [r4, #16]
 8009f16:	2301      	movs	r3, #1
 8009f18:	6163      	str	r3, [r4, #20]
 8009f1a:	b003      	add	sp, #12
 8009f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1e:	466a      	mov	r2, sp
 8009f20:	ab01      	add	r3, sp, #4
 8009f22:	f7ff ffc9 	bl	8009eb8 <__swhatbuf_r>
 8009f26:	9f00      	ldr	r7, [sp, #0]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7fe fed5 	bl	8008cdc <_malloc_r>
 8009f32:	b948      	cbnz	r0, 8009f48 <__smakebuf_r+0x46>
 8009f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f38:	059a      	lsls	r2, r3, #22
 8009f3a:	d4ee      	bmi.n	8009f1a <__smakebuf_r+0x18>
 8009f3c:	f023 0303 	bic.w	r3, r3, #3
 8009f40:	f043 0302 	orr.w	r3, r3, #2
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	e7e2      	b.n	8009f0e <__smakebuf_r+0xc>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	9b01      	ldr	r3, [sp, #4]
 8009f56:	6020      	str	r0, [r4, #0]
 8009f58:	b15b      	cbz	r3, 8009f72 <__smakebuf_r+0x70>
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f60:	f000 f81e 	bl	8009fa0 <_isatty_r>
 8009f64:	b128      	cbz	r0, 8009f72 <__smakebuf_r+0x70>
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f023 0303 	bic.w	r3, r3, #3
 8009f6c:	f043 0301 	orr.w	r3, r3, #1
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	431d      	orrs	r5, r3
 8009f76:	81a5      	strh	r5, [r4, #12]
 8009f78:	e7cf      	b.n	8009f1a <__smakebuf_r+0x18>
	...

08009f7c <_fstat_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4d06      	ldr	r5, [pc, #24]	@ (8009f9c <_fstat_r+0x20>)
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	4611      	mov	r1, r2
 8009f88:	602b      	str	r3, [r5, #0]
 8009f8a:	f7f7 fd0d 	bl	80019a8 <_fstat>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	d102      	bne.n	8009f98 <_fstat_r+0x1c>
 8009f92:	682b      	ldr	r3, [r5, #0]
 8009f94:	b103      	cbz	r3, 8009f98 <_fstat_r+0x1c>
 8009f96:	6023      	str	r3, [r4, #0]
 8009f98:	bd38      	pop	{r3, r4, r5, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20002408 	.word	0x20002408

08009fa0 <_isatty_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	4d05      	ldr	r5, [pc, #20]	@ (8009fbc <_isatty_r+0x1c>)
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	4608      	mov	r0, r1
 8009faa:	602b      	str	r3, [r5, #0]
 8009fac:	f7f7 fd0b 	bl	80019c6 <_isatty>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_isatty_r+0x1a>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_isatty_r+0x1a>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	20002408 	.word	0x20002408

08009fc0 <_init>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	bf00      	nop
 8009fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fc6:	bc08      	pop	{r3}
 8009fc8:	469e      	mov	lr, r3
 8009fca:	4770      	bx	lr

08009fcc <_fini>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	bf00      	nop
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr
